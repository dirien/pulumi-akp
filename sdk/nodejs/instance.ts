// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages an Argo CD instance
 *
 * ## Example Usage
 *
 * ### Basic)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akp from "@ediri/akp";
 *
 * const argocd = new akp.Instance("argocd", {argocd: {
 *     spec: {
 *         instanceSpec: {
 *             declarativeManagementEnabled: true,
 *         },
 *         version: "v2.11.4",
 *     },
 * }});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import AKP instance using its `name`. For example:
 *
 * ```sh
 * $ pulumi import akp:index/instance:Instance example test
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akp:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
     * ApplicationSet's pull request generator, see
     * [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
     * In this example, `tokenRef.secretName` would be application-set-secret.
     */
    public readonly applicationSetSecret!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Argo CD instance configuration
     */
    public readonly argocd!: pulumi.Output<outputs.InstanceArgocd>;
    /**
     * is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
     */
    public readonly argocdCm!: pulumi.Output<{[key: string]: string}>;
    /**
     * configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
     * available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    public readonly argocdImageUpdaterConfig!: pulumi.Output<{[key: string]: string}>;
    /**
     * contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
     * available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    public readonly argocdImageUpdaterSecret!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
     * ConfigMap of Argo CD, for available options and examples, refer to [this
     * documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    public readonly argocdImageUpdaterSshConfig!: pulumi.Output<{[key: string]: string}>;
    /**
     * configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
     * details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
     */
    public readonly argocdNotificationsCm!: pulumi.Output<{[key: string]: string}>;
    /**
     * contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
     * CD, for more details and examples, refer to [this
     * documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
     */
    public readonly argocdNotificationsSecret!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
     */
    public readonly argocdRbacCm!: pulumi.Output<{[key: string]: string}>;
    /**
     * is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
     */
    public readonly argocdSecret!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
     */
    public readonly argocdSshKnownHostsCm!: pulumi.Output<{[key: string]: string}>;
    /**
     * is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
     */
    public readonly argocdTlsCertsCm!: pulumi.Output<{[key: string]: string}>;
    /**
     * is a map of [Config Management
     * Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
     * the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
     */
    public readonly configManagementPlugins!: pulumi.Output<{[key: string]: outputs.InstanceConfigManagementPlugins} | undefined>;
    /**
     * Instance name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
     * options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
     */
    public readonly repoCredentialSecrets!: pulumi.Output<{[key: string]: {[key: string]: string}} | undefined>;
    /**
     * is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
     * the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
     */
    public readonly repoTemplateCredentialSecrets!: pulumi.Output<{[key: string]: {[key: string]: string}} | undefined>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["applicationSetSecret"] = state ? state.applicationSetSecret : undefined;
            resourceInputs["argocd"] = state ? state.argocd : undefined;
            resourceInputs["argocdCm"] = state ? state.argocdCm : undefined;
            resourceInputs["argocdImageUpdaterConfig"] = state ? state.argocdImageUpdaterConfig : undefined;
            resourceInputs["argocdImageUpdaterSecret"] = state ? state.argocdImageUpdaterSecret : undefined;
            resourceInputs["argocdImageUpdaterSshConfig"] = state ? state.argocdImageUpdaterSshConfig : undefined;
            resourceInputs["argocdNotificationsCm"] = state ? state.argocdNotificationsCm : undefined;
            resourceInputs["argocdNotificationsSecret"] = state ? state.argocdNotificationsSecret : undefined;
            resourceInputs["argocdRbacCm"] = state ? state.argocdRbacCm : undefined;
            resourceInputs["argocdSecret"] = state ? state.argocdSecret : undefined;
            resourceInputs["argocdSshKnownHostsCm"] = state ? state.argocdSshKnownHostsCm : undefined;
            resourceInputs["argocdTlsCertsCm"] = state ? state.argocdTlsCertsCm : undefined;
            resourceInputs["configManagementPlugins"] = state ? state.configManagementPlugins : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repoCredentialSecrets"] = state ? state.repoCredentialSecrets : undefined;
            resourceInputs["repoTemplateCredentialSecrets"] = state ? state.repoTemplateCredentialSecrets : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.argocd === undefined) && !opts.urn) {
                throw new Error("Missing required property 'argocd'");
            }
            resourceInputs["applicationSetSecret"] = args?.applicationSetSecret ? pulumi.secret(args.applicationSetSecret) : undefined;
            resourceInputs["argocd"] = args ? args.argocd : undefined;
            resourceInputs["argocdCm"] = args ? args.argocdCm : undefined;
            resourceInputs["argocdImageUpdaterConfig"] = args ? args.argocdImageUpdaterConfig : undefined;
            resourceInputs["argocdImageUpdaterSecret"] = args?.argocdImageUpdaterSecret ? pulumi.secret(args.argocdImageUpdaterSecret) : undefined;
            resourceInputs["argocdImageUpdaterSshConfig"] = args ? args.argocdImageUpdaterSshConfig : undefined;
            resourceInputs["argocdNotificationsCm"] = args ? args.argocdNotificationsCm : undefined;
            resourceInputs["argocdNotificationsSecret"] = args?.argocdNotificationsSecret ? pulumi.secret(args.argocdNotificationsSecret) : undefined;
            resourceInputs["argocdRbacCm"] = args ? args.argocdRbacCm : undefined;
            resourceInputs["argocdSecret"] = args?.argocdSecret ? pulumi.secret(args.argocdSecret) : undefined;
            resourceInputs["argocdSshKnownHostsCm"] = args ? args.argocdSshKnownHostsCm : undefined;
            resourceInputs["argocdTlsCertsCm"] = args ? args.argocdTlsCertsCm : undefined;
            resourceInputs["configManagementPlugins"] = args ? args.configManagementPlugins : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repoCredentialSecrets"] = args?.repoCredentialSecrets ? pulumi.secret(args.repoCredentialSecrets) : undefined;
            resourceInputs["repoTemplateCredentialSecrets"] = args?.repoTemplateCredentialSecrets ? pulumi.secret(args.repoTemplateCredentialSecrets) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["applicationSetSecret", "argocdImageUpdaterSecret", "argocdNotificationsSecret", "argocdSecret", "repoCredentialSecrets", "repoTemplateCredentialSecrets"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
     * ApplicationSet's pull request generator, see
     * [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
     * In this example, `tokenRef.secretName` would be application-set-secret.
     */
    applicationSetSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Argo CD instance configuration
     */
    argocd?: pulumi.Input<inputs.InstanceArgocd>;
    /**
     * is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
     */
    argocdCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
     * available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    argocdImageUpdaterConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
     * available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    argocdImageUpdaterSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
     * ConfigMap of Argo CD, for available options and examples, refer to [this
     * documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    argocdImageUpdaterSshConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
     * details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
     */
    argocdNotificationsCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
     * CD, for more details and examples, refer to [this
     * documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
     */
    argocdNotificationsSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
     */
    argocdRbacCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
     */
    argocdSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
     */
    argocdSshKnownHostsCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
     */
    argocdTlsCertsCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is a map of [Config Management
     * Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
     * the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
     */
    configManagementPlugins?: pulumi.Input<{[key: string]: pulumi.Input<inputs.InstanceConfigManagementPlugins>}>;
    /**
     * Instance name
     */
    name?: pulumi.Input<string>;
    /**
     * is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
     * options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
     */
    repoCredentialSecrets?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>;
    /**
     * is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
     * the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
     */
    repoTemplateCredentialSecrets?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
     * ApplicationSet's pull request generator, see
     * [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
     * In this example, `tokenRef.secretName` would be application-set-secret.
     */
    applicationSetSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Argo CD instance configuration
     */
    argocd: pulumi.Input<inputs.InstanceArgocd>;
    /**
     * is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
     */
    argocdCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
     * available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    argocdImageUpdaterConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
     * available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    argocdImageUpdaterSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
     * ConfigMap of Argo CD, for available options and examples, refer to [this
     * documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
     */
    argocdImageUpdaterSshConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
     * details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
     */
    argocdNotificationsCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
     * CD, for more details and examples, refer to [this
     * documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
     */
    argocdNotificationsSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
     */
    argocdRbacCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
     */
    argocdSecret?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
     */
    argocdSshKnownHostsCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
     */
    argocdTlsCertsCm?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * is a map of [Config Management
     * Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
     * the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
     */
    configManagementPlugins?: pulumi.Input<{[key: string]: pulumi.Input<inputs.InstanceConfigManagementPlugins>}>;
    /**
     * Instance name
     */
    name?: pulumi.Input<string>;
    /**
     * is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
     * options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
     */
    repoCredentialSecrets?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>;
    /**
     * is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
     * the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
     * Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
     * concrete example, refer to [this
     * documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
     */
    repoTemplateCredentialSecrets?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>;
}
