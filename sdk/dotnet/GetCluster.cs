// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Akp
{
    public static class GetCluster
    {
        /// <summary>
        /// Gets information about a cluster by its name and Argo CD instance ID
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Akp = Pulumi.Akp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleInstance = Akp.GetInstance.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     var exampleCluster = Akp.GetCluster.Invoke(new()
        ///     {
        ///         InstanceId = exampleInstance.Apply(getInstanceResult =&gt; getInstanceResult.Id),
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("akp:index/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about a cluster by its name and Argo CD instance ID
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Akp = Pulumi.Akp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleInstance = Akp.GetInstance.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     var exampleCluster = Akp.GetCluster.Invoke(new()
        ///     {
        ///         InstanceId = exampleInstance.Apply(getInstanceResult =&gt; getInstanceResult.Id),
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("akp:index/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Cluster name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Cluster name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Annotations
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Cluster ID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        public readonly string InstanceId;
        public readonly Outputs.GetClusterKubeConfigResult KubeConfig;
        /// <summary>
        /// Labels
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Cluster name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Agent installation namespace
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Remove agent Kubernetes resources from the managed cluster when destroying cluster
        /// </summary>
        public readonly bool RemoveAgentResourcesOnDestroy;
        /// <summary>
        /// Cluster spec
        /// </summary>
        public readonly Outputs.GetClusterSpecResult Spec;

        [OutputConstructor]
        private GetClusterResult(
            ImmutableDictionary<string, string> annotations,

            string id,

            string instanceId,

            Outputs.GetClusterKubeConfigResult kubeConfig,

            ImmutableDictionary<string, string> labels,

            string name,

            string @namespace,

            bool removeAgentResourcesOnDestroy,

            Outputs.GetClusterSpecResult spec)
        {
            Annotations = annotations;
            Id = id;
            InstanceId = instanceId;
            KubeConfig = kubeConfig;
            Labels = labels;
            Name = name;
            Namespace = @namespace;
            RemoveAgentResourcesOnDestroy = removeAgentResourcesOnDestroy;
            Spec = spec;
        }
    }
}
