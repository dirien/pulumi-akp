// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Akp
{
    public static class GetInstance
    {
        /// <summary>
        /// Gets information about an Argo CD instance by its name
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Akp = Pulumi.Akp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Akp.GetInstance.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("akp:index/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about an Argo CD instance by its name
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Akp = Pulumi.Akp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Akp.GetInstance.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("akp:index/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly ImmutableDictionary<string, string> ApplicationSetSecret;
        public readonly Outputs.GetInstanceArgocdResult Argocd;
        public readonly ImmutableDictionary<string, string> ArgocdCm;
        public readonly ImmutableDictionary<string, string> ArgocdImageUpdaterConfig;
        public readonly ImmutableDictionary<string, string> ArgocdImageUpdaterSecret;
        public readonly ImmutableDictionary<string, string> ArgocdImageUpdaterSshConfig;
        public readonly ImmutableDictionary<string, string> ArgocdNotificationsCm;
        public readonly ImmutableDictionary<string, string> ArgocdNotificationsSecret;
        public readonly ImmutableDictionary<string, string> ArgocdRbacCm;
        public readonly ImmutableDictionary<string, string> ArgocdSecret;
        public readonly ImmutableDictionary<string, string> ArgocdSshKnownHostsCm;
        public readonly ImmutableDictionary<string, string> ArgocdTlsCertsCm;
        public readonly ImmutableDictionary<string, Outputs.GetInstanceConfigManagementPluginsResult> ConfigManagementPlugins;
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableDictionary<string, ImmutableDictionary<string, string>> RepoCredentialSecrets;
        public readonly ImmutableDictionary<string, ImmutableDictionary<string, string>> RepoTemplateCredentialSecrets;

        [OutputConstructor]
        private GetInstanceResult(
            ImmutableDictionary<string, string> applicationSetSecret,

            Outputs.GetInstanceArgocdResult argocd,

            ImmutableDictionary<string, string> argocdCm,

            ImmutableDictionary<string, string> argocdImageUpdaterConfig,

            ImmutableDictionary<string, string> argocdImageUpdaterSecret,

            ImmutableDictionary<string, string> argocdImageUpdaterSshConfig,

            ImmutableDictionary<string, string> argocdNotificationsCm,

            ImmutableDictionary<string, string> argocdNotificationsSecret,

            ImmutableDictionary<string, string> argocdRbacCm,

            ImmutableDictionary<string, string> argocdSecret,

            ImmutableDictionary<string, string> argocdSshKnownHostsCm,

            ImmutableDictionary<string, string> argocdTlsCertsCm,

            ImmutableDictionary<string, Outputs.GetInstanceConfigManagementPluginsResult> configManagementPlugins,

            string id,

            string name,

            ImmutableDictionary<string, ImmutableDictionary<string, string>> repoCredentialSecrets,

            ImmutableDictionary<string, ImmutableDictionary<string, string>> repoTemplateCredentialSecrets)
        {
            ApplicationSetSecret = applicationSetSecret;
            Argocd = argocd;
            ArgocdCm = argocdCm;
            ArgocdImageUpdaterConfig = argocdImageUpdaterConfig;
            ArgocdImageUpdaterSecret = argocdImageUpdaterSecret;
            ArgocdImageUpdaterSshConfig = argocdImageUpdaterSshConfig;
            ArgocdNotificationsCm = argocdNotificationsCm;
            ArgocdNotificationsSecret = argocdNotificationsSecret;
            ArgocdRbacCm = argocdRbacCm;
            ArgocdSecret = argocdSecret;
            ArgocdSshKnownHostsCm = argocdSshKnownHostsCm;
            ArgocdTlsCertsCm = argocdTlsCertsCm;
            ConfigManagementPlugins = configManagementPlugins;
            Id = id;
            Name = name;
            RepoCredentialSecrets = repoCredentialSecrets;
            RepoTemplateCredentialSecrets = repoTemplateCredentialSecrets;
        }
    }
}
