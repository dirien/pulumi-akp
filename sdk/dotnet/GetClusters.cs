// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Akp
{
    public static class GetClusters
    {
        /// <summary>
        /// Gets information about all clusters attached to an Argo CD instance
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Akp = Pulumi.Akp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleInstance = Akp.GetInstance.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     var exampleClusters = Akp.GetClusters.Invoke(new()
        ///     {
        ///         InstanceId = exampleInstance.Apply(getInstanceResult =&gt; getInstanceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClustersResult> InvokeAsync(GetClustersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClustersResult>("akp:index/getClusters:getClusters", args ?? new GetClustersArgs(), options.WithDefaults());

        /// <summary>
        /// Gets information about all clusters attached to an Argo CD instance
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Akp = Pulumi.Akp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleInstance = Akp.GetInstance.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     var exampleClusters = Akp.GetClusters.Invoke(new()
        ///     {
        ///         InstanceId = exampleInstance.Apply(getInstanceResult =&gt; getInstanceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClustersResult> Invoke(GetClustersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClustersResult>("akp:index/getClusters:getClusters", args ?? new GetClustersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClustersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        public GetClustersArgs()
        {
        }
        public static new GetClustersArgs Empty => new GetClustersArgs();
    }

    public sealed class GetClustersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        public GetClustersInvokeArgs()
        {
        }
        public static new GetClustersInvokeArgs Empty => new GetClustersInvokeArgs();
    }


    [OutputType]
    public sealed class GetClustersResult
    {
        /// <summary>
        /// List of clusters
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClustersClusterResult> Clusters;
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Argo CD instance ID
        /// </summary>
        public readonly string InstanceId;

        [OutputConstructor]
        private GetClustersResult(
            ImmutableArray<Outputs.GetClustersClusterResult> clusters,

            string id,

            string instanceId)
        {
            Clusters = clusters;
            Id = id;
            InstanceId = instanceId;
        }
    }
}
