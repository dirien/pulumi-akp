// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akp

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-akp/sdk/go/akp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Argo CD instance
//
// ## Example Usage
//
// ### Basic)
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-akp/sdk/go/akp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := akp.NewInstance(ctx, "argocd", &akp.InstanceArgs{
//				Argocd: &akp.InstanceArgocdArgs{
//					Spec: &akp.InstanceArgocdSpecArgs{
//						InstanceSpec: &akp.InstanceArgocdSpecInstanceSpecArgs{
//							DeclarativeManagementEnabled: pulumi.Bool(true),
//						},
//						Version: pulumi.String("v2.11.4"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import AKP instance using its `name`. For example:
//
// ```sh
// $ pulumi import akp:index/instance:Instance example test
// ```
type Instance struct {
	pulumi.CustomResourceState

	// stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
	// ApplicationSet's pull request generator, see
	// [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
	// In this example, `tokenRef.secretName` would be application-set-secret.
	ApplicationSetSecret pulumi.StringMapOutput `pulumi:"applicationSetSecret"`
	// Argo CD instance configuration
	Argocd InstanceArgocdOutput `pulumi:"argocd"`
	// is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
	ArgocdCm pulumi.StringMapOutput `pulumi:"argocdCm"`
	// configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterConfig pulumi.StringMapOutput `pulumi:"argocdImageUpdaterConfig"`
	// contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSecret pulumi.StringMapOutput `pulumi:"argocdImageUpdaterSecret"`
	// contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
	// ConfigMap of Argo CD, for available options and examples, refer to [this
	// documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSshConfig pulumi.StringMapOutput `pulumi:"argocdImageUpdaterSshConfig"`
	// configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
	// details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
	ArgocdNotificationsCm pulumi.StringMapOutput `pulumi:"argocdNotificationsCm"`
	// contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
	// CD, for more details and examples, refer to [this
	// documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
	ArgocdNotificationsSecret pulumi.StringMapOutput `pulumi:"argocdNotificationsSecret"`
	// is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
	ArgocdRbacCm pulumi.StringMapOutput `pulumi:"argocdRbacCm"`
	// is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
	ArgocdSecret pulumi.StringMapOutput `pulumi:"argocdSecret"`
	// is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
	ArgocdSshKnownHostsCm pulumi.StringMapOutput `pulumi:"argocdSshKnownHostsCm"`
	// is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
	ArgocdTlsCertsCm pulumi.StringMapOutput `pulumi:"argocdTlsCertsCm"`
	// is a map of [Config Management
	// Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
	// the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
	ConfigManagementPlugins InstanceConfigManagementPluginsMapOutput `pulumi:"configManagementPlugins"`
	// Instance name
	Name pulumi.StringOutput `pulumi:"name"`
	// is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
	// options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
	RepoCredentialSecrets pulumi.StringMapMapOutput `pulumi:"repoCredentialSecrets"`
	// is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
	// the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
	RepoTemplateCredentialSecrets pulumi.StringMapMapOutput `pulumi:"repoTemplateCredentialSecrets"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Argocd == nil {
		return nil, errors.New("invalid value for required argument 'Argocd'")
	}
	if args.ApplicationSetSecret != nil {
		args.ApplicationSetSecret = pulumi.ToSecret(args.ApplicationSetSecret).(pulumi.StringMapInput)
	}
	if args.ArgocdImageUpdaterSecret != nil {
		args.ArgocdImageUpdaterSecret = pulumi.ToSecret(args.ArgocdImageUpdaterSecret).(pulumi.StringMapInput)
	}
	if args.ArgocdNotificationsSecret != nil {
		args.ArgocdNotificationsSecret = pulumi.ToSecret(args.ArgocdNotificationsSecret).(pulumi.StringMapInput)
	}
	if args.ArgocdSecret != nil {
		args.ArgocdSecret = pulumi.ToSecret(args.ArgocdSecret).(pulumi.StringMapInput)
	}
	if args.RepoCredentialSecrets != nil {
		args.RepoCredentialSecrets = pulumi.ToSecret(args.RepoCredentialSecrets).(pulumi.StringMapMapInput)
	}
	if args.RepoTemplateCredentialSecrets != nil {
		args.RepoTemplateCredentialSecrets = pulumi.ToSecret(args.RepoTemplateCredentialSecrets).(pulumi.StringMapMapInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applicationSetSecret",
		"argocdImageUpdaterSecret",
		"argocdNotificationsSecret",
		"argocdSecret",
		"repoCredentialSecrets",
		"repoTemplateCredentialSecrets",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("akp:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("akp:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
	// ApplicationSet's pull request generator, see
	// [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
	// In this example, `tokenRef.secretName` would be application-set-secret.
	ApplicationSetSecret map[string]string `pulumi:"applicationSetSecret"`
	// Argo CD instance configuration
	Argocd *InstanceArgocd `pulumi:"argocd"`
	// is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
	ArgocdCm map[string]string `pulumi:"argocdCm"`
	// configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterConfig map[string]string `pulumi:"argocdImageUpdaterConfig"`
	// contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSecret map[string]string `pulumi:"argocdImageUpdaterSecret"`
	// contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
	// ConfigMap of Argo CD, for available options and examples, refer to [this
	// documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSshConfig map[string]string `pulumi:"argocdImageUpdaterSshConfig"`
	// configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
	// details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
	ArgocdNotificationsCm map[string]string `pulumi:"argocdNotificationsCm"`
	// contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
	// CD, for more details and examples, refer to [this
	// documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
	ArgocdNotificationsSecret map[string]string `pulumi:"argocdNotificationsSecret"`
	// is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
	ArgocdRbacCm map[string]string `pulumi:"argocdRbacCm"`
	// is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
	ArgocdSecret map[string]string `pulumi:"argocdSecret"`
	// is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
	ArgocdSshKnownHostsCm map[string]string `pulumi:"argocdSshKnownHostsCm"`
	// is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
	ArgocdTlsCertsCm map[string]string `pulumi:"argocdTlsCertsCm"`
	// is a map of [Config Management
	// Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
	// the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
	ConfigManagementPlugins map[string]InstanceConfigManagementPlugins `pulumi:"configManagementPlugins"`
	// Instance name
	Name *string `pulumi:"name"`
	// is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
	// options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
	RepoCredentialSecrets map[string]map[string]string `pulumi:"repoCredentialSecrets"`
	// is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
	// the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
	RepoTemplateCredentialSecrets map[string]map[string]string `pulumi:"repoTemplateCredentialSecrets"`
}

type InstanceState struct {
	// stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
	// ApplicationSet's pull request generator, see
	// [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
	// In this example, `tokenRef.secretName` would be application-set-secret.
	ApplicationSetSecret pulumi.StringMapInput
	// Argo CD instance configuration
	Argocd InstanceArgocdPtrInput
	// is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
	ArgocdCm pulumi.StringMapInput
	// configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterConfig pulumi.StringMapInput
	// contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSecret pulumi.StringMapInput
	// contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
	// ConfigMap of Argo CD, for available options and examples, refer to [this
	// documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSshConfig pulumi.StringMapInput
	// configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
	// details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
	ArgocdNotificationsCm pulumi.StringMapInput
	// contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
	// CD, for more details and examples, refer to [this
	// documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
	ArgocdNotificationsSecret pulumi.StringMapInput
	// is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
	ArgocdRbacCm pulumi.StringMapInput
	// is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
	ArgocdSecret pulumi.StringMapInput
	// is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
	ArgocdSshKnownHostsCm pulumi.StringMapInput
	// is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
	ArgocdTlsCertsCm pulumi.StringMapInput
	// is a map of [Config Management
	// Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
	// the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
	ConfigManagementPlugins InstanceConfigManagementPluginsMapInput
	// Instance name
	Name pulumi.StringPtrInput
	// is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
	// options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
	RepoCredentialSecrets pulumi.StringMapMapInput
	// is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
	// the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
	RepoTemplateCredentialSecrets pulumi.StringMapMapInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
	// ApplicationSet's pull request generator, see
	// [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
	// In this example, `tokenRef.secretName` would be application-set-secret.
	ApplicationSetSecret map[string]string `pulumi:"applicationSetSecret"`
	// Argo CD instance configuration
	Argocd InstanceArgocd `pulumi:"argocd"`
	// is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
	ArgocdCm map[string]string `pulumi:"argocdCm"`
	// configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterConfig map[string]string `pulumi:"argocdImageUpdaterConfig"`
	// contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSecret map[string]string `pulumi:"argocdImageUpdaterSecret"`
	// contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
	// ConfigMap of Argo CD, for available options and examples, refer to [this
	// documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSshConfig map[string]string `pulumi:"argocdImageUpdaterSshConfig"`
	// configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
	// details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
	ArgocdNotificationsCm map[string]string `pulumi:"argocdNotificationsCm"`
	// contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
	// CD, for more details and examples, refer to [this
	// documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
	ArgocdNotificationsSecret map[string]string `pulumi:"argocdNotificationsSecret"`
	// is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
	ArgocdRbacCm map[string]string `pulumi:"argocdRbacCm"`
	// is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
	ArgocdSecret map[string]string `pulumi:"argocdSecret"`
	// is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
	ArgocdSshKnownHostsCm map[string]string `pulumi:"argocdSshKnownHostsCm"`
	// is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
	ArgocdTlsCertsCm map[string]string `pulumi:"argocdTlsCertsCm"`
	// is a map of [Config Management
	// Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
	// the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
	ConfigManagementPlugins map[string]InstanceConfigManagementPlugins `pulumi:"configManagementPlugins"`
	// Instance name
	Name *string `pulumi:"name"`
	// is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
	// options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
	RepoCredentialSecrets map[string]map[string]string `pulumi:"repoCredentialSecrets"`
	// is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
	// the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
	RepoTemplateCredentialSecrets map[string]map[string]string `pulumi:"repoTemplateCredentialSecrets"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
	// ApplicationSet's pull request generator, see
	// [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
	// In this example, `tokenRef.secretName` would be application-set-secret.
	ApplicationSetSecret pulumi.StringMapInput
	// Argo CD instance configuration
	Argocd InstanceArgocdInput
	// is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
	ArgocdCm pulumi.StringMapInput
	// configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterConfig pulumi.StringMapInput
	// contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
	// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSecret pulumi.StringMapInput
	// contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
	// ConfigMap of Argo CD, for available options and examples, refer to [this
	// documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
	ArgocdImageUpdaterSshConfig pulumi.StringMapInput
	// configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
	// details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
	ArgocdNotificationsCm pulumi.StringMapInput
	// contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
	// CD, for more details and examples, refer to [this
	// documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
	ArgocdNotificationsSecret pulumi.StringMapInput
	// is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
	ArgocdRbacCm pulumi.StringMapInput
	// is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
	ArgocdSecret pulumi.StringMapInput
	// is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
	ArgocdSshKnownHostsCm pulumi.StringMapInput
	// is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
	ArgocdTlsCertsCm pulumi.StringMapInput
	// is a map of [Config Management
	// Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
	// the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
	ConfigManagementPlugins InstanceConfigManagementPluginsMapInput
	// Instance name
	Name pulumi.StringPtrInput
	// is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
	// options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
	RepoCredentialSecrets pulumi.StringMapMapInput
	// is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
	// the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
	// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
	// concrete example, refer to [this
	// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
	RepoTemplateCredentialSecrets pulumi.StringMapMapInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// stores secret key-value that will be used by `ApplicationSet`. For an example of how to use this in your
// ApplicationSet's pull request generator, see
// [here](https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/applicationset/Generators-Pull-Request.md#github).
// In this example, `tokenRef.secretName` would be application-set-secret.
func (o InstanceOutput) ApplicationSetSecret() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ApplicationSetSecret }).(pulumi.StringMapOutput)
}

// Argo CD instance configuration
func (o InstanceOutput) Argocd() InstanceArgocdOutput {
	return o.ApplyT(func(v *Instance) InstanceArgocdOutput { return v.Argocd }).(InstanceArgocdOutput)
}

// is aligned with the options in `argocd-cm` ConfigMap as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-cm-yaml/).
func (o InstanceOutput) ArgocdCm() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdCm }).(pulumi.StringMapOutput)
}

// configures Argo CD image updater, and it is aligned with `argocd-image-updater-config` ConfigMap of Argo CD, for
// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
func (o InstanceOutput) ArgocdImageUpdaterConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdImageUpdaterConfig }).(pulumi.StringMapOutput)
}

// contains sensitive data (e.g., credentials for image updater to access registries) of Argo CD image updater, for
// available options and examples, refer to [this documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
func (o InstanceOutput) ArgocdImageUpdaterSecret() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdImageUpdaterSecret }).(pulumi.StringMapOutput)
}

// contains the ssh configuration for Argo CD image updater, and it is aligned with `argocd-image-updater-ssh-config`
// ConfigMap of Argo CD, for available options and examples, refer to [this
// documentation](https://argocd-image-updater.readthedocs.io/en/stable/).
func (o InstanceOutput) ArgocdImageUpdaterSshConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdImageUpdaterSshConfig }).(pulumi.StringMapOutput)
}

// configures Argo CD notifications, and it is aligned with `argocd-notifications-cm` ConfigMap of Argo CD, for more
// details and examples, refer to [this documentation](https://argocd-notifications.readthedocs.io/en/stable/).
func (o InstanceOutput) ArgocdNotificationsCm() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdNotificationsCm }).(pulumi.StringMapOutput)
}

// contains sensitive data of Argo CD notifications, and it is aligned with `argocd-notifications-secret` Secret of Argo
// CD, for more details and examples, refer to [this
// documentation](https://argocd-notifications.readthedocs.io/en/stable/services/overview/#sensitive-data).
func (o InstanceOutput) ArgocdNotificationsSecret() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdNotificationsSecret }).(pulumi.StringMapOutput)
}

// is aligned with the options in `argocd-rbac-cm` ConfigMap as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-rbac-cm-yaml/).
func (o InstanceOutput) ArgocdRbacCm() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdRbacCm }).(pulumi.StringMapOutput)
}

// is aligned with the options in `argocd-secret` Secret as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-secret-yaml/).
func (o InstanceOutput) ArgocdSecret() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdSecret }).(pulumi.StringMapOutput)
}

// is aligned with the options in `argocd-ssh-known-hosts-cm` ConfigMap as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-ssh-known-hosts-cm-yaml/).
func (o InstanceOutput) ArgocdSshKnownHostsCm() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdSshKnownHostsCm }).(pulumi.StringMapOutput)
}

// is aligned with the options in `argocd-tls-certs-cm` ConfigMap as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-tls-certs-cm-yaml/).
func (o InstanceOutput) ArgocdTlsCertsCm() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapOutput { return v.ArgocdTlsCertsCm }).(pulumi.StringMapOutput)
}

// is a map of [Config Management
// Plugins](https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/#config-management-plugins),
// the key of map entry is the `name` of the plugin, and the value is the definition of the Config Management Plugin(v2).
func (o InstanceOutput) ConfigManagementPlugins() InstanceConfigManagementPluginsMapOutput {
	return o.ApplyT(func(v *Instance) InstanceConfigManagementPluginsMapOutput { return v.ConfigManagementPlugins }).(InstanceConfigManagementPluginsMapOutput)
}

// Instance name
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// is a map of repo credential secrets, the key of map entry is the `name` of the secret, and the value is the aligned with
// options in `argocd-repositories.yaml.data` as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/).
func (o InstanceOutput) RepoCredentialSecrets() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapMapOutput { return v.RepoCredentialSecrets }).(pulumi.StringMapMapOutput)
}

// is a map of repository credential templates secrets, the key of map entry is the `name` of the secret, and the value is
// the aligned with options in `argocd-repo-creds.yaml.data` as described in the [ArgoCD Atomic
// Configuration](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#atomic-configuration). For a
// concrete example, refer to [this
// documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repo-creds.yaml/).
func (o InstanceOutput) RepoTemplateCredentialSecrets() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringMapMapOutput { return v.RepoTemplateCredentialSecrets }).(pulumi.StringMapMapOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
