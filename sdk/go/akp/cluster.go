// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akp

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-akp/sdk/go/akp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a cluster attached to an Argo CD instance.
//
// ## Example Usage
//
// ## Import
//
// Using `pulumi import`, import AKP cluster using `instance_id` and `name` separated by a forward slash (`/`). For example:
//
// ```sh
// $ pulumi import akp:index/cluster:Cluster example 6pzhawvy4echbd8x/test-cluster
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Annotations
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Argo CD instance ID
	InstanceId pulumi.StringOutput        `pulumi:"instanceId"`
	KubeConfig ClusterKubeConfigPtrOutput `pulumi:"kubeConfig"`
	// Labels
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Cluster name
	Name pulumi.StringOutput `pulumi:"name"`
	// Agent installation namespace
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster, default to `true`
	RemoveAgentResourcesOnDestroy pulumi.BoolOutput `pulumi:"removeAgentResourcesOnDestroy"`
	// Cluster spec
	Spec ClusterSpecOutput `pulumi:"spec"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("akp:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("akp:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Argo CD instance ID
	InstanceId *string            `pulumi:"instanceId"`
	KubeConfig *ClusterKubeConfig `pulumi:"kubeConfig"`
	// Labels
	Labels map[string]string `pulumi:"labels"`
	// Cluster name
	Name *string `pulumi:"name"`
	// Agent installation namespace
	Namespace *string `pulumi:"namespace"`
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster, default to `true`
	RemoveAgentResourcesOnDestroy *bool `pulumi:"removeAgentResourcesOnDestroy"`
	// Cluster spec
	Spec *ClusterSpec `pulumi:"spec"`
}

type ClusterState struct {
	// Annotations
	Annotations pulumi.StringMapInput
	// Argo CD instance ID
	InstanceId pulumi.StringPtrInput
	KubeConfig ClusterKubeConfigPtrInput
	// Labels
	Labels pulumi.StringMapInput
	// Cluster name
	Name pulumi.StringPtrInput
	// Agent installation namespace
	Namespace pulumi.StringPtrInput
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster, default to `true`
	RemoveAgentResourcesOnDestroy pulumi.BoolPtrInput
	// Cluster spec
	Spec ClusterSpecPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Argo CD instance ID
	InstanceId string             `pulumi:"instanceId"`
	KubeConfig *ClusterKubeConfig `pulumi:"kubeConfig"`
	// Labels
	Labels map[string]string `pulumi:"labels"`
	// Cluster name
	Name *string `pulumi:"name"`
	// Agent installation namespace
	Namespace string `pulumi:"namespace"`
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster, default to `true`
	RemoveAgentResourcesOnDestroy *bool `pulumi:"removeAgentResourcesOnDestroy"`
	// Cluster spec
	Spec ClusterSpec `pulumi:"spec"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Annotations
	Annotations pulumi.StringMapInput
	// Argo CD instance ID
	InstanceId pulumi.StringInput
	KubeConfig ClusterKubeConfigPtrInput
	// Labels
	Labels pulumi.StringMapInput
	// Cluster name
	Name pulumi.StringPtrInput
	// Agent installation namespace
	Namespace pulumi.StringInput
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster, default to `true`
	RemoveAgentResourcesOnDestroy pulumi.BoolPtrInput
	// Cluster spec
	Spec ClusterSpecInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Annotations
func (o ClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Argo CD instance ID
func (o ClusterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ClusterOutput) KubeConfig() ClusterKubeConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKubeConfigPtrOutput { return v.KubeConfig }).(ClusterKubeConfigPtrOutput)
}

// Labels
func (o ClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Cluster name
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Agent installation namespace
func (o ClusterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Remove agent Kubernetes resources from the managed cluster when destroying cluster, default to `true`
func (o ClusterOutput) RemoveAgentResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.RemoveAgentResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Cluster spec
func (o ClusterOutput) Spec() ClusterSpecOutput {
	return o.ApplyT(func(v *Cluster) ClusterSpecOutput { return v.Spec }).(ClusterSpecOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
