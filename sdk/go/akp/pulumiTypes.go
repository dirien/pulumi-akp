// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akp

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-akp/sdk/go/akp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterKubeConfig struct {
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey *string `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// Context name to load from the kube config file.
	ConfigContext         *string `pulumi:"configContext"`
	ConfigContextAuthInfo *string `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  *string `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath *string `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths []string `pulumi:"configPaths"`
	// The hostname (in form of URI) of Kubernetes master.
	Host *string `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate.
	Insecure *bool `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Password *string `pulumi:"password"`
	// URL to the proxy to be used for all API requests
	ProxyUrl *string `pulumi:"proxyUrl"`
	// Token to authenticate an service account
	Token *string `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Username *string `pulumi:"username"`
}

// ClusterKubeConfigInput is an input type that accepts ClusterKubeConfigArgs and ClusterKubeConfigOutput values.
// You can construct a concrete instance of `ClusterKubeConfigInput` via:
//
//	ClusterKubeConfigArgs{...}
type ClusterKubeConfigInput interface {
	pulumi.Input

	ToClusterKubeConfigOutput() ClusterKubeConfigOutput
	ToClusterKubeConfigOutputWithContext(context.Context) ClusterKubeConfigOutput
}

type ClusterKubeConfigArgs struct {
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate pulumi.StringPtrInput `pulumi:"clusterCaCertificate"`
	// Context name to load from the kube config file.
	ConfigContext         pulumi.StringPtrInput `pulumi:"configContext"`
	ConfigContextAuthInfo pulumi.StringPtrInput `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  pulumi.StringPtrInput `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath pulumi.StringPtrInput `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths pulumi.StringArrayInput `pulumi:"configPaths"`
	// The hostname (in form of URI) of Kubernetes master.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// URL to the proxy to be used for all API requests
	ProxyUrl pulumi.StringPtrInput `pulumi:"proxyUrl"`
	// Token to authenticate an service account
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ClusterKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKubeConfig)(nil)).Elem()
}

func (i ClusterKubeConfigArgs) ToClusterKubeConfigOutput() ClusterKubeConfigOutput {
	return i.ToClusterKubeConfigOutputWithContext(context.Background())
}

func (i ClusterKubeConfigArgs) ToClusterKubeConfigOutputWithContext(ctx context.Context) ClusterKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubeConfigOutput)
}

func (i ClusterKubeConfigArgs) ToClusterKubeConfigPtrOutput() ClusterKubeConfigPtrOutput {
	return i.ToClusterKubeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterKubeConfigArgs) ToClusterKubeConfigPtrOutputWithContext(ctx context.Context) ClusterKubeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubeConfigOutput).ToClusterKubeConfigPtrOutputWithContext(ctx)
}

// ClusterKubeConfigPtrInput is an input type that accepts ClusterKubeConfigArgs, ClusterKubeConfigPtr and ClusterKubeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterKubeConfigPtrInput` via:
//
//	        ClusterKubeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterKubeConfigPtrInput interface {
	pulumi.Input

	ToClusterKubeConfigPtrOutput() ClusterKubeConfigPtrOutput
	ToClusterKubeConfigPtrOutputWithContext(context.Context) ClusterKubeConfigPtrOutput
}

type clusterKubeConfigPtrType ClusterKubeConfigArgs

func ClusterKubeConfigPtr(v *ClusterKubeConfigArgs) ClusterKubeConfigPtrInput {
	return (*clusterKubeConfigPtrType)(v)
}

func (*clusterKubeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterKubeConfig)(nil)).Elem()
}

func (i *clusterKubeConfigPtrType) ToClusterKubeConfigPtrOutput() ClusterKubeConfigPtrOutput {
	return i.ToClusterKubeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterKubeConfigPtrType) ToClusterKubeConfigPtrOutputWithContext(ctx context.Context) ClusterKubeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKubeConfigPtrOutput)
}

type ClusterKubeConfigOutput struct{ *pulumi.OutputState }

func (ClusterKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKubeConfig)(nil)).Elem()
}

func (o ClusterKubeConfigOutput) ToClusterKubeConfigOutput() ClusterKubeConfigOutput {
	return o
}

func (o ClusterKubeConfigOutput) ToClusterKubeConfigOutputWithContext(ctx context.Context) ClusterKubeConfigOutput {
	return o
}

func (o ClusterKubeConfigOutput) ToClusterKubeConfigPtrOutput() ClusterKubeConfigPtrOutput {
	return o.ToClusterKubeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterKubeConfigOutput) ToClusterKubeConfigPtrOutputWithContext(ctx context.Context) ClusterKubeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterKubeConfig) *ClusterKubeConfig {
		return &v
	}).(ClusterKubeConfigPtrOutput)
}

// PEM-encoded client certificate for TLS authentication.
func (o ClusterKubeConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM-encoded client certificate key for TLS authentication.
func (o ClusterKubeConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// PEM-encoded root certificates bundle for TLS authentication.
func (o ClusterKubeConfigOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

// Context name to load from the kube config file.
func (o ClusterKubeConfigOutput) ConfigContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ConfigContext }).(pulumi.StringPtrOutput)
}

func (o ClusterKubeConfigOutput) ConfigContextAuthInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ConfigContextAuthInfo }).(pulumi.StringPtrOutput)
}

func (o ClusterKubeConfigOutput) ConfigContextCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ConfigContextCluster }).(pulumi.StringPtrOutput)
}

// Path to the kube config file.
func (o ClusterKubeConfigOutput) ConfigPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ConfigPath }).(pulumi.StringPtrOutput)
}

// A list of paths to kube config files.
func (o ClusterKubeConfigOutput) ConfigPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterKubeConfig) []string { return v.ConfigPaths }).(pulumi.StringArrayOutput)
}

// The hostname (in form of URI) of Kubernetes master.
func (o ClusterKubeConfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Whether server should be accessed without verifying the TLS certificate.
func (o ClusterKubeConfigOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o ClusterKubeConfigOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// URL to the proxy to be used for all API requests
func (o ClusterKubeConfigOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

// Token to authenticate an service account
func (o ClusterKubeConfigOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o ClusterKubeConfigOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKubeConfig) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ClusterKubeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterKubeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterKubeConfig)(nil)).Elem()
}

func (o ClusterKubeConfigPtrOutput) ToClusterKubeConfigPtrOutput() ClusterKubeConfigPtrOutput {
	return o
}

func (o ClusterKubeConfigPtrOutput) ToClusterKubeConfigPtrOutputWithContext(ctx context.Context) ClusterKubeConfigPtrOutput {
	return o
}

func (o ClusterKubeConfigPtrOutput) Elem() ClusterKubeConfigOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) ClusterKubeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterKubeConfig
		return ret
	}).(ClusterKubeConfigOutput)
}

// PEM-encoded client certificate for TLS authentication.
func (o ClusterKubeConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM-encoded client certificate key for TLS authentication.
func (o ClusterKubeConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// PEM-encoded root certificates bundle for TLS authentication.
func (o ClusterKubeConfigPtrOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Context name to load from the kube config file.
func (o ClusterKubeConfigPtrOutput) ConfigContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConfigContext
	}).(pulumi.StringPtrOutput)
}

func (o ClusterKubeConfigPtrOutput) ConfigContextAuthInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConfigContextAuthInfo
	}).(pulumi.StringPtrOutput)
}

func (o ClusterKubeConfigPtrOutput) ConfigContextCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConfigContextCluster
	}).(pulumi.StringPtrOutput)
}

// Path to the kube config file.
func (o ClusterKubeConfigPtrOutput) ConfigPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConfigPath
	}).(pulumi.StringPtrOutput)
}

// A list of paths to kube config files.
func (o ClusterKubeConfigPtrOutput) ConfigPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) []string {
		if v == nil {
			return nil
		}
		return v.ConfigPaths
	}).(pulumi.StringArrayOutput)
}

// The hostname (in form of URI) of Kubernetes master.
func (o ClusterKubeConfigPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Whether server should be accessed without verifying the TLS certificate.
func (o ClusterKubeConfigPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o ClusterKubeConfigPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// URL to the proxy to be used for all API requests
func (o ClusterKubeConfigPtrOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProxyUrl
	}).(pulumi.StringPtrOutput)
}

// Token to authenticate an service account
func (o ClusterKubeConfigPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o ClusterKubeConfigPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKubeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ClusterSpec struct {
	// Cluster data
	Data ClusterSpecData `pulumi:"data"`
	// Cluster description
	Description *string `pulumi:"description"`
	// If the agent is namespace scoped
	NamespaceScoped *bool `pulumi:"namespaceScoped"`
}

// ClusterSpecInput is an input type that accepts ClusterSpecArgs and ClusterSpecOutput values.
// You can construct a concrete instance of `ClusterSpecInput` via:
//
//	ClusterSpecArgs{...}
type ClusterSpecInput interface {
	pulumi.Input

	ToClusterSpecOutput() ClusterSpecOutput
	ToClusterSpecOutputWithContext(context.Context) ClusterSpecOutput
}

type ClusterSpecArgs struct {
	// Cluster data
	Data ClusterSpecDataInput `pulumi:"data"`
	// Cluster description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the agent is namespace scoped
	NamespaceScoped pulumi.BoolPtrInput `pulumi:"namespaceScoped"`
}

func (ClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpec)(nil)).Elem()
}

func (i ClusterSpecArgs) ToClusterSpecOutput() ClusterSpecOutput {
	return i.ToClusterSpecOutputWithContext(context.Background())
}

func (i ClusterSpecArgs) ToClusterSpecOutputWithContext(ctx context.Context) ClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecOutput)
}

func (i ClusterSpecArgs) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return i.ToClusterSpecPtrOutputWithContext(context.Background())
}

func (i ClusterSpecArgs) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecOutput).ToClusterSpecPtrOutputWithContext(ctx)
}

// ClusterSpecPtrInput is an input type that accepts ClusterSpecArgs, ClusterSpecPtr and ClusterSpecPtrOutput values.
// You can construct a concrete instance of `ClusterSpecPtrInput` via:
//
//	        ClusterSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecPtrInput interface {
	pulumi.Input

	ToClusterSpecPtrOutput() ClusterSpecPtrOutput
	ToClusterSpecPtrOutputWithContext(context.Context) ClusterSpecPtrOutput
}

type clusterSpecPtrType ClusterSpecArgs

func ClusterSpecPtr(v *ClusterSpecArgs) ClusterSpecPtrInput {
	return (*clusterSpecPtrType)(v)
}

func (*clusterSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpec)(nil)).Elem()
}

func (i *clusterSpecPtrType) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return i.ToClusterSpecPtrOutputWithContext(context.Background())
}

func (i *clusterSpecPtrType) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecPtrOutput)
}

type ClusterSpecOutput struct{ *pulumi.OutputState }

func (ClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpec)(nil)).Elem()
}

func (o ClusterSpecOutput) ToClusterSpecOutput() ClusterSpecOutput {
	return o
}

func (o ClusterSpecOutput) ToClusterSpecOutputWithContext(ctx context.Context) ClusterSpecOutput {
	return o
}

func (o ClusterSpecOutput) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return o.ToClusterSpecPtrOutputWithContext(context.Background())
}

func (o ClusterSpecOutput) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpec) *ClusterSpec {
		return &v
	}).(ClusterSpecPtrOutput)
}

// Cluster data
func (o ClusterSpecOutput) Data() ClusterSpecDataOutput {
	return o.ApplyT(func(v ClusterSpec) ClusterSpecData { return v.Data }).(ClusterSpecDataOutput)
}

// Cluster description
func (o ClusterSpecOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the agent is namespace scoped
func (o ClusterSpecOutput) NamespaceScoped() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpec) *bool { return v.NamespaceScoped }).(pulumi.BoolPtrOutput)
}

type ClusterSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpec)(nil)).Elem()
}

func (o ClusterSpecPtrOutput) ToClusterSpecPtrOutput() ClusterSpecPtrOutput {
	return o
}

func (o ClusterSpecPtrOutput) ToClusterSpecPtrOutputWithContext(ctx context.Context) ClusterSpecPtrOutput {
	return o
}

func (o ClusterSpecPtrOutput) Elem() ClusterSpecOutput {
	return o.ApplyT(func(v *ClusterSpec) ClusterSpec {
		if v != nil {
			return *v
		}
		var ret ClusterSpec
		return ret
	}).(ClusterSpecOutput)
}

// Cluster data
func (o ClusterSpecPtrOutput) Data() ClusterSpecDataPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *ClusterSpecData {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(ClusterSpecDataPtrOutput)
}

// Cluster description
func (o ClusterSpecPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// If the agent is namespace scoped
func (o ClusterSpecPtrOutput) NamespaceScoped() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpec) *bool {
		if v == nil {
			return nil
		}
		return v.NamespaceScoped
	}).(pulumi.BoolPtrOutput)
}

type ClusterSpecData struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      *bool `pulumi:"appReplication"`
	AutoUpgradeDisabled *bool `pulumi:"autoUpgradeDisabled"`
	// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
	DatadogAnnotationsEnabled *bool `pulumi:"datadogAnnotationsEnabled"`
	// Enable this if you are installing this cluster on EKS.
	EksAddonEnabled *bool `pulumi:"eksAddonEnabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization *string `pulumi:"kustomization"`
	// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
	ManagedClusterConfig *ClusterSpecDataManagedClusterConfig `pulumi:"managedClusterConfig"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling *bool `pulumi:"redisTunneling"`
	// Cluster Size. One of `small`, `medium` or `large`
	Size string `pulumi:"size"`
	// The version of the agent to install on your cluster
	TargetVersion *string `pulumi:"targetVersion"`
}

// ClusterSpecDataInput is an input type that accepts ClusterSpecDataArgs and ClusterSpecDataOutput values.
// You can construct a concrete instance of `ClusterSpecDataInput` via:
//
//	ClusterSpecDataArgs{...}
type ClusterSpecDataInput interface {
	pulumi.Input

	ToClusterSpecDataOutput() ClusterSpecDataOutput
	ToClusterSpecDataOutputWithContext(context.Context) ClusterSpecDataOutput
}

type ClusterSpecDataArgs struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      pulumi.BoolPtrInput `pulumi:"appReplication"`
	AutoUpgradeDisabled pulumi.BoolPtrInput `pulumi:"autoUpgradeDisabled"`
	// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
	DatadogAnnotationsEnabled pulumi.BoolPtrInput `pulumi:"datadogAnnotationsEnabled"`
	// Enable this if you are installing this cluster on EKS.
	EksAddonEnabled pulumi.BoolPtrInput `pulumi:"eksAddonEnabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization pulumi.StringPtrInput `pulumi:"kustomization"`
	// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
	ManagedClusterConfig ClusterSpecDataManagedClusterConfigPtrInput `pulumi:"managedClusterConfig"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling pulumi.BoolPtrInput `pulumi:"redisTunneling"`
	// Cluster Size. One of `small`, `medium` or `large`
	Size pulumi.StringInput `pulumi:"size"`
	// The version of the agent to install on your cluster
	TargetVersion pulumi.StringPtrInput `pulumi:"targetVersion"`
}

func (ClusterSpecDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecData)(nil)).Elem()
}

func (i ClusterSpecDataArgs) ToClusterSpecDataOutput() ClusterSpecDataOutput {
	return i.ToClusterSpecDataOutputWithContext(context.Background())
}

func (i ClusterSpecDataArgs) ToClusterSpecDataOutputWithContext(ctx context.Context) ClusterSpecDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecDataOutput)
}

func (i ClusterSpecDataArgs) ToClusterSpecDataPtrOutput() ClusterSpecDataPtrOutput {
	return i.ToClusterSpecDataPtrOutputWithContext(context.Background())
}

func (i ClusterSpecDataArgs) ToClusterSpecDataPtrOutputWithContext(ctx context.Context) ClusterSpecDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecDataOutput).ToClusterSpecDataPtrOutputWithContext(ctx)
}

// ClusterSpecDataPtrInput is an input type that accepts ClusterSpecDataArgs, ClusterSpecDataPtr and ClusterSpecDataPtrOutput values.
// You can construct a concrete instance of `ClusterSpecDataPtrInput` via:
//
//	        ClusterSpecDataArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecDataPtrInput interface {
	pulumi.Input

	ToClusterSpecDataPtrOutput() ClusterSpecDataPtrOutput
	ToClusterSpecDataPtrOutputWithContext(context.Context) ClusterSpecDataPtrOutput
}

type clusterSpecDataPtrType ClusterSpecDataArgs

func ClusterSpecDataPtr(v *ClusterSpecDataArgs) ClusterSpecDataPtrInput {
	return (*clusterSpecDataPtrType)(v)
}

func (*clusterSpecDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecData)(nil)).Elem()
}

func (i *clusterSpecDataPtrType) ToClusterSpecDataPtrOutput() ClusterSpecDataPtrOutput {
	return i.ToClusterSpecDataPtrOutputWithContext(context.Background())
}

func (i *clusterSpecDataPtrType) ToClusterSpecDataPtrOutputWithContext(ctx context.Context) ClusterSpecDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecDataPtrOutput)
}

type ClusterSpecDataOutput struct{ *pulumi.OutputState }

func (ClusterSpecDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecData)(nil)).Elem()
}

func (o ClusterSpecDataOutput) ToClusterSpecDataOutput() ClusterSpecDataOutput {
	return o
}

func (o ClusterSpecDataOutput) ToClusterSpecDataOutputWithContext(ctx context.Context) ClusterSpecDataOutput {
	return o
}

func (o ClusterSpecDataOutput) ToClusterSpecDataPtrOutput() ClusterSpecDataPtrOutput {
	return o.ToClusterSpecDataPtrOutputWithContext(context.Background())
}

func (o ClusterSpecDataOutput) ToClusterSpecDataPtrOutputWithContext(ctx context.Context) ClusterSpecDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecData) *ClusterSpecData {
		return &v
	}).(ClusterSpecDataPtrOutput)
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o ClusterSpecDataOutput) AppReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *bool { return v.AppReplication }).(pulumi.BoolPtrOutput)
}

func (o ClusterSpecDataOutput) AutoUpgradeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *bool { return v.AutoUpgradeDisabled }).(pulumi.BoolPtrOutput)
}

// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
func (o ClusterSpecDataOutput) DatadogAnnotationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *bool { return v.DatadogAnnotationsEnabled }).(pulumi.BoolPtrOutput)
}

// Enable this if you are installing this cluster on EKS.
func (o ClusterSpecDataOutput) EksAddonEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *bool { return v.EksAddonEnabled }).(pulumi.BoolPtrOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o ClusterSpecDataOutput) Kustomization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *string { return v.Kustomization }).(pulumi.StringPtrOutput)
}

// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
func (o ClusterSpecDataOutput) ManagedClusterConfig() ClusterSpecDataManagedClusterConfigPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *ClusterSpecDataManagedClusterConfig { return v.ManagedClusterConfig }).(ClusterSpecDataManagedClusterConfigPtrOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o ClusterSpecDataOutput) RedisTunneling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *bool { return v.RedisTunneling }).(pulumi.BoolPtrOutput)
}

// Cluster Size. One of `small`, `medium` or `large`
func (o ClusterSpecDataOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSpecData) string { return v.Size }).(pulumi.StringOutput)
}

// The version of the agent to install on your cluster
func (o ClusterSpecDataOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecData) *string { return v.TargetVersion }).(pulumi.StringPtrOutput)
}

type ClusterSpecDataPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecData)(nil)).Elem()
}

func (o ClusterSpecDataPtrOutput) ToClusterSpecDataPtrOutput() ClusterSpecDataPtrOutput {
	return o
}

func (o ClusterSpecDataPtrOutput) ToClusterSpecDataPtrOutputWithContext(ctx context.Context) ClusterSpecDataPtrOutput {
	return o
}

func (o ClusterSpecDataPtrOutput) Elem() ClusterSpecDataOutput {
	return o.ApplyT(func(v *ClusterSpecData) ClusterSpecData {
		if v != nil {
			return *v
		}
		var ret ClusterSpecData
		return ret
	}).(ClusterSpecDataOutput)
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o ClusterSpecDataPtrOutput) AppReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *bool {
		if v == nil {
			return nil
		}
		return v.AppReplication
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterSpecDataPtrOutput) AutoUpgradeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgradeDisabled
	}).(pulumi.BoolPtrOutput)
}

// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
func (o ClusterSpecDataPtrOutput) DatadogAnnotationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *bool {
		if v == nil {
			return nil
		}
		return v.DatadogAnnotationsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Enable this if you are installing this cluster on EKS.
func (o ClusterSpecDataPtrOutput) EksAddonEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *bool {
		if v == nil {
			return nil
		}
		return v.EksAddonEnabled
	}).(pulumi.BoolPtrOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o ClusterSpecDataPtrOutput) Kustomization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *string {
		if v == nil {
			return nil
		}
		return v.Kustomization
	}).(pulumi.StringPtrOutput)
}

// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
func (o ClusterSpecDataPtrOutput) ManagedClusterConfig() ClusterSpecDataManagedClusterConfigPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *ClusterSpecDataManagedClusterConfig {
		if v == nil {
			return nil
		}
		return v.ManagedClusterConfig
	}).(ClusterSpecDataManagedClusterConfigPtrOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o ClusterSpecDataPtrOutput) RedisTunneling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *bool {
		if v == nil {
			return nil
		}
		return v.RedisTunneling
	}).(pulumi.BoolPtrOutput)
}

// Cluster Size. One of `small`, `medium` or `large`
func (o ClusterSpecDataPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *string {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.StringPtrOutput)
}

// The version of the agent to install on your cluster
func (o ClusterSpecDataPtrOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecData) *string {
		if v == nil {
			return nil
		}
		return v.TargetVersion
	}).(pulumi.StringPtrOutput)
}

type ClusterSpecDataManagedClusterConfig struct {
	// The key in the secret for the managed cluster config
	SecretKey *string `pulumi:"secretKey"`
	// The name of the secret for the managed cluster config
	SecretName string `pulumi:"secretName"`
}

// ClusterSpecDataManagedClusterConfigInput is an input type that accepts ClusterSpecDataManagedClusterConfigArgs and ClusterSpecDataManagedClusterConfigOutput values.
// You can construct a concrete instance of `ClusterSpecDataManagedClusterConfigInput` via:
//
//	ClusterSpecDataManagedClusterConfigArgs{...}
type ClusterSpecDataManagedClusterConfigInput interface {
	pulumi.Input

	ToClusterSpecDataManagedClusterConfigOutput() ClusterSpecDataManagedClusterConfigOutput
	ToClusterSpecDataManagedClusterConfigOutputWithContext(context.Context) ClusterSpecDataManagedClusterConfigOutput
}

type ClusterSpecDataManagedClusterConfigArgs struct {
	// The key in the secret for the managed cluster config
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The name of the secret for the managed cluster config
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (ClusterSpecDataManagedClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (i ClusterSpecDataManagedClusterConfigArgs) ToClusterSpecDataManagedClusterConfigOutput() ClusterSpecDataManagedClusterConfigOutput {
	return i.ToClusterSpecDataManagedClusterConfigOutputWithContext(context.Background())
}

func (i ClusterSpecDataManagedClusterConfigArgs) ToClusterSpecDataManagedClusterConfigOutputWithContext(ctx context.Context) ClusterSpecDataManagedClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecDataManagedClusterConfigOutput)
}

func (i ClusterSpecDataManagedClusterConfigArgs) ToClusterSpecDataManagedClusterConfigPtrOutput() ClusterSpecDataManagedClusterConfigPtrOutput {
	return i.ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(context.Background())
}

func (i ClusterSpecDataManagedClusterConfigArgs) ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(ctx context.Context) ClusterSpecDataManagedClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecDataManagedClusterConfigOutput).ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(ctx)
}

// ClusterSpecDataManagedClusterConfigPtrInput is an input type that accepts ClusterSpecDataManagedClusterConfigArgs, ClusterSpecDataManagedClusterConfigPtr and ClusterSpecDataManagedClusterConfigPtrOutput values.
// You can construct a concrete instance of `ClusterSpecDataManagedClusterConfigPtrInput` via:
//
//	        ClusterSpecDataManagedClusterConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterSpecDataManagedClusterConfigPtrInput interface {
	pulumi.Input

	ToClusterSpecDataManagedClusterConfigPtrOutput() ClusterSpecDataManagedClusterConfigPtrOutput
	ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(context.Context) ClusterSpecDataManagedClusterConfigPtrOutput
}

type clusterSpecDataManagedClusterConfigPtrType ClusterSpecDataManagedClusterConfigArgs

func ClusterSpecDataManagedClusterConfigPtr(v *ClusterSpecDataManagedClusterConfigArgs) ClusterSpecDataManagedClusterConfigPtrInput {
	return (*clusterSpecDataManagedClusterConfigPtrType)(v)
}

func (*clusterSpecDataManagedClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (i *clusterSpecDataManagedClusterConfigPtrType) ToClusterSpecDataManagedClusterConfigPtrOutput() ClusterSpecDataManagedClusterConfigPtrOutput {
	return i.ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(context.Background())
}

func (i *clusterSpecDataManagedClusterConfigPtrType) ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(ctx context.Context) ClusterSpecDataManagedClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSpecDataManagedClusterConfigPtrOutput)
}

type ClusterSpecDataManagedClusterConfigOutput struct{ *pulumi.OutputState }

func (ClusterSpecDataManagedClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (o ClusterSpecDataManagedClusterConfigOutput) ToClusterSpecDataManagedClusterConfigOutput() ClusterSpecDataManagedClusterConfigOutput {
	return o
}

func (o ClusterSpecDataManagedClusterConfigOutput) ToClusterSpecDataManagedClusterConfigOutputWithContext(ctx context.Context) ClusterSpecDataManagedClusterConfigOutput {
	return o
}

func (o ClusterSpecDataManagedClusterConfigOutput) ToClusterSpecDataManagedClusterConfigPtrOutput() ClusterSpecDataManagedClusterConfigPtrOutput {
	return o.ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(context.Background())
}

func (o ClusterSpecDataManagedClusterConfigOutput) ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(ctx context.Context) ClusterSpecDataManagedClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSpecDataManagedClusterConfig) *ClusterSpecDataManagedClusterConfig {
		return &v
	}).(ClusterSpecDataManagedClusterConfigPtrOutput)
}

// The key in the secret for the managed cluster config
func (o ClusterSpecDataManagedClusterConfigOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSpecDataManagedClusterConfig) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The name of the secret for the managed cluster config
func (o ClusterSpecDataManagedClusterConfigOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterSpecDataManagedClusterConfig) string { return v.SecretName }).(pulumi.StringOutput)
}

type ClusterSpecDataManagedClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterSpecDataManagedClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (o ClusterSpecDataManagedClusterConfigPtrOutput) ToClusterSpecDataManagedClusterConfigPtrOutput() ClusterSpecDataManagedClusterConfigPtrOutput {
	return o
}

func (o ClusterSpecDataManagedClusterConfigPtrOutput) ToClusterSpecDataManagedClusterConfigPtrOutputWithContext(ctx context.Context) ClusterSpecDataManagedClusterConfigPtrOutput {
	return o
}

func (o ClusterSpecDataManagedClusterConfigPtrOutput) Elem() ClusterSpecDataManagedClusterConfigOutput {
	return o.ApplyT(func(v *ClusterSpecDataManagedClusterConfig) ClusterSpecDataManagedClusterConfig {
		if v != nil {
			return *v
		}
		var ret ClusterSpecDataManagedClusterConfig
		return ret
	}).(ClusterSpecDataManagedClusterConfigOutput)
}

// The key in the secret for the managed cluster config
func (o ClusterSpecDataManagedClusterConfigPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecDataManagedClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// The name of the secret for the managed cluster config
func (o ClusterSpecDataManagedClusterConfigPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSpecDataManagedClusterConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

type InstanceArgocd struct {
	// Argo CD instance spec
	Spec InstanceArgocdSpec `pulumi:"spec"`
}

// InstanceArgocdInput is an input type that accepts InstanceArgocdArgs and InstanceArgocdOutput values.
// You can construct a concrete instance of `InstanceArgocdInput` via:
//
//	InstanceArgocdArgs{...}
type InstanceArgocdInput interface {
	pulumi.Input

	ToInstanceArgocdOutput() InstanceArgocdOutput
	ToInstanceArgocdOutputWithContext(context.Context) InstanceArgocdOutput
}

type InstanceArgocdArgs struct {
	// Argo CD instance spec
	Spec InstanceArgocdSpecInput `pulumi:"spec"`
}

func (InstanceArgocdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocd)(nil)).Elem()
}

func (i InstanceArgocdArgs) ToInstanceArgocdOutput() InstanceArgocdOutput {
	return i.ToInstanceArgocdOutputWithContext(context.Background())
}

func (i InstanceArgocdArgs) ToInstanceArgocdOutputWithContext(ctx context.Context) InstanceArgocdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdOutput)
}

func (i InstanceArgocdArgs) ToInstanceArgocdPtrOutput() InstanceArgocdPtrOutput {
	return i.ToInstanceArgocdPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdArgs) ToInstanceArgocdPtrOutputWithContext(ctx context.Context) InstanceArgocdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdOutput).ToInstanceArgocdPtrOutputWithContext(ctx)
}

// InstanceArgocdPtrInput is an input type that accepts InstanceArgocdArgs, InstanceArgocdPtr and InstanceArgocdPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdPtrInput` via:
//
//	        InstanceArgocdArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdPtrInput interface {
	pulumi.Input

	ToInstanceArgocdPtrOutput() InstanceArgocdPtrOutput
	ToInstanceArgocdPtrOutputWithContext(context.Context) InstanceArgocdPtrOutput
}

type instanceArgocdPtrType InstanceArgocdArgs

func InstanceArgocdPtr(v *InstanceArgocdArgs) InstanceArgocdPtrInput {
	return (*instanceArgocdPtrType)(v)
}

func (*instanceArgocdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocd)(nil)).Elem()
}

func (i *instanceArgocdPtrType) ToInstanceArgocdPtrOutput() InstanceArgocdPtrOutput {
	return i.ToInstanceArgocdPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdPtrType) ToInstanceArgocdPtrOutputWithContext(ctx context.Context) InstanceArgocdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdPtrOutput)
}

type InstanceArgocdOutput struct{ *pulumi.OutputState }

func (InstanceArgocdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocd)(nil)).Elem()
}

func (o InstanceArgocdOutput) ToInstanceArgocdOutput() InstanceArgocdOutput {
	return o
}

func (o InstanceArgocdOutput) ToInstanceArgocdOutputWithContext(ctx context.Context) InstanceArgocdOutput {
	return o
}

func (o InstanceArgocdOutput) ToInstanceArgocdPtrOutput() InstanceArgocdPtrOutput {
	return o.ToInstanceArgocdPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdOutput) ToInstanceArgocdPtrOutputWithContext(ctx context.Context) InstanceArgocdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocd) *InstanceArgocd {
		return &v
	}).(InstanceArgocdPtrOutput)
}

// Argo CD instance spec
func (o InstanceArgocdOutput) Spec() InstanceArgocdSpecOutput {
	return o.ApplyT(func(v InstanceArgocd) InstanceArgocdSpec { return v.Spec }).(InstanceArgocdSpecOutput)
}

type InstanceArgocdPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocd)(nil)).Elem()
}

func (o InstanceArgocdPtrOutput) ToInstanceArgocdPtrOutput() InstanceArgocdPtrOutput {
	return o
}

func (o InstanceArgocdPtrOutput) ToInstanceArgocdPtrOutputWithContext(ctx context.Context) InstanceArgocdPtrOutput {
	return o
}

func (o InstanceArgocdPtrOutput) Elem() InstanceArgocdOutput {
	return o.ApplyT(func(v *InstanceArgocd) InstanceArgocd {
		if v != nil {
			return *v
		}
		var ret InstanceArgocd
		return ret
	}).(InstanceArgocdOutput)
}

// Argo CD instance spec
func (o InstanceArgocdPtrOutput) Spec() InstanceArgocdSpecPtrOutput {
	return o.ApplyT(func(v *InstanceArgocd) *InstanceArgocdSpec {
		if v == nil {
			return nil
		}
		return &v.Spec
	}).(InstanceArgocdSpecPtrOutput)
}

type InstanceArgocdSpec struct {
	// Instance description
	Description *string `pulumi:"description"`
	// Argo CD instance spec
	InstanceSpec InstanceArgocdSpecInstanceSpec `pulumi:"instanceSpec"`
	// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
	Version string `pulumi:"version"`
}

// InstanceArgocdSpecInput is an input type that accepts InstanceArgocdSpecArgs and InstanceArgocdSpecOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInput` via:
//
//	InstanceArgocdSpecArgs{...}
type InstanceArgocdSpecInput interface {
	pulumi.Input

	ToInstanceArgocdSpecOutput() InstanceArgocdSpecOutput
	ToInstanceArgocdSpecOutputWithContext(context.Context) InstanceArgocdSpecOutput
}

type InstanceArgocdSpecArgs struct {
	// Instance description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Argo CD instance spec
	InstanceSpec InstanceArgocdSpecInstanceSpecInput `pulumi:"instanceSpec"`
	// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
	Version pulumi.StringInput `pulumi:"version"`
}

func (InstanceArgocdSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpec)(nil)).Elem()
}

func (i InstanceArgocdSpecArgs) ToInstanceArgocdSpecOutput() InstanceArgocdSpecOutput {
	return i.ToInstanceArgocdSpecOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecArgs) ToInstanceArgocdSpecOutputWithContext(ctx context.Context) InstanceArgocdSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecOutput)
}

func (i InstanceArgocdSpecArgs) ToInstanceArgocdSpecPtrOutput() InstanceArgocdSpecPtrOutput {
	return i.ToInstanceArgocdSpecPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecArgs) ToInstanceArgocdSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecOutput).ToInstanceArgocdSpecPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecPtrInput is an input type that accepts InstanceArgocdSpecArgs, InstanceArgocdSpecPtr and InstanceArgocdSpecPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecPtrInput` via:
//
//	        InstanceArgocdSpecArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecPtrOutput() InstanceArgocdSpecPtrOutput
	ToInstanceArgocdSpecPtrOutputWithContext(context.Context) InstanceArgocdSpecPtrOutput
}

type instanceArgocdSpecPtrType InstanceArgocdSpecArgs

func InstanceArgocdSpecPtr(v *InstanceArgocdSpecArgs) InstanceArgocdSpecPtrInput {
	return (*instanceArgocdSpecPtrType)(v)
}

func (*instanceArgocdSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpec)(nil)).Elem()
}

func (i *instanceArgocdSpecPtrType) ToInstanceArgocdSpecPtrOutput() InstanceArgocdSpecPtrOutput {
	return i.ToInstanceArgocdSpecPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecPtrType) ToInstanceArgocdSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecPtrOutput)
}

type InstanceArgocdSpecOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpec)(nil)).Elem()
}

func (o InstanceArgocdSpecOutput) ToInstanceArgocdSpecOutput() InstanceArgocdSpecOutput {
	return o
}

func (o InstanceArgocdSpecOutput) ToInstanceArgocdSpecOutputWithContext(ctx context.Context) InstanceArgocdSpecOutput {
	return o
}

func (o InstanceArgocdSpecOutput) ToInstanceArgocdSpecPtrOutput() InstanceArgocdSpecPtrOutput {
	return o.ToInstanceArgocdSpecPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecOutput) ToInstanceArgocdSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpec) *InstanceArgocdSpec {
		return &v
	}).(InstanceArgocdSpecPtrOutput)
}

// Instance description
func (o InstanceArgocdSpecOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpec) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Argo CD instance spec
func (o InstanceArgocdSpecOutput) InstanceSpec() InstanceArgocdSpecInstanceSpecOutput {
	return o.ApplyT(func(v InstanceArgocdSpec) InstanceArgocdSpecInstanceSpec { return v.InstanceSpec }).(InstanceArgocdSpecInstanceSpecOutput)
}

// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
func (o InstanceArgocdSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpec) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceArgocdSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpec)(nil)).Elem()
}

func (o InstanceArgocdSpecPtrOutput) ToInstanceArgocdSpecPtrOutput() InstanceArgocdSpecPtrOutput {
	return o
}

func (o InstanceArgocdSpecPtrOutput) ToInstanceArgocdSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecPtrOutput {
	return o
}

func (o InstanceArgocdSpecPtrOutput) Elem() InstanceArgocdSpecOutput {
	return o.ApplyT(func(v *InstanceArgocdSpec) InstanceArgocdSpec {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpec
		return ret
	}).(InstanceArgocdSpecOutput)
}

// Instance description
func (o InstanceArgocdSpecPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpec) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Argo CD instance spec
func (o InstanceArgocdSpecPtrOutput) InstanceSpec() InstanceArgocdSpecInstanceSpecPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpec) *InstanceArgocdSpecInstanceSpec {
		if v == nil {
			return nil
		}
		return &v.InstanceSpec
	}).(InstanceArgocdSpecInstanceSpecPtrOutput)
}

// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
func (o InstanceArgocdSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type InstanceArgocdSpecInstanceSpec struct {
	// The ability to configure agent permissions rules.
	AgentPermissionsRules []InstanceArgocdSpecInstanceSpecAgentPermissionsRule `pulumi:"agentPermissionsRules"`
	// Select cluster in which you want to Install Application Set controller
	AppSetDelegate *InstanceArgocdSpecInstanceSpecAppSetDelegate `pulumi:"appSetDelegate"`
	// Configures Application Set policy settings.
	AppsetPolicy *InstanceArgocdSpecInstanceSpecAppsetPolicy `pulumi:"appsetPolicy"`
	// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
	AssistantExtensionEnabled *bool `pulumi:"assistantExtensionEnabled"`
	// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
	AuditExtensionEnabled *bool `pulumi:"auditExtensionEnabled"`
	// Enable ip allow list for cluster agents
	BackendIpAllowListEnabled *bool `pulumi:"backendIpAllowListEnabled"`
	// Default values for cluster agents
	ClusterCustomizationDefaults *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults `pulumi:"clusterCustomizationDefaults"`
	// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
	CrossplaneExtension *InstanceArgocdSpecInstanceSpecCrossplaneExtension `pulumi:"crossplaneExtension"`
	// Enable Declarative Management
	DeclarativeManagementEnabled *bool `pulumi:"declarativeManagementEnabled"`
	// Extensions
	Extensions []InstanceArgocdSpecInstanceSpecExtension `pulumi:"extensions"`
	// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
	Fqdn *string `pulumi:"fqdn"`
	// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
	HostAliases []InstanceArgocdSpecInstanceSpecHostAlias `pulumi:"hostAliases"`
	// Select cluster in which you want to Install Image Updater
	ImageUpdaterDelegate *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate `pulumi:"imageUpdaterDelegate"`
	// Enable Image Updater
	ImageUpdaterEnabled *bool `pulumi:"imageUpdaterEnabled"`
	// IP allow list
	IpAllowLists []InstanceArgocdSpecInstanceSpecIpAllowList `pulumi:"ipAllowLists"`
	// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
	RepoServerDelegate *InstanceArgocdSpecInstanceSpecRepoServerDelegate `pulumi:"repoServerDelegate"`
	// Instance subdomain. By default equals to instance id
	Subdomain *string `pulumi:"subdomain"`
	// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
	SyncHistoryExtensionEnabled *bool `pulumi:"syncHistoryExtensionEnabled"`
}

// InstanceArgocdSpecInstanceSpecInput is an input type that accepts InstanceArgocdSpecInstanceSpecArgs and InstanceArgocdSpecInstanceSpecOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecInput` via:
//
//	InstanceArgocdSpecInstanceSpecArgs{...}
type InstanceArgocdSpecInstanceSpecInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecOutput() InstanceArgocdSpecInstanceSpecOutput
	ToInstanceArgocdSpecInstanceSpecOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecOutput
}

type InstanceArgocdSpecInstanceSpecArgs struct {
	// The ability to configure agent permissions rules.
	AgentPermissionsRules InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput `pulumi:"agentPermissionsRules"`
	// Select cluster in which you want to Install Application Set controller
	AppSetDelegate InstanceArgocdSpecInstanceSpecAppSetDelegatePtrInput `pulumi:"appSetDelegate"`
	// Configures Application Set policy settings.
	AppsetPolicy InstanceArgocdSpecInstanceSpecAppsetPolicyPtrInput `pulumi:"appsetPolicy"`
	// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
	AssistantExtensionEnabled pulumi.BoolPtrInput `pulumi:"assistantExtensionEnabled"`
	// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
	AuditExtensionEnabled pulumi.BoolPtrInput `pulumi:"auditExtensionEnabled"`
	// Enable ip allow list for cluster agents
	BackendIpAllowListEnabled pulumi.BoolPtrInput `pulumi:"backendIpAllowListEnabled"`
	// Default values for cluster agents
	ClusterCustomizationDefaults InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrInput `pulumi:"clusterCustomizationDefaults"`
	// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
	CrossplaneExtension InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrInput `pulumi:"crossplaneExtension"`
	// Enable Declarative Management
	DeclarativeManagementEnabled pulumi.BoolPtrInput `pulumi:"declarativeManagementEnabled"`
	// Extensions
	Extensions InstanceArgocdSpecInstanceSpecExtensionArrayInput `pulumi:"extensions"`
	// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
	Fqdn pulumi.StringPtrInput `pulumi:"fqdn"`
	// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
	HostAliases InstanceArgocdSpecInstanceSpecHostAliasArrayInput `pulumi:"hostAliases"`
	// Select cluster in which you want to Install Image Updater
	ImageUpdaterDelegate InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrInput `pulumi:"imageUpdaterDelegate"`
	// Enable Image Updater
	ImageUpdaterEnabled pulumi.BoolPtrInput `pulumi:"imageUpdaterEnabled"`
	// IP allow list
	IpAllowLists InstanceArgocdSpecInstanceSpecIpAllowListArrayInput `pulumi:"ipAllowLists"`
	// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
	RepoServerDelegate InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrInput `pulumi:"repoServerDelegate"`
	// Instance subdomain. By default equals to instance id
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
	SyncHistoryExtensionEnabled pulumi.BoolPtrInput `pulumi:"syncHistoryExtensionEnabled"`
}

func (InstanceArgocdSpecInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpec)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecArgs) ToInstanceArgocdSpecInstanceSpecOutput() InstanceArgocdSpecInstanceSpecOutput {
	return i.ToInstanceArgocdSpecInstanceSpecOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecArgs) ToInstanceArgocdSpecInstanceSpecOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecOutput)
}

func (i InstanceArgocdSpecInstanceSpecArgs) ToInstanceArgocdSpecInstanceSpecPtrOutput() InstanceArgocdSpecInstanceSpecPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecArgs) ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecOutput).ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecArgs, InstanceArgocdSpecInstanceSpecPtr and InstanceArgocdSpecInstanceSpecPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecPtrOutput() InstanceArgocdSpecInstanceSpecPtrOutput
	ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecPtrOutput
}

type instanceArgocdSpecInstanceSpecPtrType InstanceArgocdSpecInstanceSpecArgs

func InstanceArgocdSpecInstanceSpecPtr(v *InstanceArgocdSpecInstanceSpecArgs) InstanceArgocdSpecInstanceSpecPtrInput {
	return (*instanceArgocdSpecInstanceSpecPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpec)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecPtrType) ToInstanceArgocdSpecInstanceSpecPtrOutput() InstanceArgocdSpecInstanceSpecPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecPtrType) ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecPtrOutput)
}

type InstanceArgocdSpecInstanceSpecOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpec)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecOutput) ToInstanceArgocdSpecInstanceSpecOutput() InstanceArgocdSpecInstanceSpecOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecOutput) ToInstanceArgocdSpecInstanceSpecOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecOutput) ToInstanceArgocdSpecInstanceSpecPtrOutput() InstanceArgocdSpecInstanceSpecPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecOutput) ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpec {
		return &v
	}).(InstanceArgocdSpecInstanceSpecPtrOutput)
}

// The ability to configure agent permissions rules.
func (o InstanceArgocdSpecInstanceSpecOutput) AgentPermissionsRules() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecAgentPermissionsRule {
		return v.AgentPermissionsRules
	}).(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput)
}

// Select cluster in which you want to Install Application Set controller
func (o InstanceArgocdSpecInstanceSpecOutput) AppSetDelegate() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecAppSetDelegate {
		return v.AppSetDelegate
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput)
}

// Configures Application Set policy settings.
func (o InstanceArgocdSpecInstanceSpecOutput) AppsetPolicy() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecAppsetPolicy {
		return v.AppsetPolicy
	}).(InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput)
}

// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
func (o InstanceArgocdSpecInstanceSpecOutput) AssistantExtensionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *bool { return v.AssistantExtensionEnabled }).(pulumi.BoolPtrOutput)
}

// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
func (o InstanceArgocdSpecInstanceSpecOutput) AuditExtensionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *bool { return v.AuditExtensionEnabled }).(pulumi.BoolPtrOutput)
}

// Enable ip allow list for cluster agents
func (o InstanceArgocdSpecInstanceSpecOutput) BackendIpAllowListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *bool { return v.BackendIpAllowListEnabled }).(pulumi.BoolPtrOutput)
}

// Default values for cluster agents
func (o InstanceArgocdSpecInstanceSpecOutput) ClusterCustomizationDefaults() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults {
		return v.ClusterCustomizationDefaults
	}).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput)
}

// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
func (o InstanceArgocdSpecInstanceSpecOutput) CrossplaneExtension() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecCrossplaneExtension {
		return v.CrossplaneExtension
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput)
}

// Enable Declarative Management
func (o InstanceArgocdSpecInstanceSpecOutput) DeclarativeManagementEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *bool { return v.DeclarativeManagementEnabled }).(pulumi.BoolPtrOutput)
}

// Extensions
func (o InstanceArgocdSpecInstanceSpecOutput) Extensions() InstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecExtension { return v.Extensions }).(InstanceArgocdSpecInstanceSpecExtensionArrayOutput)
}

// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
func (o InstanceArgocdSpecInstanceSpecOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
func (o InstanceArgocdSpecInstanceSpecOutput) HostAliases() InstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecHostAlias { return v.HostAliases }).(InstanceArgocdSpecInstanceSpecHostAliasArrayOutput)
}

// Select cluster in which you want to Install Image Updater
func (o InstanceArgocdSpecInstanceSpecOutput) ImageUpdaterDelegate() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate {
		return v.ImageUpdaterDelegate
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput)
}

// Enable Image Updater
func (o InstanceArgocdSpecInstanceSpecOutput) ImageUpdaterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *bool { return v.ImageUpdaterEnabled }).(pulumi.BoolPtrOutput)
}

// IP allow list
func (o InstanceArgocdSpecInstanceSpecOutput) IpAllowLists() InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecIpAllowList {
		return v.IpAllowLists
	}).(InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput)
}

// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
func (o InstanceArgocdSpecInstanceSpecOutput) RepoServerDelegate() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecRepoServerDelegate {
		return v.RepoServerDelegate
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput)
}

// Instance subdomain. By default equals to instance id
func (o InstanceArgocdSpecInstanceSpecOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
func (o InstanceArgocdSpecInstanceSpecOutput) SyncHistoryExtensionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpec) *bool { return v.SyncHistoryExtensionEnabled }).(pulumi.BoolPtrOutput)
}

type InstanceArgocdSpecInstanceSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpec)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecPtrOutput) ToInstanceArgocdSpecInstanceSpecPtrOutput() InstanceArgocdSpecInstanceSpecPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecPtrOutput) ToInstanceArgocdSpecInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecPtrOutput) Elem() InstanceArgocdSpecInstanceSpecOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) InstanceArgocdSpecInstanceSpec {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpec
		return ret
	}).(InstanceArgocdSpecInstanceSpecOutput)
}

// The ability to configure agent permissions rules.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) AgentPermissionsRules() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecAgentPermissionsRule {
		if v == nil {
			return nil
		}
		return v.AgentPermissionsRules
	}).(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput)
}

// Select cluster in which you want to Install Application Set controller
func (o InstanceArgocdSpecInstanceSpecPtrOutput) AppSetDelegate() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecAppSetDelegate {
		if v == nil {
			return nil
		}
		return v.AppSetDelegate
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput)
}

// Configures Application Set policy settings.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) AppsetPolicy() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecAppsetPolicy {
		if v == nil {
			return nil
		}
		return v.AppsetPolicy
	}).(InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput)
}

// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) AssistantExtensionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AssistantExtensionEnabled
	}).(pulumi.BoolPtrOutput)
}

// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) AuditExtensionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AuditExtensionEnabled
	}).(pulumi.BoolPtrOutput)
}

// Enable ip allow list for cluster agents
func (o InstanceArgocdSpecInstanceSpecPtrOutput) BackendIpAllowListEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.BackendIpAllowListEnabled
	}).(pulumi.BoolPtrOutput)
}

// Default values for cluster agents
func (o InstanceArgocdSpecInstanceSpecPtrOutput) ClusterCustomizationDefaults() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults {
		if v == nil {
			return nil
		}
		return v.ClusterCustomizationDefaults
	}).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput)
}

// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
func (o InstanceArgocdSpecInstanceSpecPtrOutput) CrossplaneExtension() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecCrossplaneExtension {
		if v == nil {
			return nil
		}
		return v.CrossplaneExtension
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput)
}

// Enable Declarative Management
func (o InstanceArgocdSpecInstanceSpecPtrOutput) DeclarativeManagementEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DeclarativeManagementEnabled
	}).(pulumi.BoolPtrOutput)
}

// Extensions
func (o InstanceArgocdSpecInstanceSpecPtrOutput) Extensions() InstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecExtension {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(InstanceArgocdSpecInstanceSpecExtensionArrayOutput)
}

// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) HostAliases() InstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecHostAlias {
		if v == nil {
			return nil
		}
		return v.HostAliases
	}).(InstanceArgocdSpecInstanceSpecHostAliasArrayOutput)
}

// Select cluster in which you want to Install Image Updater
func (o InstanceArgocdSpecInstanceSpecPtrOutput) ImageUpdaterDelegate() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate {
		if v == nil {
			return nil
		}
		return v.ImageUpdaterDelegate
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput)
}

// Enable Image Updater
func (o InstanceArgocdSpecInstanceSpecPtrOutput) ImageUpdaterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ImageUpdaterEnabled
	}).(pulumi.BoolPtrOutput)
}

// IP allow list
func (o InstanceArgocdSpecInstanceSpecPtrOutput) IpAllowLists() InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) []InstanceArgocdSpecInstanceSpecIpAllowList {
		if v == nil {
			return nil
		}
		return v.IpAllowLists
	}).(InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput)
}

// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) RepoServerDelegate() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *InstanceArgocdSpecInstanceSpecRepoServerDelegate {
		if v == nil {
			return nil
		}
		return v.RepoServerDelegate
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput)
}

// Instance subdomain. By default equals to instance id
func (o InstanceArgocdSpecInstanceSpecPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
func (o InstanceArgocdSpecInstanceSpecPtrOutput) SyncHistoryExtensionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.SyncHistoryExtensionEnabled
	}).(pulumi.BoolPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAgentPermissionsRule struct {
	// API groups of the rule.
	ApiGroups []string `pulumi:"apiGroups"`
	// Resources of the rule.
	Resources []string `pulumi:"resources"`
	// Verbs of the rule.
	Verbs []string `pulumi:"verbs"`
}

// InstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput is an input type that accepts InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs and InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput` via:
//
//	InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs{...}
type InstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput
	ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput
}

type InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs struct {
	// API groups of the rule.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// Resources of the rule.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verbs of the rule.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput)
}

// InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput is an input type that accepts InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray and InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput` via:
//
//	InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray{ InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs{...} }
type InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput
	ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput
}

type InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray []InstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput

func (InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput)
}

type InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return o
}

// API groups of the rule.
func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAgentPermissionsRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// Resources of the rule.
func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAgentPermissionsRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verbs of the rule.
func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAgentPermissionsRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput() InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) ToInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) Index(i pulumi.IntInput) InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceArgocdSpecInstanceSpecAgentPermissionsRule {
		return vs[0].([]InstanceArgocdSpecInstanceSpecAgentPermissionsRule)[vs[1].(int)]
	}).(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput)
}

type InstanceArgocdSpecInstanceSpecAppSetDelegate struct {
	// Use managed cluster
	ManagedCluster *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster `pulumi:"managedCluster"`
}

// InstanceArgocdSpecInstanceSpecAppSetDelegateInput is an input type that accepts InstanceArgocdSpecInstanceSpecAppSetDelegateArgs and InstanceArgocdSpecInstanceSpecAppSetDelegateOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAppSetDelegateInput` via:
//
//	InstanceArgocdSpecInstanceSpecAppSetDelegateArgs{...}
type InstanceArgocdSpecInstanceSpecAppSetDelegateInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateOutput
	ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateOutput
}

type InstanceArgocdSpecInstanceSpecAppSetDelegateArgs struct {
	// Use managed cluster
	ManagedCluster InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrInput `pulumi:"managedCluster"`
}

func (InstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegate)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppSetDelegateOutput)
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppSetDelegateOutput).ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecAppSetDelegatePtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecAppSetDelegateArgs, InstanceArgocdSpecInstanceSpecAppSetDelegatePtr and InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAppSetDelegatePtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecAppSetDelegateArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecAppSetDelegatePtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput
	ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput
}

type instanceArgocdSpecInstanceSpecAppSetDelegatePtrType InstanceArgocdSpecInstanceSpecAppSetDelegateArgs

func InstanceArgocdSpecInstanceSpecAppSetDelegatePtr(v *InstanceArgocdSpecInstanceSpecAppSetDelegateArgs) InstanceArgocdSpecInstanceSpecAppSetDelegatePtrInput {
	return (*instanceArgocdSpecInstanceSpecAppSetDelegatePtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecAppSetDelegatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecAppSetDelegate)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecAppSetDelegatePtrType) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecAppSetDelegatePtrType) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppSetDelegateOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegate)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecAppSetDelegate) *InstanceArgocdSpecInstanceSpecAppSetDelegate {
		return &v
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput)
}

// Use managed cluster
func (o InstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ManagedCluster() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAppSetDelegate) *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster {
		return v.ManagedCluster
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecAppSetDelegate)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput) Elem() InstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppSetDelegate) InstanceArgocdSpecInstanceSpecAppSetDelegate {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecAppSetDelegate
		return ret
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegateOutput)
}

// Use managed cluster
func (o InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput) ManagedCluster() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppSetDelegate) *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster {
		if v == nil {
			return nil
		}
		return v.ManagedCluster
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster struct {
	// Cluster name
	ClusterName string `pulumi:"clusterName"`
}

// InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput is an input type that accepts InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs and InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput` via:
//
//	InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs{...}
type InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput
	ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput
}

type InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs struct {
	// Cluster name
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput)
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput).ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs, InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtr and InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput
	ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput
}

type instanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrType InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs

func InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtr(v *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrInput {
	return (*instanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrType) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrType) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster) *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster {
		return &v
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput)
}

// Cluster name
func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

type InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput) ToInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput) Elem() InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster) InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster
		return ret
	}).(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput)
}

// Cluster name
func (o InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppsetPolicy struct {
	// Allows per `ApplicationSet` sync policy.
	OverridePolicy *bool `pulumi:"overridePolicy"`
	// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
	// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
	//   - Policy `sync`(default): Update and delete are allowed.
	//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
	//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
	//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
	Policy *string `pulumi:"policy"`
}

// InstanceArgocdSpecInstanceSpecAppsetPolicyInput is an input type that accepts InstanceArgocdSpecInstanceSpecAppsetPolicyArgs and InstanceArgocdSpecInstanceSpecAppsetPolicyOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAppsetPolicyInput` via:
//
//	InstanceArgocdSpecInstanceSpecAppsetPolicyArgs{...}
type InstanceArgocdSpecInstanceSpecAppsetPolicyInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyOutput
	ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyOutput
}

type InstanceArgocdSpecInstanceSpecAppsetPolicyArgs struct {
	// Allows per `ApplicationSet` sync policy.
	OverridePolicy pulumi.BoolPtrInput `pulumi:"overridePolicy"`
	// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
	// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
	//   - Policy `sync`(default): Update and delete are allowed.
	//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
	//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
	//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (InstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppsetPolicy)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppsetPolicyOutput)
}

func (i InstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppsetPolicyOutput).ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecAppsetPolicyPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecAppsetPolicyArgs, InstanceArgocdSpecInstanceSpecAppsetPolicyPtr and InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecAppsetPolicyPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecAppsetPolicyArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecAppsetPolicyPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput
	ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput
}

type instanceArgocdSpecInstanceSpecAppsetPolicyPtrType InstanceArgocdSpecInstanceSpecAppsetPolicyArgs

func InstanceArgocdSpecInstanceSpecAppsetPolicyPtr(v *InstanceArgocdSpecInstanceSpecAppsetPolicyArgs) InstanceArgocdSpecInstanceSpecAppsetPolicyPtrInput {
	return (*instanceArgocdSpecInstanceSpecAppsetPolicyPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecAppsetPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecAppsetPolicy)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecAppsetPolicyPtrType) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecAppsetPolicyPtrType) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppsetPolicyOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppsetPolicy)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ToInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecAppsetPolicy) *InstanceArgocdSpecInstanceSpecAppsetPolicy {
		return &v
	}).(InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput)
}

// Allows per `ApplicationSet` sync policy.
func (o InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) OverridePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAppsetPolicy) *bool { return v.OverridePolicy }).(pulumi.BoolPtrOutput)
}

// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
//   - Policy `sync`(default): Update and delete are allowed.
//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
func (o InstanceArgocdSpecInstanceSpecAppsetPolicyOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecAppsetPolicy) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecAppsetPolicy)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput() InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput) ToInstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput) Elem() InstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppsetPolicy) InstanceArgocdSpecInstanceSpecAppsetPolicy {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecAppsetPolicy
		return ret
	}).(InstanceArgocdSpecInstanceSpecAppsetPolicyOutput)
}

// Allows per `ApplicationSet` sync policy.
func (o InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput) OverridePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppsetPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.OverridePolicy
	}).(pulumi.BoolPtrOutput)
}

// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
//   - Policy `sync`(default): Update and delete are allowed.
//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
func (o InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecAppsetPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

type InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      *bool `pulumi:"appReplication"`
	AutoUpgradeDisabled *bool `pulumi:"autoUpgradeDisabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization *string `pulumi:"kustomization"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling *bool `pulumi:"redisTunneling"`
}

// InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput is an input type that accepts InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs and InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput` via:
//
//	InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs{...}
type InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput
	ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput
}

type InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      pulumi.BoolPtrInput `pulumi:"appReplication"`
	AutoUpgradeDisabled pulumi.BoolPtrInput `pulumi:"autoUpgradeDisabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization pulumi.StringPtrInput `pulumi:"kustomization"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling pulumi.BoolPtrInput `pulumi:"redisTunneling"`
}

func (InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return i.ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput)
}

func (i InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput).ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs, InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtr and InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput
	ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput
}

type instanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrType InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs

func InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtr(v *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrInput {
	return (*instanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrType) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrType) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput)
}

type InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults {
		return &v
	}).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput)
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) AppReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *bool { return v.AppReplication }).(pulumi.BoolPtrOutput)
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) AutoUpgradeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *bool { return v.AutoUpgradeDisabled }).(pulumi.BoolPtrOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) Kustomization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *string { return v.Kustomization }).(pulumi.StringPtrOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) RedisTunneling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *bool { return v.RedisTunneling }).(pulumi.BoolPtrOutput)
}

type InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) ToInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) Elem() InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults
		return ret
	}).(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput)
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) AppReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.AppReplication
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) AutoUpgradeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgradeDisabled
	}).(pulumi.BoolPtrOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) Kustomization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Kustomization
	}).(pulumi.StringPtrOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput) RedisTunneling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.RedisTunneling
	}).(pulumi.BoolPtrOutput)
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtension struct {
	// Glob patterns of the resources to match.
	Resources []InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource `pulumi:"resources"`
}

// InstanceArgocdSpecInstanceSpecCrossplaneExtensionInput is an input type that accepts InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs and InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecCrossplaneExtensionInput` via:
//
//	InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs{...}
type InstanceArgocdSpecInstanceSpecCrossplaneExtensionInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput
	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs struct {
	// Glob patterns of the resources to match.
	Resources InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput `pulumi:"resources"`
}

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtension)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return i.ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput)
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput).ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs, InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtr and InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput
	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput
}

type instanceArgocdSpecInstanceSpecCrossplaneExtensionPtrType InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs

func InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtr(v *InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrInput {
	return (*instanceArgocdSpecInstanceSpecCrossplaneExtensionPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecCrossplaneExtensionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecCrossplaneExtension)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecCrossplaneExtensionPtrType) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecCrossplaneExtensionPtrType) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput)
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtension)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecCrossplaneExtension) *InstanceArgocdSpecInstanceSpecCrossplaneExtension {
		return &v
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput)
}

// Glob patterns of the resources to match.
func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) Resources() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecCrossplaneExtension) []InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource {
		return v.Resources
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput)
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecCrossplaneExtension)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput) Elem() InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecCrossplaneExtension) InstanceArgocdSpecInstanceSpecCrossplaneExtension {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecCrossplaneExtension
		return ret
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput)
}

// Glob patterns of the resources to match.
func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput) Resources() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecCrossplaneExtension) []InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput)
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource struct {
	// Glob pattern of the group to match.
	Group *string `pulumi:"group"`
}

// InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput is an input type that accepts InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs and InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput` via:
//
//	InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs{...}
type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput
	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs struct {
	// Glob pattern of the group to match.
	Group pulumi.StringPtrInput `pulumi:"group"`
}

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return i.ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput)
}

// InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput is an input type that accepts InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray and InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput` via:
//
//	InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray{ InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs{...} }
type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput
	ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray []InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return i.ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput)
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return o
}

// Glob pattern of the group to match.
func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource) *string { return v.Group }).(pulumi.StringPtrOutput)
}

type InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput() InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) ToInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) Index(i pulumi.IntInput) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource {
		return vs[0].([]InstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)[vs[1].(int)]
	}).(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput)
}

type InstanceArgocdSpecInstanceSpecExtension struct {
	// Extension ID
	Id string `pulumi:"id"`
	// Extension version
	Version string `pulumi:"version"`
}

// InstanceArgocdSpecInstanceSpecExtensionInput is an input type that accepts InstanceArgocdSpecInstanceSpecExtensionArgs and InstanceArgocdSpecInstanceSpecExtensionOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecExtensionInput` via:
//
//	InstanceArgocdSpecInstanceSpecExtensionArgs{...}
type InstanceArgocdSpecInstanceSpecExtensionInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecExtensionOutput() InstanceArgocdSpecInstanceSpecExtensionOutput
	ToInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecExtensionOutput
}

type InstanceArgocdSpecInstanceSpecExtensionArgs struct {
	// Extension ID
	Id pulumi.StringInput `pulumi:"id"`
	// Extension version
	Version pulumi.StringInput `pulumi:"version"`
}

func (InstanceArgocdSpecInstanceSpecExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecExtensionArgs) ToInstanceArgocdSpecInstanceSpecExtensionOutput() InstanceArgocdSpecInstanceSpecExtensionOutput {
	return i.ToInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecExtensionArgs) ToInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecExtensionOutput)
}

// InstanceArgocdSpecInstanceSpecExtensionArrayInput is an input type that accepts InstanceArgocdSpecInstanceSpecExtensionArray and InstanceArgocdSpecInstanceSpecExtensionArrayOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecExtensionArrayInput` via:
//
//	InstanceArgocdSpecInstanceSpecExtensionArray{ InstanceArgocdSpecInstanceSpecExtensionArgs{...} }
type InstanceArgocdSpecInstanceSpecExtensionArrayInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecExtensionArrayOutput() InstanceArgocdSpecInstanceSpecExtensionArrayOutput
	ToInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecExtensionArrayOutput
}

type InstanceArgocdSpecInstanceSpecExtensionArray []InstanceArgocdSpecInstanceSpecExtensionInput

func (InstanceArgocdSpecInstanceSpecExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecExtensionArray) ToInstanceArgocdSpecInstanceSpecExtensionArrayOutput() InstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return i.ToInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecExtensionArray) ToInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecExtensionArrayOutput)
}

type InstanceArgocdSpecInstanceSpecExtensionOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecExtensionOutput) ToInstanceArgocdSpecInstanceSpecExtensionOutput() InstanceArgocdSpecInstanceSpecExtensionOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecExtensionOutput) ToInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecExtensionOutput {
	return o
}

// Extension ID
func (o InstanceArgocdSpecInstanceSpecExtensionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecExtension) string { return v.Id }).(pulumi.StringOutput)
}

// Extension version
func (o InstanceArgocdSpecInstanceSpecExtensionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecExtension) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceArgocdSpecInstanceSpecExtensionArrayOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecExtensionArrayOutput) ToInstanceArgocdSpecInstanceSpecExtensionArrayOutput() InstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecExtensionArrayOutput) ToInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecExtensionArrayOutput) Index(i pulumi.IntInput) InstanceArgocdSpecInstanceSpecExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceArgocdSpecInstanceSpecExtension {
		return vs[0].([]InstanceArgocdSpecInstanceSpecExtension)[vs[1].(int)]
	}).(InstanceArgocdSpecInstanceSpecExtensionOutput)
}

type InstanceArgocdSpecInstanceSpecHostAlias struct {
	// List of hostnames
	Hostnames []string `pulumi:"hostnames"`
	// IP address
	Ip string `pulumi:"ip"`
}

// InstanceArgocdSpecInstanceSpecHostAliasInput is an input type that accepts InstanceArgocdSpecInstanceSpecHostAliasArgs and InstanceArgocdSpecInstanceSpecHostAliasOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecHostAliasInput` via:
//
//	InstanceArgocdSpecInstanceSpecHostAliasArgs{...}
type InstanceArgocdSpecInstanceSpecHostAliasInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecHostAliasOutput() InstanceArgocdSpecInstanceSpecHostAliasOutput
	ToInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecHostAliasOutput
}

type InstanceArgocdSpecInstanceSpecHostAliasArgs struct {
	// List of hostnames
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// IP address
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (InstanceArgocdSpecInstanceSpecHostAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecHostAliasArgs) ToInstanceArgocdSpecInstanceSpecHostAliasOutput() InstanceArgocdSpecInstanceSpecHostAliasOutput {
	return i.ToInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecHostAliasArgs) ToInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecHostAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecHostAliasOutput)
}

// InstanceArgocdSpecInstanceSpecHostAliasArrayInput is an input type that accepts InstanceArgocdSpecInstanceSpecHostAliasArray and InstanceArgocdSpecInstanceSpecHostAliasArrayOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecHostAliasArrayInput` via:
//
//	InstanceArgocdSpecInstanceSpecHostAliasArray{ InstanceArgocdSpecInstanceSpecHostAliasArgs{...} }
type InstanceArgocdSpecInstanceSpecHostAliasArrayInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutput() InstanceArgocdSpecInstanceSpecHostAliasArrayOutput
	ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecHostAliasArrayOutput
}

type InstanceArgocdSpecInstanceSpecHostAliasArray []InstanceArgocdSpecInstanceSpecHostAliasInput

func (InstanceArgocdSpecInstanceSpecHostAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecHostAliasArray) ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutput() InstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return i.ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecHostAliasArray) ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecHostAliasArrayOutput)
}

type InstanceArgocdSpecInstanceSpecHostAliasOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecHostAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecHostAliasOutput) ToInstanceArgocdSpecInstanceSpecHostAliasOutput() InstanceArgocdSpecInstanceSpecHostAliasOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecHostAliasOutput) ToInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecHostAliasOutput {
	return o
}

// List of hostnames
func (o InstanceArgocdSpecInstanceSpecHostAliasOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecHostAlias) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// IP address
func (o InstanceArgocdSpecInstanceSpecHostAliasOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecHostAlias) string { return v.Ip }).(pulumi.StringOutput)
}

type InstanceArgocdSpecInstanceSpecHostAliasArrayOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecHostAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecHostAliasArrayOutput) ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutput() InstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecHostAliasArrayOutput) ToInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecHostAliasArrayOutput) Index(i pulumi.IntInput) InstanceArgocdSpecInstanceSpecHostAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceArgocdSpecInstanceSpecHostAlias {
		return vs[0].([]InstanceArgocdSpecInstanceSpecHostAlias)[vs[1].(int)]
	}).(InstanceArgocdSpecInstanceSpecHostAliasOutput)
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegate struct {
	// If use control plane or not
	ControlPlane bool `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster `pulumi:"managedCluster"`
}

// InstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput is an input type that accepts InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs and InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput` via:
//
//	InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs{...}
type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput
	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs struct {
	// If use control plane or not
	ControlPlane pulumi.BoolInput `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrInput `pulumi:"managedCluster"`
}

func (InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegate)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return i.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput)
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput).ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs, InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtr and InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput
	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput
}

type instanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrType InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs

func InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtr(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrInput {
	return (*instanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecImageUpdaterDelegate)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrType) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrType) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput)
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegate)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecImageUpdaterDelegate) *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate {
		return &v
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput)
}

// If use control plane or not
func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ControlPlane() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecImageUpdaterDelegate) bool { return v.ControlPlane }).(pulumi.BoolOutput)
}

// If use managed cluster or not
func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ManagedCluster() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecImageUpdaterDelegate) *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster {
		return v.ManagedCluster
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecImageUpdaterDelegate)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput) Elem() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate) InstanceArgocdSpecInstanceSpecImageUpdaterDelegate {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecImageUpdaterDelegate
		return ret
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput)
}

// If use control plane or not
func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput) ControlPlane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate) *bool {
		if v == nil {
			return nil
		}
		return &v.ControlPlane
	}).(pulumi.BoolPtrOutput)
}

// If use managed cluster or not
func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput) ManagedCluster() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegate) *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster {
		if v == nil {
			return nil
		}
		return v.ManagedCluster
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster struct {
	// Cluster name
	ClusterName string `pulumi:"clusterName"`
}

// InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput is an input type that accepts InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs and InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput` via:
//
//	InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs{...}
type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput
	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs struct {
	// Cluster name
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return i.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput)
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput).ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs, InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtr and InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput
	ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput
}

type instanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrType InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs

func InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtr(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrInput {
	return (*instanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrType) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrType) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster) *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster {
		return &v
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput)
}

// Cluster name
func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

type InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput) ToInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput) Elem() InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster) InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster
		return ret
	}).(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput)
}

// Cluster name
func (o InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

type InstanceArgocdSpecInstanceSpecIpAllowList struct {
	// IP description
	Description *string `pulumi:"description"`
	// IP address
	Ip string `pulumi:"ip"`
}

// InstanceArgocdSpecInstanceSpecIpAllowListInput is an input type that accepts InstanceArgocdSpecInstanceSpecIpAllowListArgs and InstanceArgocdSpecInstanceSpecIpAllowListOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecIpAllowListInput` via:
//
//	InstanceArgocdSpecInstanceSpecIpAllowListArgs{...}
type InstanceArgocdSpecInstanceSpecIpAllowListInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecIpAllowListOutput() InstanceArgocdSpecInstanceSpecIpAllowListOutput
	ToInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecIpAllowListOutput
}

type InstanceArgocdSpecInstanceSpecIpAllowListArgs struct {
	// IP description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IP address
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (InstanceArgocdSpecInstanceSpecIpAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecIpAllowListArgs) ToInstanceArgocdSpecInstanceSpecIpAllowListOutput() InstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return i.ToInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecIpAllowListArgs) ToInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecIpAllowListOutput)
}

// InstanceArgocdSpecInstanceSpecIpAllowListArrayInput is an input type that accepts InstanceArgocdSpecInstanceSpecIpAllowListArray and InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecIpAllowListArrayInput` via:
//
//	InstanceArgocdSpecInstanceSpecIpAllowListArray{ InstanceArgocdSpecInstanceSpecIpAllowListArgs{...} }
type InstanceArgocdSpecInstanceSpecIpAllowListArrayInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput() InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput
	ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput
}

type InstanceArgocdSpecInstanceSpecIpAllowListArray []InstanceArgocdSpecInstanceSpecIpAllowListInput

func (InstanceArgocdSpecInstanceSpecIpAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecIpAllowListArray) ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput() InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return i.ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecIpAllowListArray) ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput)
}

type InstanceArgocdSpecInstanceSpecIpAllowListOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecIpAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecIpAllowListOutput) ToInstanceArgocdSpecInstanceSpecIpAllowListOutput() InstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecIpAllowListOutput) ToInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return o
}

// IP description
func (o InstanceArgocdSpecInstanceSpecIpAllowListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecIpAllowList) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// IP address
func (o InstanceArgocdSpecInstanceSpecIpAllowListOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecIpAllowList) string { return v.Ip }).(pulumi.StringOutput)
}

type InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput() InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) ToInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) Index(i pulumi.IntInput) InstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceArgocdSpecInstanceSpecIpAllowList {
		return vs[0].([]InstanceArgocdSpecInstanceSpecIpAllowList)[vs[1].(int)]
	}).(InstanceArgocdSpecInstanceSpecIpAllowListOutput)
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegate struct {
	// If use control plane or not
	ControlPlane bool `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster `pulumi:"managedCluster"`
}

// InstanceArgocdSpecInstanceSpecRepoServerDelegateInput is an input type that accepts InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs and InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecRepoServerDelegateInput` via:
//
//	InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs{...}
type InstanceArgocdSpecInstanceSpecRepoServerDelegateInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput
	ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs struct {
	// If use control plane or not
	ControlPlane pulumi.BoolInput `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrInput `pulumi:"managedCluster"`
}

func (InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegate)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return i.ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput)
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput).ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs, InstanceArgocdSpecInstanceSpecRepoServerDelegatePtr and InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput
	ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput
}

type instanceArgocdSpecInstanceSpecRepoServerDelegatePtrType InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs

func InstanceArgocdSpecInstanceSpecRepoServerDelegatePtr(v *InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrInput {
	return (*instanceArgocdSpecInstanceSpecRepoServerDelegatePtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecRepoServerDelegatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecRepoServerDelegate)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecRepoServerDelegatePtrType) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecRepoServerDelegatePtrType) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput)
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegate)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecRepoServerDelegate) *InstanceArgocdSpecInstanceSpecRepoServerDelegate {
		return &v
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput)
}

// If use control plane or not
func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ControlPlane() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecRepoServerDelegate) bool { return v.ControlPlane }).(pulumi.BoolOutput)
}

// If use managed cluster or not
func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ManagedCluster() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecRepoServerDelegate) *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster {
		return v.ManagedCluster
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecRepoServerDelegate)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput) Elem() InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecRepoServerDelegate) InstanceArgocdSpecInstanceSpecRepoServerDelegate {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecRepoServerDelegate
		return ret
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput)
}

// If use control plane or not
func (o InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput) ControlPlane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecRepoServerDelegate) *bool {
		if v == nil {
			return nil
		}
		return &v.ControlPlane
	}).(pulumi.BoolPtrOutput)
}

// If use managed cluster or not
func (o InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput) ManagedCluster() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecRepoServerDelegate) *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster {
		if v == nil {
			return nil
		}
		return v.ManagedCluster
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster struct {
	// Cluster name
	ClusterName string `pulumi:"clusterName"`
}

// InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput is an input type that accepts InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs and InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput` via:
//
//	InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs{...}
type InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput
	ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs struct {
	// Cluster name
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster)(nil)).Elem()
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return i.ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput)
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (i InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput).ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(ctx)
}

// InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrInput is an input type that accepts InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs, InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtr and InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput values.
// You can construct a concrete instance of `InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrInput` via:
//
//	        InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs{...}
//
//	or:
//
//	        nil
type InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrInput interface {
	pulumi.Input

	ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput
	ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput
}

type instanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrType InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs

func InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtr(v *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrInput {
	return (*instanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrType)(v)
}

func (*instanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster)(nil)).Elem()
}

func (i *instanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrType) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return i.ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (i *instanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrType) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput)
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return o.ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(context.Background())
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster) *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster {
		return &v
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput)
}

// Cluster name
func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

type InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput struct{ *pulumi.OutputState }

func (InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster)(nil)).Elem()
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput) ToInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutputWithContext(ctx context.Context) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput {
	return o
}

func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput) Elem() InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster) InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster {
		if v != nil {
			return *v
		}
		var ret InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster
		return ret
	}).(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput)
}

// Cluster name
func (o InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

type InstanceConfigManagementPlugins struct {
	// Whether this plugin is enabled or not. Default to false.
	Enabled *bool `pulumi:"enabled"`
	// Image to use for the plugin
	Image string `pulumi:"image"`
	// Plugin spec
	Spec InstanceConfigManagementPluginsSpec `pulumi:"spec"`
}

// InstanceConfigManagementPluginsInput is an input type that accepts InstanceConfigManagementPluginsArgs and InstanceConfigManagementPluginsOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsInput` via:
//
//	InstanceConfigManagementPluginsArgs{...}
type InstanceConfigManagementPluginsInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsOutput() InstanceConfigManagementPluginsOutput
	ToInstanceConfigManagementPluginsOutputWithContext(context.Context) InstanceConfigManagementPluginsOutput
}

type InstanceConfigManagementPluginsArgs struct {
	// Whether this plugin is enabled or not. Default to false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Image to use for the plugin
	Image pulumi.StringInput `pulumi:"image"`
	// Plugin spec
	Spec InstanceConfigManagementPluginsSpecInput `pulumi:"spec"`
}

func (InstanceConfigManagementPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPlugins)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsArgs) ToInstanceConfigManagementPluginsOutput() InstanceConfigManagementPluginsOutput {
	return i.ToInstanceConfigManagementPluginsOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsArgs) ToInstanceConfigManagementPluginsOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsOutput)
}

// InstanceConfigManagementPluginsMapInput is an input type that accepts InstanceConfigManagementPluginsMap and InstanceConfigManagementPluginsMapOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsMapInput` via:
//
//	InstanceConfigManagementPluginsMap{ "key": InstanceConfigManagementPluginsArgs{...} }
type InstanceConfigManagementPluginsMapInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsMapOutput() InstanceConfigManagementPluginsMapOutput
	ToInstanceConfigManagementPluginsMapOutputWithContext(context.Context) InstanceConfigManagementPluginsMapOutput
}

type InstanceConfigManagementPluginsMap map[string]InstanceConfigManagementPluginsInput

func (InstanceConfigManagementPluginsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceConfigManagementPlugins)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsMap) ToInstanceConfigManagementPluginsMapOutput() InstanceConfigManagementPluginsMapOutput {
	return i.ToInstanceConfigManagementPluginsMapOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsMap) ToInstanceConfigManagementPluginsMapOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsMapOutput)
}

type InstanceConfigManagementPluginsOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPlugins)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsOutput) ToInstanceConfigManagementPluginsOutput() InstanceConfigManagementPluginsOutput {
	return o
}

func (o InstanceConfigManagementPluginsOutput) ToInstanceConfigManagementPluginsOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsOutput {
	return o
}

// Whether this plugin is enabled or not. Default to false.
func (o InstanceConfigManagementPluginsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPlugins) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Image to use for the plugin
func (o InstanceConfigManagementPluginsOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigManagementPlugins) string { return v.Image }).(pulumi.StringOutput)
}

// Plugin spec
func (o InstanceConfigManagementPluginsOutput) Spec() InstanceConfigManagementPluginsSpecOutput {
	return o.ApplyT(func(v InstanceConfigManagementPlugins) InstanceConfigManagementPluginsSpec { return v.Spec }).(InstanceConfigManagementPluginsSpecOutput)
}

type InstanceConfigManagementPluginsMapOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceConfigManagementPlugins)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsMapOutput) ToInstanceConfigManagementPluginsMapOutput() InstanceConfigManagementPluginsMapOutput {
	return o
}

func (o InstanceConfigManagementPluginsMapOutput) ToInstanceConfigManagementPluginsMapOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsMapOutput {
	return o
}

func (o InstanceConfigManagementPluginsMapOutput) MapIndex(k pulumi.StringInput) InstanceConfigManagementPluginsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InstanceConfigManagementPlugins {
		return vs[0].(map[string]InstanceConfigManagementPlugins)[vs[1].(string)]
	}).(InstanceConfigManagementPluginsOutput)
}

type InstanceConfigManagementPluginsSpec struct {
	// The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the first (in that order) is evaluated.
	Discover *InstanceConfigManagementPluginsSpecDiscover `pulumi:"discover"`
	// The generate command runs in the Application source directory each time manifests are generated. Standard output must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation. Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
	Generate InstanceConfigManagementPluginsSpecGenerate `pulumi:"generate"`
	// The init command runs in the Application source directory at the beginning of each manifest generation. The init command can output anything. A non-zero status code will fail manifest generation. Init always happens immediately before generate, but its output is not treated as manifests. This is a good place to, for example, download chart dependencies.
	Init *InstanceConfigManagementPluginsSpecInit `pulumi:"init"`
	// The parameters config describes what parameters the UI should display for an Application. It is up to the user to actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements only inform the "Parameters" tab in the App Details page of the UI.
	Parameters *InstanceConfigManagementPluginsSpecParameters `pulumi:"parameters"`
	// Whether the plugin receives repository files with original file mode. Dangerous since the repository might have executable files. Set to true only if you trust the CMP plugin authors. Set to false by default.
	PreserveFileMode *bool `pulumi:"preserveFileMode"`
	// Plugin version
	Version *string `pulumi:"version"`
}

// InstanceConfigManagementPluginsSpecInput is an input type that accepts InstanceConfigManagementPluginsSpecArgs and InstanceConfigManagementPluginsSpecOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecInput` via:
//
//	InstanceConfigManagementPluginsSpecArgs{...}
type InstanceConfigManagementPluginsSpecInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecOutput() InstanceConfigManagementPluginsSpecOutput
	ToInstanceConfigManagementPluginsSpecOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecOutput
}

type InstanceConfigManagementPluginsSpecArgs struct {
	// The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the first (in that order) is evaluated.
	Discover InstanceConfigManagementPluginsSpecDiscoverPtrInput `pulumi:"discover"`
	// The generate command runs in the Application source directory each time manifests are generated. Standard output must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation. Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
	Generate InstanceConfigManagementPluginsSpecGenerateInput `pulumi:"generate"`
	// The init command runs in the Application source directory at the beginning of each manifest generation. The init command can output anything. A non-zero status code will fail manifest generation. Init always happens immediately before generate, but its output is not treated as manifests. This is a good place to, for example, download chart dependencies.
	Init InstanceConfigManagementPluginsSpecInitPtrInput `pulumi:"init"`
	// The parameters config describes what parameters the UI should display for an Application. It is up to the user to actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements only inform the "Parameters" tab in the App Details page of the UI.
	Parameters InstanceConfigManagementPluginsSpecParametersPtrInput `pulumi:"parameters"`
	// Whether the plugin receives repository files with original file mode. Dangerous since the repository might have executable files. Set to true only if you trust the CMP plugin authors. Set to false by default.
	PreserveFileMode pulumi.BoolPtrInput `pulumi:"preserveFileMode"`
	// Plugin version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (InstanceConfigManagementPluginsSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpec)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecArgs) ToInstanceConfigManagementPluginsSpecOutput() InstanceConfigManagementPluginsSpecOutput {
	return i.ToInstanceConfigManagementPluginsSpecOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecArgs) ToInstanceConfigManagementPluginsSpecOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecOutput)
}

type InstanceConfigManagementPluginsSpecOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpec)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecOutput) ToInstanceConfigManagementPluginsSpecOutput() InstanceConfigManagementPluginsSpecOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecOutput) ToInstanceConfigManagementPluginsSpecOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecOutput {
	return o
}

// The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the first (in that order) is evaluated.
func (o InstanceConfigManagementPluginsSpecOutput) Discover() InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpec) *InstanceConfigManagementPluginsSpecDiscover {
		return v.Discover
	}).(InstanceConfigManagementPluginsSpecDiscoverPtrOutput)
}

// The generate command runs in the Application source directory each time manifests are generated. Standard output must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation. Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
func (o InstanceConfigManagementPluginsSpecOutput) Generate() InstanceConfigManagementPluginsSpecGenerateOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpec) InstanceConfigManagementPluginsSpecGenerate {
		return v.Generate
	}).(InstanceConfigManagementPluginsSpecGenerateOutput)
}

// The init command runs in the Application source directory at the beginning of each manifest generation. The init command can output anything. A non-zero status code will fail manifest generation. Init always happens immediately before generate, but its output is not treated as manifests. This is a good place to, for example, download chart dependencies.
func (o InstanceConfigManagementPluginsSpecOutput) Init() InstanceConfigManagementPluginsSpecInitPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpec) *InstanceConfigManagementPluginsSpecInit { return v.Init }).(InstanceConfigManagementPluginsSpecInitPtrOutput)
}

// The parameters config describes what parameters the UI should display for an Application. It is up to the user to actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements only inform the "Parameters" tab in the App Details page of the UI.
func (o InstanceConfigManagementPluginsSpecOutput) Parameters() InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpec) *InstanceConfigManagementPluginsSpecParameters {
		return v.Parameters
	}).(InstanceConfigManagementPluginsSpecParametersPtrOutput)
}

// Whether the plugin receives repository files with original file mode. Dangerous since the repository might have executable files. Set to true only if you trust the CMP plugin authors. Set to false by default.
func (o InstanceConfigManagementPluginsSpecOutput) PreserveFileMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpec) *bool { return v.PreserveFileMode }).(pulumi.BoolPtrOutput)
}

// Plugin version
func (o InstanceConfigManagementPluginsSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type InstanceConfigManagementPluginsSpecDiscover struct {
	// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
	FileName *string `pulumi:"fileName"`
	// Find config
	Find *InstanceConfigManagementPluginsSpecDiscoverFind `pulumi:"find"`
}

// InstanceConfigManagementPluginsSpecDiscoverInput is an input type that accepts InstanceConfigManagementPluginsSpecDiscoverArgs and InstanceConfigManagementPluginsSpecDiscoverOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecDiscoverInput` via:
//
//	InstanceConfigManagementPluginsSpecDiscoverArgs{...}
type InstanceConfigManagementPluginsSpecDiscoverInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecDiscoverOutput() InstanceConfigManagementPluginsSpecDiscoverOutput
	ToInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecDiscoverOutput
}

type InstanceConfigManagementPluginsSpecDiscoverArgs struct {
	// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// Find config
	Find InstanceConfigManagementPluginsSpecDiscoverFindPtrInput `pulumi:"find"`
}

func (InstanceConfigManagementPluginsSpecDiscoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscover)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecDiscoverArgs) ToInstanceConfigManagementPluginsSpecDiscoverOutput() InstanceConfigManagementPluginsSpecDiscoverOutput {
	return i.ToInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecDiscoverArgs) ToInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecDiscoverOutput)
}

func (i InstanceConfigManagementPluginsSpecDiscoverArgs) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutput() InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecDiscoverArgs) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecDiscoverOutput).ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(ctx)
}

// InstanceConfigManagementPluginsSpecDiscoverPtrInput is an input type that accepts InstanceConfigManagementPluginsSpecDiscoverArgs, InstanceConfigManagementPluginsSpecDiscoverPtr and InstanceConfigManagementPluginsSpecDiscoverPtrOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecDiscoverPtrInput` via:
//
//	        InstanceConfigManagementPluginsSpecDiscoverArgs{...}
//
//	or:
//
//	        nil
type InstanceConfigManagementPluginsSpecDiscoverPtrInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecDiscoverPtrOutput() InstanceConfigManagementPluginsSpecDiscoverPtrOutput
	ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecDiscoverPtrOutput
}

type instanceConfigManagementPluginsSpecDiscoverPtrType InstanceConfigManagementPluginsSpecDiscoverArgs

func InstanceConfigManagementPluginsSpecDiscoverPtr(v *InstanceConfigManagementPluginsSpecDiscoverArgs) InstanceConfigManagementPluginsSpecDiscoverPtrInput {
	return (*instanceConfigManagementPluginsSpecDiscoverPtrType)(v)
}

func (*instanceConfigManagementPluginsSpecDiscoverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecDiscover)(nil)).Elem()
}

func (i *instanceConfigManagementPluginsSpecDiscoverPtrType) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutput() InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(context.Background())
}

func (i *instanceConfigManagementPluginsSpecDiscoverPtrType) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecDiscoverPtrOutput)
}

type InstanceConfigManagementPluginsSpecDiscoverOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecDiscoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscover)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecDiscoverOutput) ToInstanceConfigManagementPluginsSpecDiscoverOutput() InstanceConfigManagementPluginsSpecDiscoverOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverOutput) ToInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverOutput) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutput() InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return o.ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(context.Background())
}

func (o InstanceConfigManagementPluginsSpecDiscoverOutput) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceConfigManagementPluginsSpecDiscover) *InstanceConfigManagementPluginsSpecDiscover {
		return &v
	}).(InstanceConfigManagementPluginsSpecDiscoverPtrOutput)
}

// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
func (o InstanceConfigManagementPluginsSpecDiscoverOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecDiscover) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// Find config
func (o InstanceConfigManagementPluginsSpecDiscoverOutput) Find() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecDiscover) *InstanceConfigManagementPluginsSpecDiscoverFind {
		return v.Find
	}).(InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput)
}

type InstanceConfigManagementPluginsSpecDiscoverPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecDiscoverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecDiscover)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecDiscoverPtrOutput) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutput() InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverPtrOutput) ToInstanceConfigManagementPluginsSpecDiscoverPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverPtrOutput) Elem() InstanceConfigManagementPluginsSpecDiscoverOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscover) InstanceConfigManagementPluginsSpecDiscover {
		if v != nil {
			return *v
		}
		var ret InstanceConfigManagementPluginsSpecDiscover
		return ret
	}).(InstanceConfigManagementPluginsSpecDiscoverOutput)
}

// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
func (o InstanceConfigManagementPluginsSpecDiscoverPtrOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscover) *string {
		if v == nil {
			return nil
		}
		return v.FileName
	}).(pulumi.StringPtrOutput)
}

// Find config
func (o InstanceConfigManagementPluginsSpecDiscoverPtrOutput) Find() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscover) *InstanceConfigManagementPluginsSpecDiscoverFind {
		if v == nil {
			return nil
		}
		return v.Find
	}).(InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput)
}

type InstanceConfigManagementPluginsSpecDiscoverFind struct {
	// Arguments for the find command
	Args []string `pulumi:"args"`
	// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
	Commands []string `pulumi:"commands"`
	// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
	Glob *string `pulumi:"glob"`
}

// InstanceConfigManagementPluginsSpecDiscoverFindInput is an input type that accepts InstanceConfigManagementPluginsSpecDiscoverFindArgs and InstanceConfigManagementPluginsSpecDiscoverFindOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecDiscoverFindInput` via:
//
//	InstanceConfigManagementPluginsSpecDiscoverFindArgs{...}
type InstanceConfigManagementPluginsSpecDiscoverFindInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecDiscoverFindOutput() InstanceConfigManagementPluginsSpecDiscoverFindOutput
	ToInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecDiscoverFindOutput
}

type InstanceConfigManagementPluginsSpecDiscoverFindArgs struct {
	// Arguments for the find command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
}

func (InstanceConfigManagementPluginsSpecDiscoverFindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscoverFind)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecDiscoverFindArgs) ToInstanceConfigManagementPluginsSpecDiscoverFindOutput() InstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return i.ToInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecDiscoverFindArgs) ToInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecDiscoverFindOutput)
}

func (i InstanceConfigManagementPluginsSpecDiscoverFindArgs) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutput() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecDiscoverFindArgs) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecDiscoverFindOutput).ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(ctx)
}

// InstanceConfigManagementPluginsSpecDiscoverFindPtrInput is an input type that accepts InstanceConfigManagementPluginsSpecDiscoverFindArgs, InstanceConfigManagementPluginsSpecDiscoverFindPtr and InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecDiscoverFindPtrInput` via:
//
//	        InstanceConfigManagementPluginsSpecDiscoverFindArgs{...}
//
//	or:
//
//	        nil
type InstanceConfigManagementPluginsSpecDiscoverFindPtrInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutput() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput
	ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput
}

type instanceConfigManagementPluginsSpecDiscoverFindPtrType InstanceConfigManagementPluginsSpecDiscoverFindArgs

func InstanceConfigManagementPluginsSpecDiscoverFindPtr(v *InstanceConfigManagementPluginsSpecDiscoverFindArgs) InstanceConfigManagementPluginsSpecDiscoverFindPtrInput {
	return (*instanceConfigManagementPluginsSpecDiscoverFindPtrType)(v)
}

func (*instanceConfigManagementPluginsSpecDiscoverFindPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecDiscoverFind)(nil)).Elem()
}

func (i *instanceConfigManagementPluginsSpecDiscoverFindPtrType) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutput() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(context.Background())
}

func (i *instanceConfigManagementPluginsSpecDiscoverFindPtrType) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput)
}

type InstanceConfigManagementPluginsSpecDiscoverFindOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecDiscoverFindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscoverFind)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) ToInstanceConfigManagementPluginsSpecDiscoverFindOutput() InstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) ToInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutput() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return o.ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(context.Background())
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceConfigManagementPluginsSpecDiscoverFind) *InstanceConfigManagementPluginsSpecDiscoverFind {
		return &v
	}).(InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput)
}

// Arguments for the find command
func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecDiscoverFind) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecDiscoverFind) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
func (o InstanceConfigManagementPluginsSpecDiscoverFindOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecDiscoverFind) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

type InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecDiscoverFind)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutput() InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) ToInstanceConfigManagementPluginsSpecDiscoverFindPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) Elem() InstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscoverFind) InstanceConfigManagementPluginsSpecDiscoverFind {
		if v != nil {
			return *v
		}
		var ret InstanceConfigManagementPluginsSpecDiscoverFind
		return ret
	}).(InstanceConfigManagementPluginsSpecDiscoverFindOutput)
}

// Arguments for the find command
func (o InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscoverFind) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
func (o InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscoverFind) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
func (o InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecDiscoverFind) *string {
		if v == nil {
			return nil
		}
		return v.Glob
	}).(pulumi.StringPtrOutput)
}

type InstanceConfigManagementPluginsSpecGenerate struct {
	// Arguments of the command
	Args []string `pulumi:"args"`
	// Command
	Commands []string `pulumi:"commands"`
}

// InstanceConfigManagementPluginsSpecGenerateInput is an input type that accepts InstanceConfigManagementPluginsSpecGenerateArgs and InstanceConfigManagementPluginsSpecGenerateOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecGenerateInput` via:
//
//	InstanceConfigManagementPluginsSpecGenerateArgs{...}
type InstanceConfigManagementPluginsSpecGenerateInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecGenerateOutput() InstanceConfigManagementPluginsSpecGenerateOutput
	ToInstanceConfigManagementPluginsSpecGenerateOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecGenerateOutput
}

type InstanceConfigManagementPluginsSpecGenerateArgs struct {
	// Arguments of the command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Command
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (InstanceConfigManagementPluginsSpecGenerateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecGenerate)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecGenerateArgs) ToInstanceConfigManagementPluginsSpecGenerateOutput() InstanceConfigManagementPluginsSpecGenerateOutput {
	return i.ToInstanceConfigManagementPluginsSpecGenerateOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecGenerateArgs) ToInstanceConfigManagementPluginsSpecGenerateOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecGenerateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecGenerateOutput)
}

type InstanceConfigManagementPluginsSpecGenerateOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecGenerateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecGenerate)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecGenerateOutput) ToInstanceConfigManagementPluginsSpecGenerateOutput() InstanceConfigManagementPluginsSpecGenerateOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecGenerateOutput) ToInstanceConfigManagementPluginsSpecGenerateOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecGenerateOutput {
	return o
}

// Arguments of the command
func (o InstanceConfigManagementPluginsSpecGenerateOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecGenerate) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Command
func (o InstanceConfigManagementPluginsSpecGenerateOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecGenerate) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type InstanceConfigManagementPluginsSpecInit struct {
	// Arguments of the command
	Args []string `pulumi:"args"`
	// Command
	Commands []string `pulumi:"commands"`
}

// InstanceConfigManagementPluginsSpecInitInput is an input type that accepts InstanceConfigManagementPluginsSpecInitArgs and InstanceConfigManagementPluginsSpecInitOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecInitInput` via:
//
//	InstanceConfigManagementPluginsSpecInitArgs{...}
type InstanceConfigManagementPluginsSpecInitInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecInitOutput() InstanceConfigManagementPluginsSpecInitOutput
	ToInstanceConfigManagementPluginsSpecInitOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecInitOutput
}

type InstanceConfigManagementPluginsSpecInitArgs struct {
	// Arguments of the command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Command
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (InstanceConfigManagementPluginsSpecInitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecInit)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecInitArgs) ToInstanceConfigManagementPluginsSpecInitOutput() InstanceConfigManagementPluginsSpecInitOutput {
	return i.ToInstanceConfigManagementPluginsSpecInitOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecInitArgs) ToInstanceConfigManagementPluginsSpecInitOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecInitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecInitOutput)
}

func (i InstanceConfigManagementPluginsSpecInitArgs) ToInstanceConfigManagementPluginsSpecInitPtrOutput() InstanceConfigManagementPluginsSpecInitPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecInitArgs) ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecInitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecInitOutput).ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(ctx)
}

// InstanceConfigManagementPluginsSpecInitPtrInput is an input type that accepts InstanceConfigManagementPluginsSpecInitArgs, InstanceConfigManagementPluginsSpecInitPtr and InstanceConfigManagementPluginsSpecInitPtrOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecInitPtrInput` via:
//
//	        InstanceConfigManagementPluginsSpecInitArgs{...}
//
//	or:
//
//	        nil
type InstanceConfigManagementPluginsSpecInitPtrInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecInitPtrOutput() InstanceConfigManagementPluginsSpecInitPtrOutput
	ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecInitPtrOutput
}

type instanceConfigManagementPluginsSpecInitPtrType InstanceConfigManagementPluginsSpecInitArgs

func InstanceConfigManagementPluginsSpecInitPtr(v *InstanceConfigManagementPluginsSpecInitArgs) InstanceConfigManagementPluginsSpecInitPtrInput {
	return (*instanceConfigManagementPluginsSpecInitPtrType)(v)
}

func (*instanceConfigManagementPluginsSpecInitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecInit)(nil)).Elem()
}

func (i *instanceConfigManagementPluginsSpecInitPtrType) ToInstanceConfigManagementPluginsSpecInitPtrOutput() InstanceConfigManagementPluginsSpecInitPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(context.Background())
}

func (i *instanceConfigManagementPluginsSpecInitPtrType) ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecInitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecInitPtrOutput)
}

type InstanceConfigManagementPluginsSpecInitOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecInitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecInit)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecInitOutput) ToInstanceConfigManagementPluginsSpecInitOutput() InstanceConfigManagementPluginsSpecInitOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecInitOutput) ToInstanceConfigManagementPluginsSpecInitOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecInitOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecInitOutput) ToInstanceConfigManagementPluginsSpecInitPtrOutput() InstanceConfigManagementPluginsSpecInitPtrOutput {
	return o.ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(context.Background())
}

func (o InstanceConfigManagementPluginsSpecInitOutput) ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecInitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceConfigManagementPluginsSpecInit) *InstanceConfigManagementPluginsSpecInit {
		return &v
	}).(InstanceConfigManagementPluginsSpecInitPtrOutput)
}

// Arguments of the command
func (o InstanceConfigManagementPluginsSpecInitOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecInit) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Command
func (o InstanceConfigManagementPluginsSpecInitOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecInit) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type InstanceConfigManagementPluginsSpecInitPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecInitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecInit)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecInitPtrOutput) ToInstanceConfigManagementPluginsSpecInitPtrOutput() InstanceConfigManagementPluginsSpecInitPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecInitPtrOutput) ToInstanceConfigManagementPluginsSpecInitPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecInitPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecInitPtrOutput) Elem() InstanceConfigManagementPluginsSpecInitOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecInit) InstanceConfigManagementPluginsSpecInit {
		if v != nil {
			return *v
		}
		var ret InstanceConfigManagementPluginsSpecInit
		return ret
	}).(InstanceConfigManagementPluginsSpecInitOutput)
}

// Arguments of the command
func (o InstanceConfigManagementPluginsSpecInitPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecInit) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Command
func (o InstanceConfigManagementPluginsSpecInitPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecInit) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

type InstanceConfigManagementPluginsSpecParameters struct {
	// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
	Dynamic *InstanceConfigManagementPluginsSpecParametersDynamic `pulumi:"dynamic"`
	// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
	Statics []InstanceConfigManagementPluginsSpecParametersStatic `pulumi:"statics"`
}

// InstanceConfigManagementPluginsSpecParametersInput is an input type that accepts InstanceConfigManagementPluginsSpecParametersArgs and InstanceConfigManagementPluginsSpecParametersOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecParametersInput` via:
//
//	InstanceConfigManagementPluginsSpecParametersArgs{...}
type InstanceConfigManagementPluginsSpecParametersInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecParametersOutput() InstanceConfigManagementPluginsSpecParametersOutput
	ToInstanceConfigManagementPluginsSpecParametersOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecParametersOutput
}

type InstanceConfigManagementPluginsSpecParametersArgs struct {
	// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
	Dynamic InstanceConfigManagementPluginsSpecParametersDynamicPtrInput `pulumi:"dynamic"`
	// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
	Statics InstanceConfigManagementPluginsSpecParametersStaticArrayInput `pulumi:"statics"`
}

func (InstanceConfigManagementPluginsSpecParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecParameters)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecParametersArgs) ToInstanceConfigManagementPluginsSpecParametersOutput() InstanceConfigManagementPluginsSpecParametersOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecParametersArgs) ToInstanceConfigManagementPluginsSpecParametersOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersOutput)
}

func (i InstanceConfigManagementPluginsSpecParametersArgs) ToInstanceConfigManagementPluginsSpecParametersPtrOutput() InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecParametersArgs) ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersOutput).ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(ctx)
}

// InstanceConfigManagementPluginsSpecParametersPtrInput is an input type that accepts InstanceConfigManagementPluginsSpecParametersArgs, InstanceConfigManagementPluginsSpecParametersPtr and InstanceConfigManagementPluginsSpecParametersPtrOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecParametersPtrInput` via:
//
//	        InstanceConfigManagementPluginsSpecParametersArgs{...}
//
//	or:
//
//	        nil
type InstanceConfigManagementPluginsSpecParametersPtrInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecParametersPtrOutput() InstanceConfigManagementPluginsSpecParametersPtrOutput
	ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecParametersPtrOutput
}

type instanceConfigManagementPluginsSpecParametersPtrType InstanceConfigManagementPluginsSpecParametersArgs

func InstanceConfigManagementPluginsSpecParametersPtr(v *InstanceConfigManagementPluginsSpecParametersArgs) InstanceConfigManagementPluginsSpecParametersPtrInput {
	return (*instanceConfigManagementPluginsSpecParametersPtrType)(v)
}

func (*instanceConfigManagementPluginsSpecParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecParameters)(nil)).Elem()
}

func (i *instanceConfigManagementPluginsSpecParametersPtrType) ToInstanceConfigManagementPluginsSpecParametersPtrOutput() InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(context.Background())
}

func (i *instanceConfigManagementPluginsSpecParametersPtrType) ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersPtrOutput)
}

type InstanceConfigManagementPluginsSpecParametersOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecParameters)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecParametersOutput) ToInstanceConfigManagementPluginsSpecParametersOutput() InstanceConfigManagementPluginsSpecParametersOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersOutput) ToInstanceConfigManagementPluginsSpecParametersOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersOutput) ToInstanceConfigManagementPluginsSpecParametersPtrOutput() InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return o.ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(context.Background())
}

func (o InstanceConfigManagementPluginsSpecParametersOutput) ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceConfigManagementPluginsSpecParameters) *InstanceConfigManagementPluginsSpecParameters {
		return &v
	}).(InstanceConfigManagementPluginsSpecParametersPtrOutput)
}

// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
func (o InstanceConfigManagementPluginsSpecParametersOutput) Dynamic() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParameters) *InstanceConfigManagementPluginsSpecParametersDynamic {
		return v.Dynamic
	}).(InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput)
}

// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
func (o InstanceConfigManagementPluginsSpecParametersOutput) Statics() InstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParameters) []InstanceConfigManagementPluginsSpecParametersStatic {
		return v.Statics
	}).(InstanceConfigManagementPluginsSpecParametersStaticArrayOutput)
}

type InstanceConfigManagementPluginsSpecParametersPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecParameters)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecParametersPtrOutput) ToInstanceConfigManagementPluginsSpecParametersPtrOutput() InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersPtrOutput) ToInstanceConfigManagementPluginsSpecParametersPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersPtrOutput) Elem() InstanceConfigManagementPluginsSpecParametersOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecParameters) InstanceConfigManagementPluginsSpecParameters {
		if v != nil {
			return *v
		}
		var ret InstanceConfigManagementPluginsSpecParameters
		return ret
	}).(InstanceConfigManagementPluginsSpecParametersOutput)
}

// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
func (o InstanceConfigManagementPluginsSpecParametersPtrOutput) Dynamic() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecParameters) *InstanceConfigManagementPluginsSpecParametersDynamic {
		if v == nil {
			return nil
		}
		return v.Dynamic
	}).(InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput)
}

// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
func (o InstanceConfigManagementPluginsSpecParametersPtrOutput) Statics() InstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecParameters) []InstanceConfigManagementPluginsSpecParametersStatic {
		if v == nil {
			return nil
		}
		return v.Statics
	}).(InstanceConfigManagementPluginsSpecParametersStaticArrayOutput)
}

type InstanceConfigManagementPluginsSpecParametersDynamic struct {
	// Arguments of the command
	Args []string `pulumi:"args"`
	// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
	Commands []string `pulumi:"commands"`
}

// InstanceConfigManagementPluginsSpecParametersDynamicInput is an input type that accepts InstanceConfigManagementPluginsSpecParametersDynamicArgs and InstanceConfigManagementPluginsSpecParametersDynamicOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecParametersDynamicInput` via:
//
//	InstanceConfigManagementPluginsSpecParametersDynamicArgs{...}
type InstanceConfigManagementPluginsSpecParametersDynamicInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecParametersDynamicOutput() InstanceConfigManagementPluginsSpecParametersDynamicOutput
	ToInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecParametersDynamicOutput
}

type InstanceConfigManagementPluginsSpecParametersDynamicArgs struct {
	// Arguments of the command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (InstanceConfigManagementPluginsSpecParametersDynamicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersDynamic)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecParametersDynamicArgs) ToInstanceConfigManagementPluginsSpecParametersDynamicOutput() InstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecParametersDynamicArgs) ToInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersDynamicOutput)
}

func (i InstanceConfigManagementPluginsSpecParametersDynamicArgs) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutput() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecParametersDynamicArgs) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersDynamicOutput).ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(ctx)
}

// InstanceConfigManagementPluginsSpecParametersDynamicPtrInput is an input type that accepts InstanceConfigManagementPluginsSpecParametersDynamicArgs, InstanceConfigManagementPluginsSpecParametersDynamicPtr and InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecParametersDynamicPtrInput` via:
//
//	        InstanceConfigManagementPluginsSpecParametersDynamicArgs{...}
//
//	or:
//
//	        nil
type InstanceConfigManagementPluginsSpecParametersDynamicPtrInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutput() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput
	ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput
}

type instanceConfigManagementPluginsSpecParametersDynamicPtrType InstanceConfigManagementPluginsSpecParametersDynamicArgs

func InstanceConfigManagementPluginsSpecParametersDynamicPtr(v *InstanceConfigManagementPluginsSpecParametersDynamicArgs) InstanceConfigManagementPluginsSpecParametersDynamicPtrInput {
	return (*instanceConfigManagementPluginsSpecParametersDynamicPtrType)(v)
}

func (*instanceConfigManagementPluginsSpecParametersDynamicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecParametersDynamic)(nil)).Elem()
}

func (i *instanceConfigManagementPluginsSpecParametersDynamicPtrType) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutput() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(context.Background())
}

func (i *instanceConfigManagementPluginsSpecParametersDynamicPtrType) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput)
}

type InstanceConfigManagementPluginsSpecParametersDynamicOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecParametersDynamicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersDynamic)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicOutput) ToInstanceConfigManagementPluginsSpecParametersDynamicOutput() InstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicOutput) ToInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicOutput) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutput() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return o.ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(context.Background())
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicOutput) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceConfigManagementPluginsSpecParametersDynamic) *InstanceConfigManagementPluginsSpecParametersDynamic {
		return &v
	}).(InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput)
}

// Arguments of the command
func (o InstanceConfigManagementPluginsSpecParametersDynamicOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersDynamic) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
func (o InstanceConfigManagementPluginsSpecParametersDynamicOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersDynamic) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigManagementPluginsSpecParametersDynamic)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutput() InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput) ToInstanceConfigManagementPluginsSpecParametersDynamicPtrOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput) Elem() InstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecParametersDynamic) InstanceConfigManagementPluginsSpecParametersDynamic {
		if v != nil {
			return *v
		}
		var ret InstanceConfigManagementPluginsSpecParametersDynamic
		return ret
	}).(InstanceConfigManagementPluginsSpecParametersDynamicOutput)
}

// Arguments of the command
func (o InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecParametersDynamic) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
func (o InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfigManagementPluginsSpecParametersDynamic) []string {
		if v == nil {
			return nil
		}
		return v.Commands
	}).(pulumi.StringArrayOutput)
}

type InstanceConfigManagementPluginsSpecParametersStatic struct {
	// This field communicates the parameter's default value to the UI if the parameter is an `array`.
	Arrays []string `pulumi:"arrays"`
	// Collection Type describes what type of value this parameter accepts (string, array, or map) and allows the UI to present a form to match that type. Default is `string`. This field must be present for non-string types. It will not be inferred from the presence of an `array` or `map` field.
	CollectionType *string `pulumi:"collectionType"`
	// Item type tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is `string`. Examples of other types which may be supported in the future are `boolean` or `number`. Even if the itemType is not `string`, the parameter value from the Application spec will be sent to the plugin as a string. It's up to the plugin to do the appropriate conversion.
	ItemType *string `pulumi:"itemType"`
	// This field communicates the parameter's default value to the UI if the parameter is a `map`.
	Map map[string]string `pulumi:"map"`
	// Parameter name
	Name *string `pulumi:"name"`
	// Whether the Parameter is required or not. If this field is set to true, the UI will indicate to the user that they must set the value. Default to false.
	Required *bool `pulumi:"required"`
	// This field communicates the parameter's default value to the UI if the parameter is a `string`.
	String *string `pulumi:"string"`
	// Title and description of the parameter
	Title *string `pulumi:"title"`
	// Tooltip of the Parameter, will be shown when hovering over the title
	Tooltip *string `pulumi:"tooltip"`
}

// InstanceConfigManagementPluginsSpecParametersStaticInput is an input type that accepts InstanceConfigManagementPluginsSpecParametersStaticArgs and InstanceConfigManagementPluginsSpecParametersStaticOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecParametersStaticInput` via:
//
//	InstanceConfigManagementPluginsSpecParametersStaticArgs{...}
type InstanceConfigManagementPluginsSpecParametersStaticInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecParametersStaticOutput() InstanceConfigManagementPluginsSpecParametersStaticOutput
	ToInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecParametersStaticOutput
}

type InstanceConfigManagementPluginsSpecParametersStaticArgs struct {
	// This field communicates the parameter's default value to the UI if the parameter is an `array`.
	Arrays pulumi.StringArrayInput `pulumi:"arrays"`
	// Collection Type describes what type of value this parameter accepts (string, array, or map) and allows the UI to present a form to match that type. Default is `string`. This field must be present for non-string types. It will not be inferred from the presence of an `array` or `map` field.
	CollectionType pulumi.StringPtrInput `pulumi:"collectionType"`
	// Item type tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is `string`. Examples of other types which may be supported in the future are `boolean` or `number`. Even if the itemType is not `string`, the parameter value from the Application spec will be sent to the plugin as a string. It's up to the plugin to do the appropriate conversion.
	ItemType pulumi.StringPtrInput `pulumi:"itemType"`
	// This field communicates the parameter's default value to the UI if the parameter is a `map`.
	Map pulumi.StringMapInput `pulumi:"map"`
	// Parameter name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether the Parameter is required or not. If this field is set to true, the UI will indicate to the user that they must set the value. Default to false.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// This field communicates the parameter's default value to the UI if the parameter is a `string`.
	String pulumi.StringPtrInput `pulumi:"string"`
	// Title and description of the parameter
	Title pulumi.StringPtrInput `pulumi:"title"`
	// Tooltip of the Parameter, will be shown when hovering over the title
	Tooltip pulumi.StringPtrInput `pulumi:"tooltip"`
}

func (InstanceConfigManagementPluginsSpecParametersStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecParametersStaticArgs) ToInstanceConfigManagementPluginsSpecParametersStaticOutput() InstanceConfigManagementPluginsSpecParametersStaticOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecParametersStaticArgs) ToInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersStaticOutput)
}

// InstanceConfigManagementPluginsSpecParametersStaticArrayInput is an input type that accepts InstanceConfigManagementPluginsSpecParametersStaticArray and InstanceConfigManagementPluginsSpecParametersStaticArrayOutput values.
// You can construct a concrete instance of `InstanceConfigManagementPluginsSpecParametersStaticArrayInput` via:
//
//	InstanceConfigManagementPluginsSpecParametersStaticArray{ InstanceConfigManagementPluginsSpecParametersStaticArgs{...} }
type InstanceConfigManagementPluginsSpecParametersStaticArrayInput interface {
	pulumi.Input

	ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutput() InstanceConfigManagementPluginsSpecParametersStaticArrayOutput
	ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(context.Context) InstanceConfigManagementPluginsSpecParametersStaticArrayOutput
}

type InstanceConfigManagementPluginsSpecParametersStaticArray []InstanceConfigManagementPluginsSpecParametersStaticInput

func (InstanceConfigManagementPluginsSpecParametersStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (i InstanceConfigManagementPluginsSpecParametersStaticArray) ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutput() InstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return i.ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(context.Background())
}

func (i InstanceConfigManagementPluginsSpecParametersStaticArray) ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigManagementPluginsSpecParametersStaticArrayOutput)
}

type InstanceConfigManagementPluginsSpecParametersStaticOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecParametersStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) ToInstanceConfigManagementPluginsSpecParametersStaticOutput() InstanceConfigManagementPluginsSpecParametersStaticOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) ToInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersStaticOutput {
	return o
}

// This field communicates the parameter's default value to the UI if the parameter is an `array`.
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) Arrays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) []string { return v.Arrays }).(pulumi.StringArrayOutput)
}

// Collection Type describes what type of value this parameter accepts (string, array, or map) and allows the UI to present a form to match that type. Default is `string`. This field must be present for non-string types. It will not be inferred from the presence of an `array` or `map` field.
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) CollectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *string { return v.CollectionType }).(pulumi.StringPtrOutput)
}

// Item type tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is `string`. Examples of other types which may be supported in the future are `boolean` or `number`. Even if the itemType is not `string`, the parameter value from the Application spec will be sent to the plugin as a string. It's up to the plugin to do the appropriate conversion.
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) ItemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *string { return v.ItemType }).(pulumi.StringPtrOutput)
}

// This field communicates the parameter's default value to the UI if the parameter is a `map`.
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) Map() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) map[string]string { return v.Map }).(pulumi.StringMapOutput)
}

// Parameter name
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether the Parameter is required or not. If this field is set to true, the UI will indicate to the user that they must set the value. Default to false.
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// This field communicates the parameter's default value to the UI if the parameter is a `string`.
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) String() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *string { return v.String }).(pulumi.StringPtrOutput)
}

// Title and description of the parameter
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// Tooltip of the Parameter, will be shown when hovering over the title
func (o InstanceConfigManagementPluginsSpecParametersStaticOutput) Tooltip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigManagementPluginsSpecParametersStatic) *string { return v.Tooltip }).(pulumi.StringPtrOutput)
}

type InstanceConfigManagementPluginsSpecParametersStaticArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigManagementPluginsSpecParametersStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (o InstanceConfigManagementPluginsSpecParametersStaticArrayOutput) ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutput() InstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersStaticArrayOutput) ToInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(ctx context.Context) InstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o
}

func (o InstanceConfigManagementPluginsSpecParametersStaticArrayOutput) Index(i pulumi.IntInput) InstanceConfigManagementPluginsSpecParametersStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfigManagementPluginsSpecParametersStatic {
		return vs[0].([]InstanceConfigManagementPluginsSpecParametersStatic)[vs[1].(int)]
	}).(InstanceConfigManagementPluginsSpecParametersStaticOutput)
}

type GetClusterKubeConfig struct {
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate string `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey string `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate string `pulumi:"clusterCaCertificate"`
	// Context name to load from the kube config file.
	ConfigContext         string `pulumi:"configContext"`
	ConfigContextAuthInfo string `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  string `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath string `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths []string `pulumi:"configPaths"`
	// The hostname (in form of URI) of Kubernetes master.
	Host string `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate.
	Insecure bool `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Password string `pulumi:"password"`
	// URL to the proxy to be used for all API requests
	ProxyUrl string `pulumi:"proxyUrl"`
	// Token to authenticate an service account
	Token string `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Username string `pulumi:"username"`
}

// GetClusterKubeConfigInput is an input type that accepts GetClusterKubeConfigArgs and GetClusterKubeConfigOutput values.
// You can construct a concrete instance of `GetClusterKubeConfigInput` via:
//
//	GetClusterKubeConfigArgs{...}
type GetClusterKubeConfigInput interface {
	pulumi.Input

	ToGetClusterKubeConfigOutput() GetClusterKubeConfigOutput
	ToGetClusterKubeConfigOutputWithContext(context.Context) GetClusterKubeConfigOutput
}

type GetClusterKubeConfigArgs struct {
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate pulumi.StringInput `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate pulumi.StringInput `pulumi:"clusterCaCertificate"`
	// Context name to load from the kube config file.
	ConfigContext         pulumi.StringInput `pulumi:"configContext"`
	ConfigContextAuthInfo pulumi.StringInput `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  pulumi.StringInput `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath pulumi.StringInput `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths pulumi.StringArrayInput `pulumi:"configPaths"`
	// The hostname (in form of URI) of Kubernetes master.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate.
	Insecure pulumi.BoolInput `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Password pulumi.StringInput `pulumi:"password"`
	// URL to the proxy to be used for all API requests
	ProxyUrl pulumi.StringInput `pulumi:"proxyUrl"`
	// Token to authenticate an service account
	Token pulumi.StringInput `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetClusterKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterKubeConfig)(nil)).Elem()
}

func (i GetClusterKubeConfigArgs) ToGetClusterKubeConfigOutput() GetClusterKubeConfigOutput {
	return i.ToGetClusterKubeConfigOutputWithContext(context.Background())
}

func (i GetClusterKubeConfigArgs) ToGetClusterKubeConfigOutputWithContext(ctx context.Context) GetClusterKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterKubeConfigOutput)
}

type GetClusterKubeConfigOutput struct{ *pulumi.OutputState }

func (GetClusterKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterKubeConfig)(nil)).Elem()
}

func (o GetClusterKubeConfigOutput) ToGetClusterKubeConfigOutput() GetClusterKubeConfigOutput {
	return o
}

func (o GetClusterKubeConfigOutput) ToGetClusterKubeConfigOutputWithContext(ctx context.Context) GetClusterKubeConfigOutput {
	return o
}

// PEM-encoded client certificate for TLS authentication.
func (o GetClusterKubeConfigOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// PEM-encoded client certificate key for TLS authentication.
func (o GetClusterKubeConfigOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ClientKey }).(pulumi.StringOutput)
}

// PEM-encoded root certificates bundle for TLS authentication.
func (o GetClusterKubeConfigOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// Context name to load from the kube config file.
func (o GetClusterKubeConfigOutput) ConfigContext() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ConfigContext }).(pulumi.StringOutput)
}

func (o GetClusterKubeConfigOutput) ConfigContextAuthInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ConfigContextAuthInfo }).(pulumi.StringOutput)
}

func (o GetClusterKubeConfigOutput) ConfigContextCluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ConfigContextCluster }).(pulumi.StringOutput)
}

// Path to the kube config file.
func (o GetClusterKubeConfigOutput) ConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ConfigPath }).(pulumi.StringOutput)
}

// A list of paths to kube config files.
func (o GetClusterKubeConfigOutput) ConfigPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) []string { return v.ConfigPaths }).(pulumi.StringArrayOutput)
}

// The hostname (in form of URI) of Kubernetes master.
func (o GetClusterKubeConfigOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.Host }).(pulumi.StringOutput)
}

// Whether server should be accessed without verifying the TLS certificate.
func (o GetClusterKubeConfigOutput) Insecure() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) bool { return v.Insecure }).(pulumi.BoolOutput)
}

// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o GetClusterKubeConfigOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.Password }).(pulumi.StringOutput)
}

// URL to the proxy to be used for all API requests
func (o GetClusterKubeConfigOutput) ProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.ProxyUrl }).(pulumi.StringOutput)
}

// Token to authenticate an service account
func (o GetClusterKubeConfigOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.Token }).(pulumi.StringOutput)
}

// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o GetClusterKubeConfigOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterKubeConfig) string { return v.Username }).(pulumi.StringOutput)
}

type GetClusterSpec struct {
	// Cluster data
	Data GetClusterSpecData `pulumi:"data"`
	// Cluster description
	Description string `pulumi:"description"`
	// If the agent is namespace scoped
	NamespaceScoped bool `pulumi:"namespaceScoped"`
}

// GetClusterSpecInput is an input type that accepts GetClusterSpecArgs and GetClusterSpecOutput values.
// You can construct a concrete instance of `GetClusterSpecInput` via:
//
//	GetClusterSpecArgs{...}
type GetClusterSpecInput interface {
	pulumi.Input

	ToGetClusterSpecOutput() GetClusterSpecOutput
	ToGetClusterSpecOutputWithContext(context.Context) GetClusterSpecOutput
}

type GetClusterSpecArgs struct {
	// Cluster data
	Data GetClusterSpecDataInput `pulumi:"data"`
	// Cluster description
	Description pulumi.StringInput `pulumi:"description"`
	// If the agent is namespace scoped
	NamespaceScoped pulumi.BoolInput `pulumi:"namespaceScoped"`
}

func (GetClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSpec)(nil)).Elem()
}

func (i GetClusterSpecArgs) ToGetClusterSpecOutput() GetClusterSpecOutput {
	return i.ToGetClusterSpecOutputWithContext(context.Background())
}

func (i GetClusterSpecArgs) ToGetClusterSpecOutputWithContext(ctx context.Context) GetClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterSpecOutput)
}

type GetClusterSpecOutput struct{ *pulumi.OutputState }

func (GetClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSpec)(nil)).Elem()
}

func (o GetClusterSpecOutput) ToGetClusterSpecOutput() GetClusterSpecOutput {
	return o
}

func (o GetClusterSpecOutput) ToGetClusterSpecOutputWithContext(ctx context.Context) GetClusterSpecOutput {
	return o
}

// Cluster data
func (o GetClusterSpecOutput) Data() GetClusterSpecDataOutput {
	return o.ApplyT(func(v GetClusterSpec) GetClusterSpecData { return v.Data }).(GetClusterSpecDataOutput)
}

// Cluster description
func (o GetClusterSpecOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSpec) string { return v.Description }).(pulumi.StringOutput)
}

// If the agent is namespace scoped
func (o GetClusterSpecOutput) NamespaceScoped() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterSpec) bool { return v.NamespaceScoped }).(pulumi.BoolOutput)
}

type GetClusterSpecData struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      bool `pulumi:"appReplication"`
	AutoUpgradeDisabled bool `pulumi:"autoUpgradeDisabled"`
	// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
	DatadogAnnotationsEnabled bool `pulumi:"datadogAnnotationsEnabled"`
	// Enable this if you are installing this cluster on EKS.
	EksAddonEnabled bool `pulumi:"eksAddonEnabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization string `pulumi:"kustomization"`
	// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
	ManagedClusterConfig GetClusterSpecDataManagedClusterConfig `pulumi:"managedClusterConfig"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling bool `pulumi:"redisTunneling"`
	// Cluster Size. One of `small`, `medium` or `large`
	Size string `pulumi:"size"`
	// The version of the agent to install on your cluster
	TargetVersion string `pulumi:"targetVersion"`
}

// GetClusterSpecDataInput is an input type that accepts GetClusterSpecDataArgs and GetClusterSpecDataOutput values.
// You can construct a concrete instance of `GetClusterSpecDataInput` via:
//
//	GetClusterSpecDataArgs{...}
type GetClusterSpecDataInput interface {
	pulumi.Input

	ToGetClusterSpecDataOutput() GetClusterSpecDataOutput
	ToGetClusterSpecDataOutputWithContext(context.Context) GetClusterSpecDataOutput
}

type GetClusterSpecDataArgs struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      pulumi.BoolInput `pulumi:"appReplication"`
	AutoUpgradeDisabled pulumi.BoolInput `pulumi:"autoUpgradeDisabled"`
	// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
	DatadogAnnotationsEnabled pulumi.BoolInput `pulumi:"datadogAnnotationsEnabled"`
	// Enable this if you are installing this cluster on EKS.
	EksAddonEnabled pulumi.BoolInput `pulumi:"eksAddonEnabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization pulumi.StringInput `pulumi:"kustomization"`
	// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
	ManagedClusterConfig GetClusterSpecDataManagedClusterConfigInput `pulumi:"managedClusterConfig"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling pulumi.BoolInput `pulumi:"redisTunneling"`
	// Cluster Size. One of `small`, `medium` or `large`
	Size pulumi.StringInput `pulumi:"size"`
	// The version of the agent to install on your cluster
	TargetVersion pulumi.StringInput `pulumi:"targetVersion"`
}

func (GetClusterSpecDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSpecData)(nil)).Elem()
}

func (i GetClusterSpecDataArgs) ToGetClusterSpecDataOutput() GetClusterSpecDataOutput {
	return i.ToGetClusterSpecDataOutputWithContext(context.Background())
}

func (i GetClusterSpecDataArgs) ToGetClusterSpecDataOutputWithContext(ctx context.Context) GetClusterSpecDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterSpecDataOutput)
}

type GetClusterSpecDataOutput struct{ *pulumi.OutputState }

func (GetClusterSpecDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSpecData)(nil)).Elem()
}

func (o GetClusterSpecDataOutput) ToGetClusterSpecDataOutput() GetClusterSpecDataOutput {
	return o
}

func (o GetClusterSpecDataOutput) ToGetClusterSpecDataOutputWithContext(ctx context.Context) GetClusterSpecDataOutput {
	return o
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o GetClusterSpecDataOutput) AppReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterSpecData) bool { return v.AppReplication }).(pulumi.BoolOutput)
}

func (o GetClusterSpecDataOutput) AutoUpgradeDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterSpecData) bool { return v.AutoUpgradeDisabled }).(pulumi.BoolOutput)
}

// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
func (o GetClusterSpecDataOutput) DatadogAnnotationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterSpecData) bool { return v.DatadogAnnotationsEnabled }).(pulumi.BoolOutput)
}

// Enable this if you are installing this cluster on EKS.
func (o GetClusterSpecDataOutput) EksAddonEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterSpecData) bool { return v.EksAddonEnabled }).(pulumi.BoolOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o GetClusterSpecDataOutput) Kustomization() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSpecData) string { return v.Kustomization }).(pulumi.StringOutput)
}

// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
func (o GetClusterSpecDataOutput) ManagedClusterConfig() GetClusterSpecDataManagedClusterConfigOutput {
	return o.ApplyT(func(v GetClusterSpecData) GetClusterSpecDataManagedClusterConfig { return v.ManagedClusterConfig }).(GetClusterSpecDataManagedClusterConfigOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o GetClusterSpecDataOutput) RedisTunneling() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterSpecData) bool { return v.RedisTunneling }).(pulumi.BoolOutput)
}

// Cluster Size. One of `small`, `medium` or `large`
func (o GetClusterSpecDataOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSpecData) string { return v.Size }).(pulumi.StringOutput)
}

// The version of the agent to install on your cluster
func (o GetClusterSpecDataOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSpecData) string { return v.TargetVersion }).(pulumi.StringOutput)
}

type GetClusterSpecDataManagedClusterConfig struct {
	// The key in the secret for the managed cluster config
	SecretKey string `pulumi:"secretKey"`
	// The name of the secret for the managed cluster config
	SecretName string `pulumi:"secretName"`
}

// GetClusterSpecDataManagedClusterConfigInput is an input type that accepts GetClusterSpecDataManagedClusterConfigArgs and GetClusterSpecDataManagedClusterConfigOutput values.
// You can construct a concrete instance of `GetClusterSpecDataManagedClusterConfigInput` via:
//
//	GetClusterSpecDataManagedClusterConfigArgs{...}
type GetClusterSpecDataManagedClusterConfigInput interface {
	pulumi.Input

	ToGetClusterSpecDataManagedClusterConfigOutput() GetClusterSpecDataManagedClusterConfigOutput
	ToGetClusterSpecDataManagedClusterConfigOutputWithContext(context.Context) GetClusterSpecDataManagedClusterConfigOutput
}

type GetClusterSpecDataManagedClusterConfigArgs struct {
	// The key in the secret for the managed cluster config
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The name of the secret for the managed cluster config
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (GetClusterSpecDataManagedClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (i GetClusterSpecDataManagedClusterConfigArgs) ToGetClusterSpecDataManagedClusterConfigOutput() GetClusterSpecDataManagedClusterConfigOutput {
	return i.ToGetClusterSpecDataManagedClusterConfigOutputWithContext(context.Background())
}

func (i GetClusterSpecDataManagedClusterConfigArgs) ToGetClusterSpecDataManagedClusterConfigOutputWithContext(ctx context.Context) GetClusterSpecDataManagedClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterSpecDataManagedClusterConfigOutput)
}

type GetClusterSpecDataManagedClusterConfigOutput struct{ *pulumi.OutputState }

func (GetClusterSpecDataManagedClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (o GetClusterSpecDataManagedClusterConfigOutput) ToGetClusterSpecDataManagedClusterConfigOutput() GetClusterSpecDataManagedClusterConfigOutput {
	return o
}

func (o GetClusterSpecDataManagedClusterConfigOutput) ToGetClusterSpecDataManagedClusterConfigOutputWithContext(ctx context.Context) GetClusterSpecDataManagedClusterConfigOutput {
	return o
}

// The key in the secret for the managed cluster config
func (o GetClusterSpecDataManagedClusterConfigOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSpecDataManagedClusterConfig) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The name of the secret for the managed cluster config
func (o GetClusterSpecDataManagedClusterConfigOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterSpecDataManagedClusterConfig) string { return v.SecretName }).(pulumi.StringOutput)
}

type GetClustersCluster struct {
	// Annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Cluster ID
	Id string `pulumi:"id"`
	// Argo CD instance ID
	InstanceId string                       `pulumi:"instanceId"`
	KubeConfig GetClustersClusterKubeConfig `pulumi:"kubeConfig"`
	// Labels
	Labels map[string]string `pulumi:"labels"`
	// Cluster name
	Name string `pulumi:"name"`
	// Agent installation namespace
	Namespace string `pulumi:"namespace"`
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster
	RemoveAgentResourcesOnDestroy bool `pulumi:"removeAgentResourcesOnDestroy"`
	// Cluster spec
	Spec GetClustersClusterSpec `pulumi:"spec"`
}

// GetClustersClusterInput is an input type that accepts GetClustersClusterArgs and GetClustersClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterInput` via:
//
//	GetClustersClusterArgs{...}
type GetClustersClusterInput interface {
	pulumi.Input

	ToGetClustersClusterOutput() GetClustersClusterOutput
	ToGetClustersClusterOutputWithContext(context.Context) GetClustersClusterOutput
}

type GetClustersClusterArgs struct {
	// Annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Cluster ID
	Id pulumi.StringInput `pulumi:"id"`
	// Argo CD instance ID
	InstanceId pulumi.StringInput                `pulumi:"instanceId"`
	KubeConfig GetClustersClusterKubeConfigInput `pulumi:"kubeConfig"`
	// Labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Cluster name
	Name pulumi.StringInput `pulumi:"name"`
	// Agent installation namespace
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster
	RemoveAgentResourcesOnDestroy pulumi.BoolInput `pulumi:"removeAgentResourcesOnDestroy"`
	// Cluster spec
	Spec GetClustersClusterSpecInput `pulumi:"spec"`
}

func (GetClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return i.ToGetClustersClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterOutput)
}

// GetClustersClusterArrayInput is an input type that accepts GetClustersClusterArray and GetClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterArrayInput` via:
//
//	GetClustersClusterArray{ GetClustersClusterArgs{...} }
type GetClustersClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput
	ToGetClustersClusterArrayOutputWithContext(context.Context) GetClustersClusterArrayOutput
}

type GetClustersClusterArray []GetClustersClusterInput

func (GetClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return i.ToGetClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterArrayOutput)
}

type GetClustersClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return o
}

// Annotations
func (o GetClustersClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClustersCluster) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Cluster ID
func (o GetClustersClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Id }).(pulumi.StringOutput)
}

// Argo CD instance ID
func (o GetClustersClusterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) KubeConfig() GetClustersClusterKubeConfigOutput {
	return o.ApplyT(func(v GetClustersCluster) GetClustersClusterKubeConfig { return v.KubeConfig }).(GetClustersClusterKubeConfigOutput)
}

// Labels
func (o GetClustersClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClustersCluster) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Cluster name
func (o GetClustersClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Name }).(pulumi.StringOutput)
}

// Agent installation namespace
func (o GetClustersClusterOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Namespace }).(pulumi.StringOutput)
}

// Remove agent Kubernetes resources from the managed cluster when destroying cluster
func (o GetClustersClusterOutput) RemoveAgentResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersCluster) bool { return v.RemoveAgentResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Cluster spec
func (o GetClustersClusterOutput) Spec() GetClustersClusterSpecOutput {
	return o.ApplyT(func(v GetClustersCluster) GetClustersClusterSpec { return v.Spec }).(GetClustersClusterSpecOutput)
}

type GetClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersCluster {
		return vs[0].([]GetClustersCluster)[vs[1].(int)]
	}).(GetClustersClusterOutput)
}

type GetClustersClusterKubeConfig struct {
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate string `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey string `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate string `pulumi:"clusterCaCertificate"`
	// Context name to load from the kube config file.
	ConfigContext         string `pulumi:"configContext"`
	ConfigContextAuthInfo string `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  string `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath string `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths []string `pulumi:"configPaths"`
	// The hostname (in form of URI) of Kubernetes master.
	Host string `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate.
	Insecure bool `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Password string `pulumi:"password"`
	// URL to the proxy to be used for all API requests
	ProxyUrl string `pulumi:"proxyUrl"`
	// Token to authenticate an service account
	Token string `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Username string `pulumi:"username"`
}

// GetClustersClusterKubeConfigInput is an input type that accepts GetClustersClusterKubeConfigArgs and GetClustersClusterKubeConfigOutput values.
// You can construct a concrete instance of `GetClustersClusterKubeConfigInput` via:
//
//	GetClustersClusterKubeConfigArgs{...}
type GetClustersClusterKubeConfigInput interface {
	pulumi.Input

	ToGetClustersClusterKubeConfigOutput() GetClustersClusterKubeConfigOutput
	ToGetClustersClusterKubeConfigOutputWithContext(context.Context) GetClustersClusterKubeConfigOutput
}

type GetClustersClusterKubeConfigArgs struct {
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate pulumi.StringInput `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate pulumi.StringInput `pulumi:"clusterCaCertificate"`
	// Context name to load from the kube config file.
	ConfigContext         pulumi.StringInput `pulumi:"configContext"`
	ConfigContextAuthInfo pulumi.StringInput `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  pulumi.StringInput `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath pulumi.StringInput `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths pulumi.StringArrayInput `pulumi:"configPaths"`
	// The hostname (in form of URI) of Kubernetes master.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate.
	Insecure pulumi.BoolInput `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Password pulumi.StringInput `pulumi:"password"`
	// URL to the proxy to be used for all API requests
	ProxyUrl pulumi.StringInput `pulumi:"proxyUrl"`
	// Token to authenticate an service account
	Token pulumi.StringInput `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetClustersClusterKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterKubeConfig)(nil)).Elem()
}

func (i GetClustersClusterKubeConfigArgs) ToGetClustersClusterKubeConfigOutput() GetClustersClusterKubeConfigOutput {
	return i.ToGetClustersClusterKubeConfigOutputWithContext(context.Background())
}

func (i GetClustersClusterKubeConfigArgs) ToGetClustersClusterKubeConfigOutputWithContext(ctx context.Context) GetClustersClusterKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterKubeConfigOutput)
}

type GetClustersClusterKubeConfigOutput struct{ *pulumi.OutputState }

func (GetClustersClusterKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterKubeConfig)(nil)).Elem()
}

func (o GetClustersClusterKubeConfigOutput) ToGetClustersClusterKubeConfigOutput() GetClustersClusterKubeConfigOutput {
	return o
}

func (o GetClustersClusterKubeConfigOutput) ToGetClustersClusterKubeConfigOutputWithContext(ctx context.Context) GetClustersClusterKubeConfigOutput {
	return o
}

// PEM-encoded client certificate for TLS authentication.
func (o GetClustersClusterKubeConfigOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// PEM-encoded client certificate key for TLS authentication.
func (o GetClustersClusterKubeConfigOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ClientKey }).(pulumi.StringOutput)
}

// PEM-encoded root certificates bundle for TLS authentication.
func (o GetClustersClusterKubeConfigOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// Context name to load from the kube config file.
func (o GetClustersClusterKubeConfigOutput) ConfigContext() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ConfigContext }).(pulumi.StringOutput)
}

func (o GetClustersClusterKubeConfigOutput) ConfigContextAuthInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ConfigContextAuthInfo }).(pulumi.StringOutput)
}

func (o GetClustersClusterKubeConfigOutput) ConfigContextCluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ConfigContextCluster }).(pulumi.StringOutput)
}

// Path to the kube config file.
func (o GetClustersClusterKubeConfigOutput) ConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ConfigPath }).(pulumi.StringOutput)
}

// A list of paths to kube config files.
func (o GetClustersClusterKubeConfigOutput) ConfigPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) []string { return v.ConfigPaths }).(pulumi.StringArrayOutput)
}

// The hostname (in form of URI) of Kubernetes master.
func (o GetClustersClusterKubeConfigOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.Host }).(pulumi.StringOutput)
}

// Whether server should be accessed without verifying the TLS certificate.
func (o GetClustersClusterKubeConfigOutput) Insecure() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) bool { return v.Insecure }).(pulumi.BoolOutput)
}

// The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o GetClustersClusterKubeConfigOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.Password }).(pulumi.StringOutput)
}

// URL to the proxy to be used for all API requests
func (o GetClustersClusterKubeConfigOutput) ProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.ProxyUrl }).(pulumi.StringOutput)
}

// Token to authenticate an service account
func (o GetClustersClusterKubeConfigOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.Token }).(pulumi.StringOutput)
}

// The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
func (o GetClustersClusterKubeConfigOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterKubeConfig) string { return v.Username }).(pulumi.StringOutput)
}

type GetClustersClusterSpec struct {
	// Cluster data
	Data GetClustersClusterSpecData `pulumi:"data"`
	// Cluster description
	Description string `pulumi:"description"`
	// If the agent is namespace scoped
	NamespaceScoped bool `pulumi:"namespaceScoped"`
}

// GetClustersClusterSpecInput is an input type that accepts GetClustersClusterSpecArgs and GetClustersClusterSpecOutput values.
// You can construct a concrete instance of `GetClustersClusterSpecInput` via:
//
//	GetClustersClusterSpecArgs{...}
type GetClustersClusterSpecInput interface {
	pulumi.Input

	ToGetClustersClusterSpecOutput() GetClustersClusterSpecOutput
	ToGetClustersClusterSpecOutputWithContext(context.Context) GetClustersClusterSpecOutput
}

type GetClustersClusterSpecArgs struct {
	// Cluster data
	Data GetClustersClusterSpecDataInput `pulumi:"data"`
	// Cluster description
	Description pulumi.StringInput `pulumi:"description"`
	// If the agent is namespace scoped
	NamespaceScoped pulumi.BoolInput `pulumi:"namespaceScoped"`
}

func (GetClustersClusterSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterSpec)(nil)).Elem()
}

func (i GetClustersClusterSpecArgs) ToGetClustersClusterSpecOutput() GetClustersClusterSpecOutput {
	return i.ToGetClustersClusterSpecOutputWithContext(context.Background())
}

func (i GetClustersClusterSpecArgs) ToGetClustersClusterSpecOutputWithContext(ctx context.Context) GetClustersClusterSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterSpecOutput)
}

type GetClustersClusterSpecOutput struct{ *pulumi.OutputState }

func (GetClustersClusterSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterSpec)(nil)).Elem()
}

func (o GetClustersClusterSpecOutput) ToGetClustersClusterSpecOutput() GetClustersClusterSpecOutput {
	return o
}

func (o GetClustersClusterSpecOutput) ToGetClustersClusterSpecOutputWithContext(ctx context.Context) GetClustersClusterSpecOutput {
	return o
}

// Cluster data
func (o GetClustersClusterSpecOutput) Data() GetClustersClusterSpecDataOutput {
	return o.ApplyT(func(v GetClustersClusterSpec) GetClustersClusterSpecData { return v.Data }).(GetClustersClusterSpecDataOutput)
}

// Cluster description
func (o GetClustersClusterSpecOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterSpec) string { return v.Description }).(pulumi.StringOutput)
}

// If the agent is namespace scoped
func (o GetClustersClusterSpecOutput) NamespaceScoped() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterSpec) bool { return v.NamespaceScoped }).(pulumi.BoolOutput)
}

type GetClustersClusterSpecData struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      bool `pulumi:"appReplication"`
	AutoUpgradeDisabled bool `pulumi:"autoUpgradeDisabled"`
	// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
	DatadogAnnotationsEnabled bool `pulumi:"datadogAnnotationsEnabled"`
	// Enable this if you are installing this cluster on EKS.
	EksAddonEnabled bool `pulumi:"eksAddonEnabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization string `pulumi:"kustomization"`
	// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
	ManagedClusterConfig GetClustersClusterSpecDataManagedClusterConfig `pulumi:"managedClusterConfig"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling bool `pulumi:"redisTunneling"`
	// Cluster Size. One of `small`, `medium` or `large`
	Size string `pulumi:"size"`
	// The version of the agent to install on your cluster
	TargetVersion string `pulumi:"targetVersion"`
}

// GetClustersClusterSpecDataInput is an input type that accepts GetClustersClusterSpecDataArgs and GetClustersClusterSpecDataOutput values.
// You can construct a concrete instance of `GetClustersClusterSpecDataInput` via:
//
//	GetClustersClusterSpecDataArgs{...}
type GetClustersClusterSpecDataInput interface {
	pulumi.Input

	ToGetClustersClusterSpecDataOutput() GetClustersClusterSpecDataOutput
	ToGetClustersClusterSpecDataOutputWithContext(context.Context) GetClustersClusterSpecDataOutput
}

type GetClustersClusterSpecDataArgs struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      pulumi.BoolInput `pulumi:"appReplication"`
	AutoUpgradeDisabled pulumi.BoolInput `pulumi:"autoUpgradeDisabled"`
	// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
	DatadogAnnotationsEnabled pulumi.BoolInput `pulumi:"datadogAnnotationsEnabled"`
	// Enable this if you are installing this cluster on EKS.
	EksAddonEnabled pulumi.BoolInput `pulumi:"eksAddonEnabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization pulumi.StringInput `pulumi:"kustomization"`
	// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
	ManagedClusterConfig GetClustersClusterSpecDataManagedClusterConfigInput `pulumi:"managedClusterConfig"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling pulumi.BoolInput `pulumi:"redisTunneling"`
	// Cluster Size. One of `small`, `medium` or `large`
	Size pulumi.StringInput `pulumi:"size"`
	// The version of the agent to install on your cluster
	TargetVersion pulumi.StringInput `pulumi:"targetVersion"`
}

func (GetClustersClusterSpecDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterSpecData)(nil)).Elem()
}

func (i GetClustersClusterSpecDataArgs) ToGetClustersClusterSpecDataOutput() GetClustersClusterSpecDataOutput {
	return i.ToGetClustersClusterSpecDataOutputWithContext(context.Background())
}

func (i GetClustersClusterSpecDataArgs) ToGetClustersClusterSpecDataOutputWithContext(ctx context.Context) GetClustersClusterSpecDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterSpecDataOutput)
}

type GetClustersClusterSpecDataOutput struct{ *pulumi.OutputState }

func (GetClustersClusterSpecDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterSpecData)(nil)).Elem()
}

func (o GetClustersClusterSpecDataOutput) ToGetClustersClusterSpecDataOutput() GetClustersClusterSpecDataOutput {
	return o
}

func (o GetClustersClusterSpecDataOutput) ToGetClustersClusterSpecDataOutputWithContext(ctx context.Context) GetClustersClusterSpecDataOutput {
	return o
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o GetClustersClusterSpecDataOutput) AppReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) bool { return v.AppReplication }).(pulumi.BoolOutput)
}

func (o GetClustersClusterSpecDataOutput) AutoUpgradeDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) bool { return v.AutoUpgradeDisabled }).(pulumi.BoolOutput)
}

// Enable Datadog metrics collection of Application Controller and Repo Server. Make sure that you install Datadog agent in cluster.
func (o GetClustersClusterSpecDataOutput) DatadogAnnotationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) bool { return v.DatadogAnnotationsEnabled }).(pulumi.BoolOutput)
}

// Enable this if you are installing this cluster on EKS.
func (o GetClustersClusterSpecDataOutput) EksAddonEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) bool { return v.EksAddonEnabled }).(pulumi.BoolOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o GetClustersClusterSpecDataOutput) Kustomization() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) string { return v.Kustomization }).(pulumi.StringOutput)
}

// The config to access managed Kubernetes cluster. By default agent is using "in-cluster" config.
func (o GetClustersClusterSpecDataOutput) ManagedClusterConfig() GetClustersClusterSpecDataManagedClusterConfigOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) GetClustersClusterSpecDataManagedClusterConfig {
		return v.ManagedClusterConfig
	}).(GetClustersClusterSpecDataManagedClusterConfigOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o GetClustersClusterSpecDataOutput) RedisTunneling() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) bool { return v.RedisTunneling }).(pulumi.BoolOutput)
}

// Cluster Size. One of `small`, `medium` or `large`
func (o GetClustersClusterSpecDataOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) string { return v.Size }).(pulumi.StringOutput)
}

// The version of the agent to install on your cluster
func (o GetClustersClusterSpecDataOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterSpecData) string { return v.TargetVersion }).(pulumi.StringOutput)
}

type GetClustersClusterSpecDataManagedClusterConfig struct {
	// The key in the secret for the managed cluster config
	SecretKey string `pulumi:"secretKey"`
	// The name of the secret for the managed cluster config
	SecretName string `pulumi:"secretName"`
}

// GetClustersClusterSpecDataManagedClusterConfigInput is an input type that accepts GetClustersClusterSpecDataManagedClusterConfigArgs and GetClustersClusterSpecDataManagedClusterConfigOutput values.
// You can construct a concrete instance of `GetClustersClusterSpecDataManagedClusterConfigInput` via:
//
//	GetClustersClusterSpecDataManagedClusterConfigArgs{...}
type GetClustersClusterSpecDataManagedClusterConfigInput interface {
	pulumi.Input

	ToGetClustersClusterSpecDataManagedClusterConfigOutput() GetClustersClusterSpecDataManagedClusterConfigOutput
	ToGetClustersClusterSpecDataManagedClusterConfigOutputWithContext(context.Context) GetClustersClusterSpecDataManagedClusterConfigOutput
}

type GetClustersClusterSpecDataManagedClusterConfigArgs struct {
	// The key in the secret for the managed cluster config
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The name of the secret for the managed cluster config
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (GetClustersClusterSpecDataManagedClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (i GetClustersClusterSpecDataManagedClusterConfigArgs) ToGetClustersClusterSpecDataManagedClusterConfigOutput() GetClustersClusterSpecDataManagedClusterConfigOutput {
	return i.ToGetClustersClusterSpecDataManagedClusterConfigOutputWithContext(context.Background())
}

func (i GetClustersClusterSpecDataManagedClusterConfigArgs) ToGetClustersClusterSpecDataManagedClusterConfigOutputWithContext(ctx context.Context) GetClustersClusterSpecDataManagedClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterSpecDataManagedClusterConfigOutput)
}

type GetClustersClusterSpecDataManagedClusterConfigOutput struct{ *pulumi.OutputState }

func (GetClustersClusterSpecDataManagedClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterSpecDataManagedClusterConfig)(nil)).Elem()
}

func (o GetClustersClusterSpecDataManagedClusterConfigOutput) ToGetClustersClusterSpecDataManagedClusterConfigOutput() GetClustersClusterSpecDataManagedClusterConfigOutput {
	return o
}

func (o GetClustersClusterSpecDataManagedClusterConfigOutput) ToGetClustersClusterSpecDataManagedClusterConfigOutputWithContext(ctx context.Context) GetClustersClusterSpecDataManagedClusterConfigOutput {
	return o
}

// The key in the secret for the managed cluster config
func (o GetClustersClusterSpecDataManagedClusterConfigOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterSpecDataManagedClusterConfig) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The name of the secret for the managed cluster config
func (o GetClustersClusterSpecDataManagedClusterConfigOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterSpecDataManagedClusterConfig) string { return v.SecretName }).(pulumi.StringOutput)
}

type GetInstanceArgocd struct {
	// Argo CD instance spec
	Spec GetInstanceArgocdSpec `pulumi:"spec"`
}

// GetInstanceArgocdInput is an input type that accepts GetInstanceArgocdArgs and GetInstanceArgocdOutput values.
// You can construct a concrete instance of `GetInstanceArgocdInput` via:
//
//	GetInstanceArgocdArgs{...}
type GetInstanceArgocdInput interface {
	pulumi.Input

	ToGetInstanceArgocdOutput() GetInstanceArgocdOutput
	ToGetInstanceArgocdOutputWithContext(context.Context) GetInstanceArgocdOutput
}

type GetInstanceArgocdArgs struct {
	// Argo CD instance spec
	Spec GetInstanceArgocdSpecInput `pulumi:"spec"`
}

func (GetInstanceArgocdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocd)(nil)).Elem()
}

func (i GetInstanceArgocdArgs) ToGetInstanceArgocdOutput() GetInstanceArgocdOutput {
	return i.ToGetInstanceArgocdOutputWithContext(context.Background())
}

func (i GetInstanceArgocdArgs) ToGetInstanceArgocdOutputWithContext(ctx context.Context) GetInstanceArgocdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdOutput)
}

type GetInstanceArgocdOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocd)(nil)).Elem()
}

func (o GetInstanceArgocdOutput) ToGetInstanceArgocdOutput() GetInstanceArgocdOutput {
	return o
}

func (o GetInstanceArgocdOutput) ToGetInstanceArgocdOutputWithContext(ctx context.Context) GetInstanceArgocdOutput {
	return o
}

// Argo CD instance spec
func (o GetInstanceArgocdOutput) Spec() GetInstanceArgocdSpecOutput {
	return o.ApplyT(func(v GetInstanceArgocd) GetInstanceArgocdSpec { return v.Spec }).(GetInstanceArgocdSpecOutput)
}

type GetInstanceArgocdSpec struct {
	// Instance description
	Description string `pulumi:"description"`
	// Argo CD instance spec
	InstanceSpec GetInstanceArgocdSpecInstanceSpec `pulumi:"instanceSpec"`
	// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
	Version string `pulumi:"version"`
}

// GetInstanceArgocdSpecInput is an input type that accepts GetInstanceArgocdSpecArgs and GetInstanceArgocdSpecOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInput` via:
//
//	GetInstanceArgocdSpecArgs{...}
type GetInstanceArgocdSpecInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecOutput() GetInstanceArgocdSpecOutput
	ToGetInstanceArgocdSpecOutputWithContext(context.Context) GetInstanceArgocdSpecOutput
}

type GetInstanceArgocdSpecArgs struct {
	// Instance description
	Description pulumi.StringInput `pulumi:"description"`
	// Argo CD instance spec
	InstanceSpec GetInstanceArgocdSpecInstanceSpecInput `pulumi:"instanceSpec"`
	// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetInstanceArgocdSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpec)(nil)).Elem()
}

func (i GetInstanceArgocdSpecArgs) ToGetInstanceArgocdSpecOutput() GetInstanceArgocdSpecOutput {
	return i.ToGetInstanceArgocdSpecOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecArgs) ToGetInstanceArgocdSpecOutputWithContext(ctx context.Context) GetInstanceArgocdSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecOutput)
}

type GetInstanceArgocdSpecOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpec)(nil)).Elem()
}

func (o GetInstanceArgocdSpecOutput) ToGetInstanceArgocdSpecOutput() GetInstanceArgocdSpecOutput {
	return o
}

func (o GetInstanceArgocdSpecOutput) ToGetInstanceArgocdSpecOutputWithContext(ctx context.Context) GetInstanceArgocdSpecOutput {
	return o
}

// Instance description
func (o GetInstanceArgocdSpecOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpec) string { return v.Description }).(pulumi.StringOutput)
}

// Argo CD instance spec
func (o GetInstanceArgocdSpecOutput) InstanceSpec() GetInstanceArgocdSpecInstanceSpecOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpec) GetInstanceArgocdSpecInstanceSpec { return v.InstanceSpec }).(GetInstanceArgocdSpecInstanceSpecOutput)
}

// Argo CD version. Should be equal to any Akuity [`argocd` image tag](https://quay.io/repository/akuity/argocd?tab=tags).
func (o GetInstanceArgocdSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpec) string { return v.Version }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpec struct {
	// The ability to configure agent permissions rules.
	AgentPermissionsRules []GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule `pulumi:"agentPermissionsRules"`
	// Select cluster in which you want to Install Application Set controller
	AppSetDelegate GetInstanceArgocdSpecInstanceSpecAppSetDelegate `pulumi:"appSetDelegate"`
	// Configures Application Set policy settings.
	AppsetPolicy GetInstanceArgocdSpecInstanceSpecAppsetPolicy `pulumi:"appsetPolicy"`
	// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
	AssistantExtensionEnabled bool `pulumi:"assistantExtensionEnabled"`
	// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
	AuditExtensionEnabled bool `pulumi:"auditExtensionEnabled"`
	// Enable ip allow list for cluster agents
	BackendIpAllowListEnabled bool `pulumi:"backendIpAllowListEnabled"`
	// Default values for cluster agents
	ClusterCustomizationDefaults GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults `pulumi:"clusterCustomizationDefaults"`
	// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
	CrossplaneExtension GetInstanceArgocdSpecInstanceSpecCrossplaneExtension `pulumi:"crossplaneExtension"`
	// Enable Declarative Management
	DeclarativeManagementEnabled bool `pulumi:"declarativeManagementEnabled"`
	// Extensions
	Extensions []GetInstanceArgocdSpecInstanceSpecExtension `pulumi:"extensions"`
	// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
	Fqdn string `pulumi:"fqdn"`
	// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
	HostAliases []GetInstanceArgocdSpecInstanceSpecHostAlias `pulumi:"hostAliases"`
	// Select cluster in which you want to Install Image Updater
	ImageUpdaterDelegate GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate `pulumi:"imageUpdaterDelegate"`
	// Enable Image Updater
	ImageUpdaterEnabled bool `pulumi:"imageUpdaterEnabled"`
	// IP allow list
	IpAllowLists []GetInstanceArgocdSpecInstanceSpecIpAllowList `pulumi:"ipAllowLists"`
	// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
	RepoServerDelegate GetInstanceArgocdSpecInstanceSpecRepoServerDelegate `pulumi:"repoServerDelegate"`
	// Instance subdomain. By default equals to instance id
	Subdomain string `pulumi:"subdomain"`
	// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
	SyncHistoryExtensionEnabled bool `pulumi:"syncHistoryExtensionEnabled"`
}

// GetInstanceArgocdSpecInstanceSpecInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecArgs and GetInstanceArgocdSpecInstanceSpecOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecArgs{...}
type GetInstanceArgocdSpecInstanceSpecInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecOutput() GetInstanceArgocdSpecInstanceSpecOutput
	ToGetInstanceArgocdSpecInstanceSpecOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecOutput
}

type GetInstanceArgocdSpecInstanceSpecArgs struct {
	// The ability to configure agent permissions rules.
	AgentPermissionsRules GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput `pulumi:"agentPermissionsRules"`
	// Select cluster in which you want to Install Application Set controller
	AppSetDelegate GetInstanceArgocdSpecInstanceSpecAppSetDelegateInput `pulumi:"appSetDelegate"`
	// Configures Application Set policy settings.
	AppsetPolicy GetInstanceArgocdSpecInstanceSpecAppsetPolicyInput `pulumi:"appsetPolicy"`
	// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
	AssistantExtensionEnabled pulumi.BoolInput `pulumi:"assistantExtensionEnabled"`
	// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
	AuditExtensionEnabled pulumi.BoolInput `pulumi:"auditExtensionEnabled"`
	// Enable ip allow list for cluster agents
	BackendIpAllowListEnabled pulumi.BoolInput `pulumi:"backendIpAllowListEnabled"`
	// Default values for cluster agents
	ClusterCustomizationDefaults GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput `pulumi:"clusterCustomizationDefaults"`
	// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
	CrossplaneExtension GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionInput `pulumi:"crossplaneExtension"`
	// Enable Declarative Management
	DeclarativeManagementEnabled pulumi.BoolInput `pulumi:"declarativeManagementEnabled"`
	// Extensions
	Extensions GetInstanceArgocdSpecInstanceSpecExtensionArrayInput `pulumi:"extensions"`
	// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
	HostAliases GetInstanceArgocdSpecInstanceSpecHostAliasArrayInput `pulumi:"hostAliases"`
	// Select cluster in which you want to Install Image Updater
	ImageUpdaterDelegate GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput `pulumi:"imageUpdaterDelegate"`
	// Enable Image Updater
	ImageUpdaterEnabled pulumi.BoolInput `pulumi:"imageUpdaterEnabled"`
	// IP allow list
	IpAllowLists GetInstanceArgocdSpecInstanceSpecIpAllowListArrayInput `pulumi:"ipAllowLists"`
	// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
	RepoServerDelegate GetInstanceArgocdSpecInstanceSpecRepoServerDelegateInput `pulumi:"repoServerDelegate"`
	// Instance subdomain. By default equals to instance id
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
	SyncHistoryExtensionEnabled pulumi.BoolInput `pulumi:"syncHistoryExtensionEnabled"`
}

func (GetInstanceArgocdSpecInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpec)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecArgs) ToGetInstanceArgocdSpecInstanceSpecOutput() GetInstanceArgocdSpecInstanceSpecOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecArgs) ToGetInstanceArgocdSpecInstanceSpecOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecOutput)
}

type GetInstanceArgocdSpecInstanceSpecOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpec)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecOutput) ToGetInstanceArgocdSpecInstanceSpecOutput() GetInstanceArgocdSpecInstanceSpecOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecOutput) ToGetInstanceArgocdSpecInstanceSpecOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecOutput {
	return o
}

// The ability to configure agent permissions rules.
func (o GetInstanceArgocdSpecInstanceSpecOutput) AgentPermissionsRules() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) []GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule {
		return v.AgentPermissionsRules
	}).(GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput)
}

// Select cluster in which you want to Install Application Set controller
func (o GetInstanceArgocdSpecInstanceSpecOutput) AppSetDelegate() GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) GetInstanceArgocdSpecInstanceSpecAppSetDelegate {
		return v.AppSetDelegate
	}).(GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput)
}

// Configures Application Set policy settings.
func (o GetInstanceArgocdSpecInstanceSpecOutput) AppsetPolicy() GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) GetInstanceArgocdSpecInstanceSpecAppsetPolicy {
		return v.AppsetPolicy
	}).(GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput)
}

// Enable Powerful AI-powered assistant Extension. It helps analyze Kubernetes resources behavior and provides suggestions about resolving issues.
func (o GetInstanceArgocdSpecInstanceSpecOutput) AssistantExtensionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) bool { return v.AssistantExtensionEnabled }).(pulumi.BoolOutput)
}

// Enable Audit Extension. Set this to `true` to install Audit Extension to Argo CD instance.
func (o GetInstanceArgocdSpecInstanceSpecOutput) AuditExtensionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) bool { return v.AuditExtensionEnabled }).(pulumi.BoolOutput)
}

// Enable ip allow list for cluster agents
func (o GetInstanceArgocdSpecInstanceSpecOutput) BackendIpAllowListEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) bool { return v.BackendIpAllowListEnabled }).(pulumi.BoolOutput)
}

// Default values for cluster agents
func (o GetInstanceArgocdSpecInstanceSpecOutput) ClusterCustomizationDefaults() GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults {
		return v.ClusterCustomizationDefaults
	}).(GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput)
}

// Custom Resource Definition group name that identifies the Crossplane resource in kubernetes. We will include built-in crossplane resources. Note that you can use glob pattern to match the group. ie. *.crossplane.io
func (o GetInstanceArgocdSpecInstanceSpecOutput) CrossplaneExtension() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) GetInstanceArgocdSpecInstanceSpecCrossplaneExtension {
		return v.CrossplaneExtension
	}).(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput)
}

// Enable Declarative Management
func (o GetInstanceArgocdSpecInstanceSpecOutput) DeclarativeManagementEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) bool { return v.DeclarativeManagementEnabled }).(pulumi.BoolOutput)
}

// Extensions
func (o GetInstanceArgocdSpecInstanceSpecOutput) Extensions() GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) []GetInstanceArgocdSpecInstanceSpecExtension {
		return v.Extensions
	}).(GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput)
}

// Configures the FQDN for the argocd instance, for ingress URL, domain suffix, etc.
func (o GetInstanceArgocdSpecInstanceSpecOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Host Aliases that override the DNS entries for control plane Argo CD components such as API Server and Dex.
func (o GetInstanceArgocdSpecInstanceSpecOutput) HostAliases() GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) []GetInstanceArgocdSpecInstanceSpecHostAlias {
		return v.HostAliases
	}).(GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput)
}

// Select cluster in which you want to Install Image Updater
func (o GetInstanceArgocdSpecInstanceSpecOutput) ImageUpdaterDelegate() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate {
		return v.ImageUpdaterDelegate
	}).(GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput)
}

// Enable Image Updater
func (o GetInstanceArgocdSpecInstanceSpecOutput) ImageUpdaterEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) bool { return v.ImageUpdaterEnabled }).(pulumi.BoolOutput)
}

// IP allow list
func (o GetInstanceArgocdSpecInstanceSpecOutput) IpAllowLists() GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) []GetInstanceArgocdSpecInstanceSpecIpAllowList {
		return v.IpAllowLists
	}).(GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput)
}

// In case some clusters don't have network access to your private Git provider you can delegate these operations to one specific cluster.
func (o GetInstanceArgocdSpecInstanceSpecOutput) RepoServerDelegate() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) GetInstanceArgocdSpecInstanceSpecRepoServerDelegate {
		return v.RepoServerDelegate
	}).(GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput)
}

// Instance subdomain. By default equals to instance id
func (o GetInstanceArgocdSpecInstanceSpecOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Enable Sync History Extension. Sync count and duration graphs as well as event details table on Argo CD application details page.
func (o GetInstanceArgocdSpecInstanceSpecOutput) SyncHistoryExtensionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpec) bool { return v.SyncHistoryExtensionEnabled }).(pulumi.BoolOutput)
}

type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule struct {
	// API groups of the rule.
	ApiGroups []string `pulumi:"apiGroups"`
	// Resources of the rule.
	Resources []string `pulumi:"resources"`
	// Verbs of the rule.
	Verbs []string `pulumi:"verbs"`
}

// GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs and GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs{...}
type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput
	ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput
}

type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs struct {
	// API groups of the rule.
	ApiGroups pulumi.StringArrayInput `pulumi:"apiGroups"`
	// Resources of the rule.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// Verbs of the rule.
	Verbs pulumi.StringArrayInput `pulumi:"verbs"`
}

func (GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput)
}

// GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray and GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray{ GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs{...} }
type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput
	ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput
}

type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray []GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput

func (GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return o
}

// API groups of the rule.
func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) ApiGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule) []string { return v.ApiGroups }).(pulumi.StringArrayOutput)
}

// Resources of the rule.
func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// Verbs of the rule.
func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput) Verbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule) []string { return v.Verbs }).(pulumi.StringArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput() GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) ToGetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput) Index(i pulumi.IntInput) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule {
		return vs[0].([]GetInstanceArgocdSpecInstanceSpecAgentPermissionsRule)[vs[1].(int)]
	}).(GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput)
}

type GetInstanceArgocdSpecInstanceSpecAppSetDelegate struct {
	// Use managed cluster
	ManagedCluster GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster `pulumi:"managedCluster"`
}

// GetInstanceArgocdSpecInstanceSpecAppSetDelegateInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs and GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecAppSetDelegateInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs{...}
type GetInstanceArgocdSpecInstanceSpecAppSetDelegateInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput() GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput
	ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput
}

type GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs struct {
	// Use managed cluster
	ManagedCluster GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput `pulumi:"managedCluster"`
}

func (GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppSetDelegate)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput() GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput)
}

type GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppSetDelegate)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput() GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput {
	return o
}

// Use managed cluster
func (o GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput) ManagedCluster() GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAppSetDelegate) GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster {
		return v.ManagedCluster
	}).(GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput)
}

type GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster struct {
	// Cluster name
	ClusterName string `pulumi:"clusterName"`
}

// GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs and GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs{...}
type GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput
	ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput
}

type GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs struct {
	// Cluster name
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput)
}

type GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ToGetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput {
	return o
}

// Cluster name
func (o GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecAppsetPolicy struct {
	// Allows per `ApplicationSet` sync policy.
	OverridePolicy bool `pulumi:"overridePolicy"`
	// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
	// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
	//   - Policy `sync`(default): Update and delete are allowed.
	//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
	//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
	//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
	Policy string `pulumi:"policy"`
}

// GetInstanceArgocdSpecInstanceSpecAppsetPolicyInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs and GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecAppsetPolicyInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs{...}
type GetInstanceArgocdSpecInstanceSpecAppsetPolicyInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput() GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput
	ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput
}

type GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs struct {
	// Allows per `ApplicationSet` sync policy.
	OverridePolicy pulumi.BoolInput `pulumi:"overridePolicy"`
	// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
	// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
	//   - Policy `sync`(default): Update and delete are allowed.
	//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
	//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
	//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
	Policy pulumi.StringInput `pulumi:"policy"`
}

func (GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppsetPolicy)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput() GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs) ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput)
}

type GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppsetPolicy)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput() GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput) ToGetInstanceArgocdSpecInstanceSpecAppsetPolicyOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput {
	return o
}

// Allows per `ApplicationSet` sync policy.
func (o GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput) OverridePolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAppsetPolicy) bool { return v.OverridePolicy }).(pulumi.BoolOutput)
}

// Policy restricts what types of modifications will be made to managed Argo CD `Application` resources.
// Available options: `sync`, `create-only`, `create-delete`, and `create-update`.
//   - Policy `sync`(default): Update and delete are allowed.
//   - Policy `create-only`: Prevents ApplicationSet controller from modifying or deleting Applications.
//   - Policy `create-update`: Prevents ApplicationSet controller from deleting Applications. Update is allowed.
//   - Policy `create-delete`: Prevents ApplicationSet controller from modifying Applications, Delete is allowed.
func (o GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecAppsetPolicy) string { return v.Policy }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      bool `pulumi:"appReplication"`
	AutoUpgradeDisabled bool `pulumi:"autoUpgradeDisabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization string `pulumi:"kustomization"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling bool `pulumi:"redisTunneling"`
}

// GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs and GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs{...}
type GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput() GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput
	ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput
}

type GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs struct {
	// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
	AppReplication      pulumi.BoolInput `pulumi:"appReplication"`
	AutoUpgradeDisabled pulumi.BoolInput `pulumi:"autoUpgradeDisabled"`
	// Kustomize configuration that will be applied to generated agent installation manifests
	Kustomization pulumi.StringInput `pulumi:"kustomization"`
	// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
	RedisTunneling pulumi.BoolInput `pulumi:"redisTunneling"`
}

func (GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput() GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs) ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput)
}

type GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput() GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) ToGetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput {
	return o
}

// Enables Argo CD state replication to the managed cluster that allows disconnecting the cluster from Akuity Platform without losing core Argocd features
func (o GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) AppReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) bool { return v.AppReplication }).(pulumi.BoolOutput)
}

func (o GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) AutoUpgradeDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) bool {
		return v.AutoUpgradeDisabled
	}).(pulumi.BoolOutput)
}

// Kustomize configuration that will be applied to generated agent installation manifests
func (o GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) Kustomization() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) string { return v.Kustomization }).(pulumi.StringOutput)
}

// Enables the ability to connect to Redis over a web-socket tunnel that allows using Akuity agent behind HTTPS proxy
func (o GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput) RedisTunneling() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaults) bool { return v.RedisTunneling }).(pulumi.BoolOutput)
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtension struct {
	// Glob patterns of the resources to match.
	Resources []GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource `pulumi:"resources"`
}

// GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs and GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs{...}
type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput
	ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs struct {
	// Glob patterns of the resources to match.
	Resources GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput `pulumi:"resources"`
}

func (GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtension)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput)
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtension)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput {
	return o
}

// Glob patterns of the resources to match.
func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput) Resources() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecCrossplaneExtension) []GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource {
		return v.Resources
	}).(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource struct {
	// Glob pattern of the group to match.
	Group string `pulumi:"group"`
}

// GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs and GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs{...}
type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput
	ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs struct {
	// Glob pattern of the group to match.
	Group pulumi.StringInput `pulumi:"group"`
}

func (GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput)
}

// GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray and GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray{ GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs{...} }
type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput
	ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray []GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput

func (GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return o
}

// Glob pattern of the group to match.
func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource) string { return v.Group }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput() GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) ToGetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput) Index(i pulumi.IntInput) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource {
		return vs[0].([]GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResource)[vs[1].(int)]
	}).(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput)
}

type GetInstanceArgocdSpecInstanceSpecExtension struct {
	// Extension ID
	Id string `pulumi:"id"`
	// Extension version
	Version string `pulumi:"version"`
}

// GetInstanceArgocdSpecInstanceSpecExtensionInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecExtensionArgs and GetInstanceArgocdSpecInstanceSpecExtensionOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecExtensionInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecExtensionArgs{...}
type GetInstanceArgocdSpecInstanceSpecExtensionInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecExtensionOutput() GetInstanceArgocdSpecInstanceSpecExtensionOutput
	ToGetInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecExtensionOutput
}

type GetInstanceArgocdSpecInstanceSpecExtensionArgs struct {
	// Extension ID
	Id pulumi.StringInput `pulumi:"id"`
	// Extension version
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetInstanceArgocdSpecInstanceSpecExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecExtensionArgs) ToGetInstanceArgocdSpecInstanceSpecExtensionOutput() GetInstanceArgocdSpecInstanceSpecExtensionOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecExtensionArgs) ToGetInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecExtensionOutput)
}

// GetInstanceArgocdSpecInstanceSpecExtensionArrayInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecExtensionArray and GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecExtensionArrayInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecExtensionArray{ GetInstanceArgocdSpecInstanceSpecExtensionArgs{...} }
type GetInstanceArgocdSpecInstanceSpecExtensionArrayInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutput() GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput
	ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput
}

type GetInstanceArgocdSpecInstanceSpecExtensionArray []GetInstanceArgocdSpecInstanceSpecExtensionInput

func (GetInstanceArgocdSpecInstanceSpecExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecExtensionArray) ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutput() GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecExtensionArray) ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecExtensionOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecExtensionOutput) ToGetInstanceArgocdSpecInstanceSpecExtensionOutput() GetInstanceArgocdSpecInstanceSpecExtensionOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecExtensionOutput) ToGetInstanceArgocdSpecInstanceSpecExtensionOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecExtensionOutput {
	return o
}

// Extension ID
func (o GetInstanceArgocdSpecInstanceSpecExtensionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecExtension) string { return v.Id }).(pulumi.StringOutput)
}

// Extension version
func (o GetInstanceArgocdSpecInstanceSpecExtensionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecExtension) string { return v.Version }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecExtension)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput) ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutput() GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput) ToGetInstanceArgocdSpecInstanceSpecExtensionArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput) Index(i pulumi.IntInput) GetInstanceArgocdSpecInstanceSpecExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceArgocdSpecInstanceSpecExtension {
		return vs[0].([]GetInstanceArgocdSpecInstanceSpecExtension)[vs[1].(int)]
	}).(GetInstanceArgocdSpecInstanceSpecExtensionOutput)
}

type GetInstanceArgocdSpecInstanceSpecHostAlias struct {
	// Hostnames
	Hostnames []string `pulumi:"hostnames"`
	// IP address
	Ip string `pulumi:"ip"`
}

// GetInstanceArgocdSpecInstanceSpecHostAliasInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecHostAliasArgs and GetInstanceArgocdSpecInstanceSpecHostAliasOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecHostAliasInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecHostAliasArgs{...}
type GetInstanceArgocdSpecInstanceSpecHostAliasInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecHostAliasOutput() GetInstanceArgocdSpecInstanceSpecHostAliasOutput
	ToGetInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecHostAliasOutput
}

type GetInstanceArgocdSpecInstanceSpecHostAliasArgs struct {
	// Hostnames
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// IP address
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetInstanceArgocdSpecInstanceSpecHostAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecHostAliasArgs) ToGetInstanceArgocdSpecInstanceSpecHostAliasOutput() GetInstanceArgocdSpecInstanceSpecHostAliasOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecHostAliasArgs) ToGetInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecHostAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecHostAliasOutput)
}

// GetInstanceArgocdSpecInstanceSpecHostAliasArrayInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecHostAliasArray and GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecHostAliasArrayInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecHostAliasArray{ GetInstanceArgocdSpecInstanceSpecHostAliasArgs{...} }
type GetInstanceArgocdSpecInstanceSpecHostAliasArrayInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput() GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput
	ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput
}

type GetInstanceArgocdSpecInstanceSpecHostAliasArray []GetInstanceArgocdSpecInstanceSpecHostAliasInput

func (GetInstanceArgocdSpecInstanceSpecHostAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecHostAliasArray) ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput() GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecHostAliasArray) ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecHostAliasOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecHostAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecHostAliasOutput) ToGetInstanceArgocdSpecInstanceSpecHostAliasOutput() GetInstanceArgocdSpecInstanceSpecHostAliasOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecHostAliasOutput) ToGetInstanceArgocdSpecInstanceSpecHostAliasOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecHostAliasOutput {
	return o
}

// Hostnames
func (o GetInstanceArgocdSpecInstanceSpecHostAliasOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecHostAlias) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// IP address
func (o GetInstanceArgocdSpecInstanceSpecHostAliasOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecHostAlias) string { return v.Ip }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecHostAlias)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput) ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput() GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput) ToGetInstanceArgocdSpecInstanceSpecHostAliasArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput) Index(i pulumi.IntInput) GetInstanceArgocdSpecInstanceSpecHostAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceArgocdSpecInstanceSpecHostAlias {
		return vs[0].([]GetInstanceArgocdSpecInstanceSpecHostAlias)[vs[1].(int)]
	}).(GetInstanceArgocdSpecInstanceSpecHostAliasOutput)
}

type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate struct {
	// If use control plane or not
	ControlPlane bool `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster `pulumi:"managedCluster"`
}

// GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs and GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs{...}
type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput
	ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput
}

type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs struct {
	// If use control plane or not
	ControlPlane pulumi.BoolInput `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput `pulumi:"managedCluster"`
}

func (GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput)
}

type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput {
	return o
}

// If use control plane or not
func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ControlPlane() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate) bool { return v.ControlPlane }).(pulumi.BoolOutput)
}

// If use managed cluster or not
func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput) ManagedCluster() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegate) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster {
		return v.ManagedCluster
	}).(GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput)
}

type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster struct {
	// Cluster name
	ClusterName string `pulumi:"clusterName"`
}

// GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs and GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs{...}
type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput
	ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput
}

type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs struct {
	// Cluster name
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput)
}

type GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ToGetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput {
	return o
}

// Cluster name
func (o GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedCluster) string {
		return v.ClusterName
	}).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecIpAllowList struct {
	// IP description
	Description string `pulumi:"description"`
	// IP address
	Ip string `pulumi:"ip"`
}

// GetInstanceArgocdSpecInstanceSpecIpAllowListInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecIpAllowListArgs and GetInstanceArgocdSpecInstanceSpecIpAllowListOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecIpAllowListInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecIpAllowListArgs{...}
type GetInstanceArgocdSpecInstanceSpecIpAllowListInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutput() GetInstanceArgocdSpecInstanceSpecIpAllowListOutput
	ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecIpAllowListOutput
}

type GetInstanceArgocdSpecInstanceSpecIpAllowListArgs struct {
	// IP description
	Description pulumi.StringInput `pulumi:"description"`
	// IP address
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (GetInstanceArgocdSpecInstanceSpecIpAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecIpAllowListArgs) ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutput() GetInstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecIpAllowListArgs) ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecIpAllowListOutput)
}

// GetInstanceArgocdSpecInstanceSpecIpAllowListArrayInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecIpAllowListArray and GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecIpAllowListArrayInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecIpAllowListArray{ GetInstanceArgocdSpecInstanceSpecIpAllowListArgs{...} }
type GetInstanceArgocdSpecInstanceSpecIpAllowListArrayInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput() GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput
	ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput
}

type GetInstanceArgocdSpecInstanceSpecIpAllowListArray []GetInstanceArgocdSpecInstanceSpecIpAllowListInput

func (GetInstanceArgocdSpecInstanceSpecIpAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecIpAllowListArray) ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput() GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecIpAllowListArray) ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput)
}

type GetInstanceArgocdSpecInstanceSpecIpAllowListOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecIpAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecIpAllowListOutput) ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutput() GetInstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecIpAllowListOutput) ToGetInstanceArgocdSpecInstanceSpecIpAllowListOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return o
}

// IP description
func (o GetInstanceArgocdSpecInstanceSpecIpAllowListOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecIpAllowList) string { return v.Description }).(pulumi.StringOutput)
}

// IP address
func (o GetInstanceArgocdSpecInstanceSpecIpAllowListOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecIpAllowList) string { return v.Ip }).(pulumi.StringOutput)
}

type GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceArgocdSpecInstanceSpecIpAllowList)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput() GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) ToGetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput) Index(i pulumi.IntInput) GetInstanceArgocdSpecInstanceSpecIpAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceArgocdSpecInstanceSpecIpAllowList {
		return vs[0].([]GetInstanceArgocdSpecInstanceSpecIpAllowList)[vs[1].(int)]
	}).(GetInstanceArgocdSpecInstanceSpecIpAllowListOutput)
}

type GetInstanceArgocdSpecInstanceSpecRepoServerDelegate struct {
	// If use control plane or not
	ControlPlane bool `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster `pulumi:"managedCluster"`
}

// GetInstanceArgocdSpecInstanceSpecRepoServerDelegateInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs and GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecRepoServerDelegateInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs{...}
type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput
	ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput
}

type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs struct {
	// If use control plane or not
	ControlPlane pulumi.BoolInput `pulumi:"controlPlane"`
	// If use managed cluster or not
	ManagedCluster GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput `pulumi:"managedCluster"`
}

func (GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecRepoServerDelegate)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput)
}

type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecRepoServerDelegate)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput {
	return o
}

// If use control plane or not
func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ControlPlane() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecRepoServerDelegate) bool { return v.ControlPlane }).(pulumi.BoolOutput)
}

// If use managed cluster or not
func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput) ManagedCluster() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecRepoServerDelegate) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster {
		return v.ManagedCluster
	}).(GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput)
}

type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster struct {
	// Cluster name
	ClusterName string `pulumi:"clusterName"`
}

// GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput is an input type that accepts GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs and GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput values.
// You can construct a concrete instance of `GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput` via:
//
//	GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs{...}
type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput interface {
	pulumi.Input

	ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput
	ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(context.Context) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput
}

type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs struct {
	// Cluster name
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster)(nil)).Elem()
}

func (i GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return i.ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(context.Background())
}

func (i GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput)
}

type GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput struct{ *pulumi.OutputState }

func (GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster)(nil)).Elem()
}

func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput() GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return o
}

func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ToGetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutputWithContext(ctx context.Context) GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput {
	return o
}

// Cluster name
func (o GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

type GetInstanceConfigManagementPlugins struct {
	// Whether this plugin is enabled or not. Default to false.
	Enabled bool `pulumi:"enabled"`
	// Image to use for the plugin
	Image string `pulumi:"image"`
	// Plugin spec
	Spec GetInstanceConfigManagementPluginsSpec `pulumi:"spec"`
}

// GetInstanceConfigManagementPluginsInput is an input type that accepts GetInstanceConfigManagementPluginsArgs and GetInstanceConfigManagementPluginsOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsInput` via:
//
//	GetInstanceConfigManagementPluginsArgs{...}
type GetInstanceConfigManagementPluginsInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsOutput() GetInstanceConfigManagementPluginsOutput
	ToGetInstanceConfigManagementPluginsOutputWithContext(context.Context) GetInstanceConfigManagementPluginsOutput
}

type GetInstanceConfigManagementPluginsArgs struct {
	// Whether this plugin is enabled or not. Default to false.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Image to use for the plugin
	Image pulumi.StringInput `pulumi:"image"`
	// Plugin spec
	Spec GetInstanceConfigManagementPluginsSpecInput `pulumi:"spec"`
}

func (GetInstanceConfigManagementPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPlugins)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsArgs) ToGetInstanceConfigManagementPluginsOutput() GetInstanceConfigManagementPluginsOutput {
	return i.ToGetInstanceConfigManagementPluginsOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsArgs) ToGetInstanceConfigManagementPluginsOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsOutput)
}

// GetInstanceConfigManagementPluginsMapInput is an input type that accepts GetInstanceConfigManagementPluginsMap and GetInstanceConfigManagementPluginsMapOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsMapInput` via:
//
//	GetInstanceConfigManagementPluginsMap{ "key": GetInstanceConfigManagementPluginsArgs{...} }
type GetInstanceConfigManagementPluginsMapInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsMapOutput() GetInstanceConfigManagementPluginsMapOutput
	ToGetInstanceConfigManagementPluginsMapOutputWithContext(context.Context) GetInstanceConfigManagementPluginsMapOutput
}

type GetInstanceConfigManagementPluginsMap map[string]GetInstanceConfigManagementPluginsInput

func (GetInstanceConfigManagementPluginsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GetInstanceConfigManagementPlugins)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsMap) ToGetInstanceConfigManagementPluginsMapOutput() GetInstanceConfigManagementPluginsMapOutput {
	return i.ToGetInstanceConfigManagementPluginsMapOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsMap) ToGetInstanceConfigManagementPluginsMapOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsMapOutput)
}

type GetInstanceConfigManagementPluginsOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPlugins)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsOutput) ToGetInstanceConfigManagementPluginsOutput() GetInstanceConfigManagementPluginsOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsOutput) ToGetInstanceConfigManagementPluginsOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsOutput {
	return o
}

// Whether this plugin is enabled or not. Default to false.
func (o GetInstanceConfigManagementPluginsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPlugins) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Image to use for the plugin
func (o GetInstanceConfigManagementPluginsOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPlugins) string { return v.Image }).(pulumi.StringOutput)
}

// Plugin spec
func (o GetInstanceConfigManagementPluginsOutput) Spec() GetInstanceConfigManagementPluginsSpecOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPlugins) GetInstanceConfigManagementPluginsSpec { return v.Spec }).(GetInstanceConfigManagementPluginsSpecOutput)
}

type GetInstanceConfigManagementPluginsMapOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GetInstanceConfigManagementPlugins)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsMapOutput) ToGetInstanceConfigManagementPluginsMapOutput() GetInstanceConfigManagementPluginsMapOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsMapOutput) ToGetInstanceConfigManagementPluginsMapOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsMapOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsMapOutput) MapIndex(k pulumi.StringInput) GetInstanceConfigManagementPluginsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GetInstanceConfigManagementPlugins {
		return vs[0].(map[string]GetInstanceConfigManagementPlugins)[vs[1].(string)]
	}).(GetInstanceConfigManagementPluginsOutput)
}

type GetInstanceConfigManagementPluginsSpec struct {
	// The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the first (in that order) is evaluated.
	Discover GetInstanceConfigManagementPluginsSpecDiscover `pulumi:"discover"`
	// The generate command runs in the Application source directory each time manifests are generated. Standard output must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation. Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
	Generate GetInstanceConfigManagementPluginsSpecGenerate `pulumi:"generate"`
	// The init command runs in the Application source directory at the beginning of each manifest generation. The init command can output anything. A non-zero status code will fail manifest generation. Init always happens immediately before generate, but its output is not treated as manifests. This is a good place to, for example, download chart dependencies.
	Init GetInstanceConfigManagementPluginsSpecInit `pulumi:"init"`
	// The parameters config describes what parameters the UI should display for an Application. It is up to the user to actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements only inform the "Parameters" tab in the App Details page of the UI.
	Parameters GetInstanceConfigManagementPluginsSpecParameters `pulumi:"parameters"`
	// Whether the plugin receives repository files with original file mode. Dangerous since the repository might have executable files. Set to true only if you trust the CMP plugin authors. Set to false by default.
	PreserveFileMode bool `pulumi:"preserveFileMode"`
	// Plugin version
	Version string `pulumi:"version"`
}

// GetInstanceConfigManagementPluginsSpecInput is an input type that accepts GetInstanceConfigManagementPluginsSpecArgs and GetInstanceConfigManagementPluginsSpecOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecInput` via:
//
//	GetInstanceConfigManagementPluginsSpecArgs{...}
type GetInstanceConfigManagementPluginsSpecInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecOutput() GetInstanceConfigManagementPluginsSpecOutput
	ToGetInstanceConfigManagementPluginsSpecOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecOutput
}

type GetInstanceConfigManagementPluginsSpecArgs struct {
	// The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the first (in that order) is evaluated.
	Discover GetInstanceConfigManagementPluginsSpecDiscoverInput `pulumi:"discover"`
	// The generate command runs in the Application source directory each time manifests are generated. Standard output must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation. Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
	Generate GetInstanceConfigManagementPluginsSpecGenerateInput `pulumi:"generate"`
	// The init command runs in the Application source directory at the beginning of each manifest generation. The init command can output anything. A non-zero status code will fail manifest generation. Init always happens immediately before generate, but its output is not treated as manifests. This is a good place to, for example, download chart dependencies.
	Init GetInstanceConfigManagementPluginsSpecInitInput `pulumi:"init"`
	// The parameters config describes what parameters the UI should display for an Application. It is up to the user to actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements only inform the "Parameters" tab in the App Details page of the UI.
	Parameters GetInstanceConfigManagementPluginsSpecParametersInput `pulumi:"parameters"`
	// Whether the plugin receives repository files with original file mode. Dangerous since the repository might have executable files. Set to true only if you trust the CMP plugin authors. Set to false by default.
	PreserveFileMode pulumi.BoolInput `pulumi:"preserveFileMode"`
	// Plugin version
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetInstanceConfigManagementPluginsSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpec)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecArgs) ToGetInstanceConfigManagementPluginsSpecOutput() GetInstanceConfigManagementPluginsSpecOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecArgs) ToGetInstanceConfigManagementPluginsSpecOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecOutput)
}

type GetInstanceConfigManagementPluginsSpecOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpec)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecOutput) ToGetInstanceConfigManagementPluginsSpecOutput() GetInstanceConfigManagementPluginsSpecOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecOutput) ToGetInstanceConfigManagementPluginsSpecOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecOutput {
	return o
}

// The discovery config is applied to a repository. If every configured discovery tool matches, then the plugin may be used to generate manifests for Applications using the repository. If the discovery config is omitted then the plugin will not match any application but can still be invoked explicitly by specifying the plugin name in the app spec. Only one of fileName, find.glob, or find.command should be specified. If multiple are specified then only the first (in that order) is evaluated.
func (o GetInstanceConfigManagementPluginsSpecOutput) Discover() GetInstanceConfigManagementPluginsSpecDiscoverOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpec) GetInstanceConfigManagementPluginsSpecDiscover {
		return v.Discover
	}).(GetInstanceConfigManagementPluginsSpecDiscoverOutput)
}

// The generate command runs in the Application source directory each time manifests are generated. Standard output must be ONLY valid Kubernetes Objects in either YAML or JSON. A non-zero exit code will fail manifest generation. Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
func (o GetInstanceConfigManagementPluginsSpecOutput) Generate() GetInstanceConfigManagementPluginsSpecGenerateOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpec) GetInstanceConfigManagementPluginsSpecGenerate {
		return v.Generate
	}).(GetInstanceConfigManagementPluginsSpecGenerateOutput)
}

// The init command runs in the Application source directory at the beginning of each manifest generation. The init command can output anything. A non-zero status code will fail manifest generation. Init always happens immediately before generate, but its output is not treated as manifests. This is a good place to, for example, download chart dependencies.
func (o GetInstanceConfigManagementPluginsSpecOutput) Init() GetInstanceConfigManagementPluginsSpecInitOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpec) GetInstanceConfigManagementPluginsSpecInit {
		return v.Init
	}).(GetInstanceConfigManagementPluginsSpecInitOutput)
}

// The parameters config describes what parameters the UI should display for an Application. It is up to the user to actually set parameters in the Application manifest (in spec.source.plugin.parameters). The announcements only inform the "Parameters" tab in the App Details page of the UI.
func (o GetInstanceConfigManagementPluginsSpecOutput) Parameters() GetInstanceConfigManagementPluginsSpecParametersOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpec) GetInstanceConfigManagementPluginsSpecParameters {
		return v.Parameters
	}).(GetInstanceConfigManagementPluginsSpecParametersOutput)
}

// Whether the plugin receives repository files with original file mode. Dangerous since the repository might have executable files. Set to true only if you trust the CMP plugin authors. Set to false by default.
func (o GetInstanceConfigManagementPluginsSpecOutput) PreserveFileMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpec) bool { return v.PreserveFileMode }).(pulumi.BoolOutput)
}

// Plugin version
func (o GetInstanceConfigManagementPluginsSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpec) string { return v.Version }).(pulumi.StringOutput)
}

type GetInstanceConfigManagementPluginsSpecDiscover struct {
	// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
	FileName string `pulumi:"fileName"`
	// Find config
	Find GetInstanceConfigManagementPluginsSpecDiscoverFind `pulumi:"find"`
}

// GetInstanceConfigManagementPluginsSpecDiscoverInput is an input type that accepts GetInstanceConfigManagementPluginsSpecDiscoverArgs and GetInstanceConfigManagementPluginsSpecDiscoverOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecDiscoverInput` via:
//
//	GetInstanceConfigManagementPluginsSpecDiscoverArgs{...}
type GetInstanceConfigManagementPluginsSpecDiscoverInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecDiscoverOutput() GetInstanceConfigManagementPluginsSpecDiscoverOutput
	ToGetInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecDiscoverOutput
}

type GetInstanceConfigManagementPluginsSpecDiscoverArgs struct {
	// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// Find config
	Find GetInstanceConfigManagementPluginsSpecDiscoverFindInput `pulumi:"find"`
}

func (GetInstanceConfigManagementPluginsSpecDiscoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecDiscover)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecDiscoverArgs) ToGetInstanceConfigManagementPluginsSpecDiscoverOutput() GetInstanceConfigManagementPluginsSpecDiscoverOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecDiscoverArgs) ToGetInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecDiscoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecDiscoverOutput)
}

type GetInstanceConfigManagementPluginsSpecDiscoverOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecDiscoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecDiscover)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecDiscoverOutput) ToGetInstanceConfigManagementPluginsSpecDiscoverOutput() GetInstanceConfigManagementPluginsSpecDiscoverOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecDiscoverOutput) ToGetInstanceConfigManagementPluginsSpecDiscoverOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecDiscoverOutput {
	return o
}

// A glob pattern (https://pkg.go.dev/path/filepath#Glob) that is applied to the Application's source directory. If there is a match, this plugin may be used for the Application.
func (o GetInstanceConfigManagementPluginsSpecDiscoverOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecDiscover) string { return v.FileName }).(pulumi.StringOutput)
}

// Find config
func (o GetInstanceConfigManagementPluginsSpecDiscoverOutput) Find() GetInstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecDiscover) GetInstanceConfigManagementPluginsSpecDiscoverFind {
		return v.Find
	}).(GetInstanceConfigManagementPluginsSpecDiscoverFindOutput)
}

type GetInstanceConfigManagementPluginsSpecDiscoverFind struct {
	// Arguments for the find command
	Args []string `pulumi:"args"`
	// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
	Commands []string `pulumi:"commands"`
	// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
	Glob string `pulumi:"glob"`
}

// GetInstanceConfigManagementPluginsSpecDiscoverFindInput is an input type that accepts GetInstanceConfigManagementPluginsSpecDiscoverFindArgs and GetInstanceConfigManagementPluginsSpecDiscoverFindOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecDiscoverFindInput` via:
//
//	GetInstanceConfigManagementPluginsSpecDiscoverFindArgs{...}
type GetInstanceConfigManagementPluginsSpecDiscoverFindInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutput() GetInstanceConfigManagementPluginsSpecDiscoverFindOutput
	ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecDiscoverFindOutput
}

type GetInstanceConfigManagementPluginsSpecDiscoverFindArgs struct {
	// Arguments for the find command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
	Glob pulumi.StringInput `pulumi:"glob"`
}

func (GetInstanceConfigManagementPluginsSpecDiscoverFindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecDiscoverFind)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecDiscoverFindArgs) ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutput() GetInstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecDiscoverFindArgs) ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecDiscoverFindOutput)
}

type GetInstanceConfigManagementPluginsSpecDiscoverFindOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecDiscoverFindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecDiscoverFind)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecDiscoverFindOutput) ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutput() GetInstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecDiscoverFindOutput) ToGetInstanceConfigManagementPluginsSpecDiscoverFindOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecDiscoverFindOutput {
	return o
}

// Arguments for the find command
func (o GetInstanceConfigManagementPluginsSpecDiscoverFindOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecDiscoverFind) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The find command runs in the repository's root directory. To match, it must exit with status code 0 and produce non-empty output to standard out.
func (o GetInstanceConfigManagementPluginsSpecDiscoverFindOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecDiscoverFind) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// This does the same thing as `fileName`, but it supports double-start (nested directory) glob patterns.
func (o GetInstanceConfigManagementPluginsSpecDiscoverFindOutput) Glob() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecDiscoverFind) string { return v.Glob }).(pulumi.StringOutput)
}

type GetInstanceConfigManagementPluginsSpecGenerate struct {
	// Arguments of the command
	Args []string `pulumi:"args"`
	// Command
	Commands []string `pulumi:"commands"`
}

// GetInstanceConfigManagementPluginsSpecGenerateInput is an input type that accepts GetInstanceConfigManagementPluginsSpecGenerateArgs and GetInstanceConfigManagementPluginsSpecGenerateOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecGenerateInput` via:
//
//	GetInstanceConfigManagementPluginsSpecGenerateArgs{...}
type GetInstanceConfigManagementPluginsSpecGenerateInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecGenerateOutput() GetInstanceConfigManagementPluginsSpecGenerateOutput
	ToGetInstanceConfigManagementPluginsSpecGenerateOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecGenerateOutput
}

type GetInstanceConfigManagementPluginsSpecGenerateArgs struct {
	// Arguments of the command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Command
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (GetInstanceConfigManagementPluginsSpecGenerateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecGenerate)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecGenerateArgs) ToGetInstanceConfigManagementPluginsSpecGenerateOutput() GetInstanceConfigManagementPluginsSpecGenerateOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecGenerateOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecGenerateArgs) ToGetInstanceConfigManagementPluginsSpecGenerateOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecGenerateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecGenerateOutput)
}

type GetInstanceConfigManagementPluginsSpecGenerateOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecGenerateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecGenerate)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecGenerateOutput) ToGetInstanceConfigManagementPluginsSpecGenerateOutput() GetInstanceConfigManagementPluginsSpecGenerateOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecGenerateOutput) ToGetInstanceConfigManagementPluginsSpecGenerateOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecGenerateOutput {
	return o
}

// Arguments of the command
func (o GetInstanceConfigManagementPluginsSpecGenerateOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecGenerate) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Command
func (o GetInstanceConfigManagementPluginsSpecGenerateOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecGenerate) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type GetInstanceConfigManagementPluginsSpecInit struct {
	// Arguments of the command
	Args []string `pulumi:"args"`
	// Command
	Commands []string `pulumi:"commands"`
}

// GetInstanceConfigManagementPluginsSpecInitInput is an input type that accepts GetInstanceConfigManagementPluginsSpecInitArgs and GetInstanceConfigManagementPluginsSpecInitOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecInitInput` via:
//
//	GetInstanceConfigManagementPluginsSpecInitArgs{...}
type GetInstanceConfigManagementPluginsSpecInitInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecInitOutput() GetInstanceConfigManagementPluginsSpecInitOutput
	ToGetInstanceConfigManagementPluginsSpecInitOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecInitOutput
}

type GetInstanceConfigManagementPluginsSpecInitArgs struct {
	// Arguments of the command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Command
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (GetInstanceConfigManagementPluginsSpecInitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecInit)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecInitArgs) ToGetInstanceConfigManagementPluginsSpecInitOutput() GetInstanceConfigManagementPluginsSpecInitOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecInitOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecInitArgs) ToGetInstanceConfigManagementPluginsSpecInitOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecInitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecInitOutput)
}

type GetInstanceConfigManagementPluginsSpecInitOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecInitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecInit)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecInitOutput) ToGetInstanceConfigManagementPluginsSpecInitOutput() GetInstanceConfigManagementPluginsSpecInitOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecInitOutput) ToGetInstanceConfigManagementPluginsSpecInitOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecInitOutput {
	return o
}

// Arguments of the command
func (o GetInstanceConfigManagementPluginsSpecInitOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecInit) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Command
func (o GetInstanceConfigManagementPluginsSpecInitOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecInit) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type GetInstanceConfigManagementPluginsSpecParameters struct {
	// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
	Dynamic GetInstanceConfigManagementPluginsSpecParametersDynamic `pulumi:"dynamic"`
	// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
	Statics []GetInstanceConfigManagementPluginsSpecParametersStatic `pulumi:"statics"`
}

// GetInstanceConfigManagementPluginsSpecParametersInput is an input type that accepts GetInstanceConfigManagementPluginsSpecParametersArgs and GetInstanceConfigManagementPluginsSpecParametersOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecParametersInput` via:
//
//	GetInstanceConfigManagementPluginsSpecParametersArgs{...}
type GetInstanceConfigManagementPluginsSpecParametersInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecParametersOutput() GetInstanceConfigManagementPluginsSpecParametersOutput
	ToGetInstanceConfigManagementPluginsSpecParametersOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecParametersOutput
}

type GetInstanceConfigManagementPluginsSpecParametersArgs struct {
	// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
	Dynamic GetInstanceConfigManagementPluginsSpecParametersDynamicInput `pulumi:"dynamic"`
	// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
	Statics GetInstanceConfigManagementPluginsSpecParametersStaticArrayInput `pulumi:"statics"`
}

func (GetInstanceConfigManagementPluginsSpecParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParameters)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecParametersArgs) ToGetInstanceConfigManagementPluginsSpecParametersOutput() GetInstanceConfigManagementPluginsSpecParametersOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecParametersOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecParametersArgs) ToGetInstanceConfigManagementPluginsSpecParametersOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecParametersOutput)
}

type GetInstanceConfigManagementPluginsSpecParametersOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParameters)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecParametersOutput) ToGetInstanceConfigManagementPluginsSpecParametersOutput() GetInstanceConfigManagementPluginsSpecParametersOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecParametersOutput) ToGetInstanceConfigManagementPluginsSpecParametersOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersOutput {
	return o
}

// Dynamic parameter announcements are announcements specific to an Application handled by this plugin. For example, the values for a Helm chart's values.yaml file could be sent as parameter announcements.
func (o GetInstanceConfigManagementPluginsSpecParametersOutput) Dynamic() GetInstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParameters) GetInstanceConfigManagementPluginsSpecParametersDynamic {
		return v.Dynamic
	}).(GetInstanceConfigManagementPluginsSpecParametersDynamicOutput)
}

// Static parameter announcements are sent to the UI for all Applications handled by this plugin. Think of the `string`, `array`, and `map` values set here as defaults. It is up to the plugin author to make sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different values for those parameters.
func (o GetInstanceConfigManagementPluginsSpecParametersOutput) Statics() GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParameters) []GetInstanceConfigManagementPluginsSpecParametersStatic {
		return v.Statics
	}).(GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput)
}

type GetInstanceConfigManagementPluginsSpecParametersDynamic struct {
	// Arguments of the command
	Args []string `pulumi:"args"`
	// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
	Commands []string `pulumi:"commands"`
}

// GetInstanceConfigManagementPluginsSpecParametersDynamicInput is an input type that accepts GetInstanceConfigManagementPluginsSpecParametersDynamicArgs and GetInstanceConfigManagementPluginsSpecParametersDynamicOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecParametersDynamicInput` via:
//
//	GetInstanceConfigManagementPluginsSpecParametersDynamicArgs{...}
type GetInstanceConfigManagementPluginsSpecParametersDynamicInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutput() GetInstanceConfigManagementPluginsSpecParametersDynamicOutput
	ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecParametersDynamicOutput
}

type GetInstanceConfigManagementPluginsSpecParametersDynamicArgs struct {
	// Arguments of the command
	Args pulumi.StringArrayInput `pulumi:"args"`
	// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
}

func (GetInstanceConfigManagementPluginsSpecParametersDynamicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersDynamic)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecParametersDynamicArgs) ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutput() GetInstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecParametersDynamicArgs) ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecParametersDynamicOutput)
}

type GetInstanceConfigManagementPluginsSpecParametersDynamicOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecParametersDynamicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersDynamic)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecParametersDynamicOutput) ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutput() GetInstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecParametersDynamicOutput) ToGetInstanceConfigManagementPluginsSpecParametersDynamicOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersDynamicOutput {
	return o
}

// Arguments of the command
func (o GetInstanceConfigManagementPluginsSpecParametersDynamicOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersDynamic) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// The command will run in an Application's source directory. Standard output must be JSON matching the schema of the static parameter announcements list.
func (o GetInstanceConfigManagementPluginsSpecParametersDynamicOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersDynamic) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

type GetInstanceConfigManagementPluginsSpecParametersStatic struct {
	// This field communicates the parameter's default value to the UI if the parameter is an `array`.
	Arrays []string `pulumi:"arrays"`
	// Collection Type describes what type of value this parameter accepts (string, array, or map) and allows the UI to present a form to match that type. Default is `string`. This field must be present for non-string types. It will not be inferred from the presence of an `array` or `map` field.
	CollectionType string `pulumi:"collectionType"`
	// Item type tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is `string`. Examples of other types which may be supported in the future are `boolean` or `number`. Even if the itemType is not `string`, the parameter value from the Application spec will be sent to the plugin as a string. It's up to the plugin to do the appropriate conversion.
	ItemType string `pulumi:"itemType"`
	// This field communicates the parameter's default value to the UI if the parameter is a `map`.
	Map map[string]string `pulumi:"map"`
	// Parameter name
	Name string `pulumi:"name"`
	// Whether the Parameter is required or not. If this field is set to true, the UI will indicate to the user that they must set the value. Default to false.
	Required bool `pulumi:"required"`
	// This field communicates the parameter's default value to the UI if the parameter is a `string`.
	String string `pulumi:"string"`
	// Title and description of the parameter
	Title string `pulumi:"title"`
	// Tooltip of the Parameter, will be shown when hovering over the title
	Tooltip string `pulumi:"tooltip"`
}

// GetInstanceConfigManagementPluginsSpecParametersStaticInput is an input type that accepts GetInstanceConfigManagementPluginsSpecParametersStaticArgs and GetInstanceConfigManagementPluginsSpecParametersStaticOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecParametersStaticInput` via:
//
//	GetInstanceConfigManagementPluginsSpecParametersStaticArgs{...}
type GetInstanceConfigManagementPluginsSpecParametersStaticInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecParametersStaticOutput() GetInstanceConfigManagementPluginsSpecParametersStaticOutput
	ToGetInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecParametersStaticOutput
}

type GetInstanceConfigManagementPluginsSpecParametersStaticArgs struct {
	// This field communicates the parameter's default value to the UI if the parameter is an `array`.
	Arrays pulumi.StringArrayInput `pulumi:"arrays"`
	// Collection Type describes what type of value this parameter accepts (string, array, or map) and allows the UI to present a form to match that type. Default is `string`. This field must be present for non-string types. It will not be inferred from the presence of an `array` or `map` field.
	CollectionType pulumi.StringInput `pulumi:"collectionType"`
	// Item type tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is `string`. Examples of other types which may be supported in the future are `boolean` or `number`. Even if the itemType is not `string`, the parameter value from the Application spec will be sent to the plugin as a string. It's up to the plugin to do the appropriate conversion.
	ItemType pulumi.StringInput `pulumi:"itemType"`
	// This field communicates the parameter's default value to the UI if the parameter is a `map`.
	Map pulumi.StringMapInput `pulumi:"map"`
	// Parameter name
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the Parameter is required or not. If this field is set to true, the UI will indicate to the user that they must set the value. Default to false.
	Required pulumi.BoolInput `pulumi:"required"`
	// This field communicates the parameter's default value to the UI if the parameter is a `string`.
	String pulumi.StringInput `pulumi:"string"`
	// Title and description of the parameter
	Title pulumi.StringInput `pulumi:"title"`
	// Tooltip of the Parameter, will be shown when hovering over the title
	Tooltip pulumi.StringInput `pulumi:"tooltip"`
}

func (GetInstanceConfigManagementPluginsSpecParametersStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecParametersStaticArgs) ToGetInstanceConfigManagementPluginsSpecParametersStaticOutput() GetInstanceConfigManagementPluginsSpecParametersStaticOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecParametersStaticArgs) ToGetInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecParametersStaticOutput)
}

// GetInstanceConfigManagementPluginsSpecParametersStaticArrayInput is an input type that accepts GetInstanceConfigManagementPluginsSpecParametersStaticArray and GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput values.
// You can construct a concrete instance of `GetInstanceConfigManagementPluginsSpecParametersStaticArrayInput` via:
//
//	GetInstanceConfigManagementPluginsSpecParametersStaticArray{ GetInstanceConfigManagementPluginsSpecParametersStaticArgs{...} }
type GetInstanceConfigManagementPluginsSpecParametersStaticArrayInput interface {
	pulumi.Input

	ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput() GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput
	ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(context.Context) GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput
}

type GetInstanceConfigManagementPluginsSpecParametersStaticArray []GetInstanceConfigManagementPluginsSpecParametersStaticInput

func (GetInstanceConfigManagementPluginsSpecParametersStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (i GetInstanceConfigManagementPluginsSpecParametersStaticArray) ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput() GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return i.ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(context.Background())
}

func (i GetInstanceConfigManagementPluginsSpecParametersStaticArray) ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput)
}

type GetInstanceConfigManagementPluginsSpecParametersStaticOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecParametersStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) ToGetInstanceConfigManagementPluginsSpecParametersStaticOutput() GetInstanceConfigManagementPluginsSpecParametersStaticOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) ToGetInstanceConfigManagementPluginsSpecParametersStaticOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersStaticOutput {
	return o
}

// This field communicates the parameter's default value to the UI if the parameter is an `array`.
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) Arrays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) []string { return v.Arrays }).(pulumi.StringArrayOutput)
}

// Collection Type describes what type of value this parameter accepts (string, array, or map) and allows the UI to present a form to match that type. Default is `string`. This field must be present for non-string types. It will not be inferred from the presence of an `array` or `map` field.
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) CollectionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) string { return v.CollectionType }).(pulumi.StringOutput)
}

// Item type tells the UI how to present the parameter's value (or, for arrays and maps, values). Default is `string`. Examples of other types which may be supported in the future are `boolean` or `number`. Even if the itemType is not `string`, the parameter value from the Application spec will be sent to the plugin as a string. It's up to the plugin to do the appropriate conversion.
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) ItemType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) string { return v.ItemType }).(pulumi.StringOutput)
}

// This field communicates the parameter's default value to the UI if the parameter is a `map`.
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) Map() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) map[string]string { return v.Map }).(pulumi.StringMapOutput)
}

// Parameter name
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the Parameter is required or not. If this field is set to true, the UI will indicate to the user that they must set the value. Default to false.
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) bool { return v.Required }).(pulumi.BoolOutput)
}

// This field communicates the parameter's default value to the UI if the parameter is a `string`.
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) String() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) string { return v.String }).(pulumi.StringOutput)
}

// Title and description of the parameter
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) string { return v.Title }).(pulumi.StringOutput)
}

// Tooltip of the Parameter, will be shown when hovering over the title
func (o GetInstanceConfigManagementPluginsSpecParametersStaticOutput) Tooltip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigManagementPluginsSpecParametersStatic) string { return v.Tooltip }).(pulumi.StringOutput)
}

type GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceConfigManagementPluginsSpecParametersStatic)(nil)).Elem()
}

func (o GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput) ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput() GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput) ToGetInstanceConfigManagementPluginsSpecParametersStaticArrayOutputWithContext(ctx context.Context) GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput {
	return o
}

func (o GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput) Index(i pulumi.IntInput) GetInstanceConfigManagementPluginsSpecParametersStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceConfigManagementPluginsSpecParametersStatic {
		return vs[0].([]GetInstanceConfigManagementPluginsSpecParametersStatic)[vs[1].(int)]
	}).(GetInstanceConfigManagementPluginsSpecParametersStaticOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterKubeConfigInput)(nil)).Elem(), ClusterKubeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterKubeConfigPtrInput)(nil)).Elem(), ClusterKubeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecInput)(nil)).Elem(), ClusterSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecPtrInput)(nil)).Elem(), ClusterSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecDataInput)(nil)).Elem(), ClusterSpecDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecDataPtrInput)(nil)).Elem(), ClusterSpecDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecDataManagedClusterConfigInput)(nil)).Elem(), ClusterSpecDataManagedClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSpecDataManagedClusterConfigPtrInput)(nil)).Elem(), ClusterSpecDataManagedClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdInput)(nil)).Elem(), InstanceArgocdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdPtrInput)(nil)).Elem(), InstanceArgocdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInput)(nil)).Elem(), InstanceArgocdSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecPtrInput)(nil)).Elem(), InstanceArgocdSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegateInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAppSetDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegatePtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAppSetDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppsetPolicyInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAppsetPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecAppsetPolicyPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecAppsetPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtensionInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecExtensionInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecExtensionArrayInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecHostAliasInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecHostAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecHostAliasArrayInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecHostAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecIpAllowListInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecIpAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecIpAllowListArrayInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecIpAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegateInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecRepoServerDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrInput)(nil)).Elem(), InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsInput)(nil)).Elem(), InstanceConfigManagementPluginsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsMapInput)(nil)).Elem(), InstanceConfigManagementPluginsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscoverInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecDiscoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscoverPtrInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecDiscoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscoverFindInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecDiscoverFindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecDiscoverFindPtrInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecDiscoverFindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecGenerateInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecGenerateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecInitInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecInitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecInitPtrInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecInitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersPtrInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersDynamicInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecParametersDynamicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersDynamicPtrInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecParametersDynamicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersStaticInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecParametersStaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigManagementPluginsSpecParametersStaticArrayInput)(nil)).Elem(), InstanceConfigManagementPluginsSpecParametersStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterKubeConfigInput)(nil)).Elem(), GetClusterKubeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterSpecInput)(nil)).Elem(), GetClusterSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterSpecDataInput)(nil)).Elem(), GetClusterSpecDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterSpecDataManagedClusterConfigInput)(nil)).Elem(), GetClusterSpecDataManagedClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterInput)(nil)).Elem(), GetClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterArrayInput)(nil)).Elem(), GetClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterKubeConfigInput)(nil)).Elem(), GetClustersClusterKubeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterSpecInput)(nil)).Elem(), GetClustersClusterSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterSpecDataInput)(nil)).Elem(), GetClustersClusterSpecDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterSpecDataManagedClusterConfigInput)(nil)).Elem(), GetClustersClusterSpecDataManagedClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdInput)(nil)).Elem(), GetInstanceArgocdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInput)(nil)).Elem(), GetInstanceArgocdSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppSetDelegateInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecAppSetDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecAppsetPolicyInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecAppsetPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecExtensionInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecExtensionArrayInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecHostAliasInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecHostAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecHostAliasArrayInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecHostAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecIpAllowListInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecIpAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecIpAllowListArrayInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecIpAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecRepoServerDelegateInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecRepoServerDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterInput)(nil)).Elem(), GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsInput)(nil)).Elem(), GetInstanceConfigManagementPluginsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsMapInput)(nil)).Elem(), GetInstanceConfigManagementPluginsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecDiscoverInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecDiscoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecDiscoverFindInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecDiscoverFindArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecGenerateInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecGenerateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecInitInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecInitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersDynamicInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecParametersDynamicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersStaticInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecParametersStaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigManagementPluginsSpecParametersStaticArrayInput)(nil)).Elem(), GetInstanceConfigManagementPluginsSpecParametersStaticArray{})
	pulumi.RegisterOutputType(ClusterKubeConfigOutput{})
	pulumi.RegisterOutputType(ClusterKubeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecOutput{})
	pulumi.RegisterOutputType(ClusterSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecDataOutput{})
	pulumi.RegisterOutputType(ClusterSpecDataPtrOutput{})
	pulumi.RegisterOutputType(ClusterSpecDataManagedClusterConfigOutput{})
	pulumi.RegisterOutputType(ClusterSpecDataManagedClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdOutput{})
	pulumi.RegisterOutputType(InstanceArgocdPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAppSetDelegateOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAppSetDelegatePtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAppsetPolicyOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecAppsetPolicyPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecCrossplaneExtensionPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecExtensionOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecExtensionArrayOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecHostAliasOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecHostAliasArrayOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecImageUpdaterDelegatePtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterPtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecIpAllowListOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecIpAllowListArrayOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecRepoServerDelegateOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecRepoServerDelegatePtrOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput{})
	pulumi.RegisterOutputType(InstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsMapOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecDiscoverOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecDiscoverPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecDiscoverFindOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecDiscoverFindPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecGenerateOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecInitOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecInitPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecParametersOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecParametersPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecParametersDynamicOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecParametersDynamicPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecParametersStaticOutput{})
	pulumi.RegisterOutputType(InstanceConfigManagementPluginsSpecParametersStaticArrayOutput{})
	pulumi.RegisterOutputType(GetClusterKubeConfigOutput{})
	pulumi.RegisterOutputType(GetClusterSpecOutput{})
	pulumi.RegisterOutputType(GetClusterSpecDataOutput{})
	pulumi.RegisterOutputType(GetClusterSpecDataManagedClusterConfigOutput{})
	pulumi.RegisterOutputType(GetClustersClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterKubeConfigOutput{})
	pulumi.RegisterOutputType(GetClustersClusterSpecOutput{})
	pulumi.RegisterOutputType(GetClustersClusterSpecDataOutput{})
	pulumi.RegisterOutputType(GetClustersClusterSpecDataManagedClusterConfigOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecAgentPermissionsRuleArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecAppSetDelegateOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecAppSetDelegateManagedClusterOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecAppsetPolicyOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecClusterCustomizationDefaultsOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecCrossplaneExtensionResourceArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecExtensionOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecExtensionArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecHostAliasOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecHostAliasArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecImageUpdaterDelegateManagedClusterOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecIpAllowListOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecIpAllowListArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecRepoServerDelegateOutput{})
	pulumi.RegisterOutputType(GetInstanceArgocdSpecInstanceSpecRepoServerDelegateManagedClusterOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsMapOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecDiscoverOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecDiscoverFindOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecGenerateOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecInitOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecParametersOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecParametersDynamicOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecParametersStaticOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigManagementPluginsSpecParametersStaticArrayOutput{})
}
