// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akp

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-akp/sdk/go/akp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a cluster by its name and Argo CD instance ID
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-akp/sdk/go/akp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleInstance, err := akp.LookupInstance(ctx, &akp.LookupInstanceArgs{
//				Name: "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = akp.LookupCluster(ctx, &akp.LookupClusterArgs{
//				InstanceId: exampleInstance.Id,
//				Name:       "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCluster(ctx *pulumi.Context, args *LookupClusterArgs, opts ...pulumi.InvokeOption) (*LookupClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClusterResult
	err := ctx.Invoke("akp:index/getCluster:getCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCluster.
type LookupClusterArgs struct {
	// Argo CD instance ID
	InstanceId string `pulumi:"instanceId"`
	// Cluster name
	Name string `pulumi:"name"`
}

// A collection of values returned by getCluster.
type LookupClusterResult struct {
	// Annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Cluster ID
	Id string `pulumi:"id"`
	// Argo CD instance ID
	InstanceId string               `pulumi:"instanceId"`
	KubeConfig GetClusterKubeConfig `pulumi:"kubeConfig"`
	// Labels
	Labels map[string]string `pulumi:"labels"`
	// Cluster name
	Name string `pulumi:"name"`
	// Agent installation namespace
	Namespace string `pulumi:"namespace"`
	// Remove agent Kubernetes resources from the managed cluster when destroying cluster
	RemoveAgentResourcesOnDestroy bool `pulumi:"removeAgentResourcesOnDestroy"`
	// Cluster spec
	Spec GetClusterSpec `pulumi:"spec"`
}

func LookupClusterOutput(ctx *pulumi.Context, args LookupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClusterResult, error) {
			args := v.(LookupClusterArgs)
			r, err := LookupCluster(ctx, &args, opts...)
			var s LookupClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClusterResultOutput)
}

// A collection of arguments for invoking getCluster.
type LookupClusterOutputArgs struct {
	// Argo CD instance ID
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Cluster name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterArgs)(nil)).Elem()
}

// A collection of values returned by getCluster.
type LookupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClusterResult)(nil)).Elem()
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutput() LookupClusterResultOutput {
	return o
}

func (o LookupClusterResultOutput) ToLookupClusterResultOutputWithContext(ctx context.Context) LookupClusterResultOutput {
	return o
}

// Annotations
func (o LookupClusterResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Cluster ID
func (o LookupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Argo CD instance ID
func (o LookupClusterResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupClusterResultOutput) KubeConfig() GetClusterKubeConfigOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterKubeConfig { return v.KubeConfig }).(GetClusterKubeConfigOutput)
}

// Labels
func (o LookupClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Cluster name
func (o LookupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// Agent installation namespace
func (o LookupClusterResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClusterResult) string { return v.Namespace }).(pulumi.StringOutput)
}

// Remove agent Kubernetes resources from the managed cluster when destroying cluster
func (o LookupClusterResultOutput) RemoveAgentResourcesOnDestroy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClusterResult) bool { return v.RemoveAgentResourcesOnDestroy }).(pulumi.BoolOutput)
}

// Cluster spec
func (o LookupClusterResultOutput) Spec() GetClusterSpecOutput {
	return o.ApplyT(func(v LookupClusterResult) GetClusterSpec { return v.Spec }).(GetClusterSpecOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClusterResultOutput{})
}
